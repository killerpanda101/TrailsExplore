{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\", \"components\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { deepmerge, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    theme: defaultTheme = {},\n    attribute: defaultAttribute = DEFAULT_ATTRIBUTE,\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    defaultMode: desisgnSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    enableColorScheme: designSystemEnableColorScheme = true,\n    shouldSkipGeneratingVar: designSystemShouldSkipGeneratingVar,\n    resolveTheme\n  } = options;\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(\"MUI: `\".concat(designSystemColorScheme, \"` does not exist in `theme.colorSchemes`.\"));\n  }\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"MUI: `useColorScheme` must be called under <CssVarsProvider />\" : _formatMuiErrorMessage(19));\n    }\n    return value;\n  };\n  function CssVarsProvider(_ref) {\n    let {\n      children,\n      theme: themeProp = defaultTheme,\n      modeStorageKey = defaultModeStorageKey,\n      colorSchemeStorageKey = defaultColorSchemeStorageKey,\n      attribute = defaultAttribute,\n      defaultMode = desisgnSystemMode,\n      defaultColorScheme = designSystemColorScheme,\n      disableTransitionOnChange = designSystemTransitionOnChange,\n      enableColorScheme = designSystemEnableColorScheme,\n      storageWindow = typeof window === 'undefined' ? undefined : window,\n      documentNode = typeof document === 'undefined' ? undefined : document,\n      colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n      colorSchemeSelector = ':root',\n      shouldSkipGeneratingVar = designSystemShouldSkipGeneratingVar\n    } = _ref;\n    const hasMounted = React.useRef(false);\n    const {\n        colorSchemes = {},\n        components = {},\n        cssVarPrefix\n      } = themeProp,\n      restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded);\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n    const {\n      mode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n    const resolvedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (defaultMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'auto'\n\n        return defaultLightColorScheme;\n      }\n      return colorScheme;\n    })();\n    let theme = restThemeProp;\n    const {\n      css: rootCss,\n      vars: rootVars,\n      parsedTheme\n    } = cssVarsParser(theme, {\n      prefix: cssVarPrefix,\n      shouldSkipGeneratingVar\n    });\n    theme = _extends({}, parsedTheme, {\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: targetColorScheme => \"[\".concat(attribute, \"=\\\"\").concat(targetColorScheme, \"\\\"] &\")\n    });\n    const defaultColorSchemeStyleSheet = {};\n    const otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(_ref2 => {\n      let [key, scheme] = _ref2;\n      const {\n        css,\n        vars,\n        parsedTheme: parsedScheme\n      } = cssVarsParser(scheme, {\n        prefix: cssVarPrefix,\n        shouldSkipGeneratingVar\n      });\n      theme.vars = deepmerge(theme.vars, vars);\n      if (key === resolvedColorScheme) {\n        theme = _extends({}, theme, parsedScheme);\n        if (theme.palette) {\n          // assign runtime mode & colorScheme\n          theme.palette.mode = mode;\n          theme.palette.colorScheme = resolvedColorScheme;\n        }\n      }\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n        return defaultColorScheme.light;\n      })();\n      if (key === resolvedDefaultColorScheme) {\n        defaultColorSchemeStyleSheet[\"\".concat(colorSchemeSelector, \", [\").concat(attribute, \"=\\\"\").concat(key, \"\\\"]\")] = css;\n      } else {\n        otherColorSchemesStyleSheet[\"\".concat(colorSchemeSelector === ':root' ? '' : colorSchemeSelector, \"[\").concat(attribute, \"=\\\"\").concat(key, \"\\\"]\")] = css;\n      }\n    });\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]);\n    useEnhancedEffect(() => {\n      if (!mode || !enableColorScheme || !colorSchemeNode) {\n        return undefined;\n      }\n      const priorColorScheme = colorSchemeNode.style.getPropertyValue('color-scheme'); // `color-scheme` tells browser to render built-in elements according to its value: `light` or `dark`\n\n      if (mode === 'system') {\n        colorSchemeNode.style.setProperty('color-scheme', systemMode);\n      } else {\n        colorSchemeNode.style.setProperty('color-scheme', mode);\n      }\n      return () => {\n        colorSchemeNode.style.setProperty('color-scheme', priorColorScheme);\n      };\n    }, [mode, systemMode, enableColorScheme, colorSchemeNode]);\n    React.useEffect(() => {\n      let timer;\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css); // Force browser repaint\n\n        (() => window.getComputedStyle(documentNode.body))();\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: {\n        mode,\n        setMode,\n        lightColorScheme,\n        darkColorScheme,\n        colorScheme,\n        setColorScheme,\n        allColorSchemes\n      },\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          [colorSchemeSelector]: rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: defaultColorSchemeStyleSheet\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: otherColorSchemesStyleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n  }\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: PropTypes.bool,\n    /**\n     * The document to attach the attribute to\n     */\n    documentNode: PropTypes.any,\n    /**\n     * Indicate to the browser which color scheme is used (light or dark) for rendering built-in UI\n     */\n    enableColorScheme: PropTypes.bool,\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n    /**\n     * A function to determine if the key, value should be attached as CSS Variable\n     */\n    shouldSkipGeneratingVar: PropTypes.func,\n    /**\n     * The window that attaches the 'storage' event listener\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  const getInitColorSchemeScript = params => systemGetInitColorSchemeScript(_extends({\n    attribute: defaultAttribute,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    modeStorageKey: defaultModeStorageKey,\n    enableColorScheme: designSystemEnableColorScheme\n  }, params));\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","formatMuiErrorMessage","_formatMuiErrorMessage","_excluded","React","PropTypes","deepmerge","unstable_useEnhancedEffect","useEnhancedEffect","GlobalStyles","cssVarsParser","ThemeProvider","systemGetInitColorSchemeScript","DEFAULT_ATTRIBUTE","DEFAULT_COLOR_SCHEME_STORAGE_KEY","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","theme","defaultTheme","attribute","defaultAttribute","modeStorageKey","defaultModeStorageKey","colorSchemeStorageKey","defaultColorSchemeStorageKey","defaultMode","desisgnSystemMode","defaultColorScheme","designSystemColorScheme","disableTransitionOnChange","designSystemTransitionOnChange","enableColorScheme","designSystemEnableColorScheme","shouldSkipGeneratingVar","designSystemShouldSkipGeneratingVar","resolveTheme","colorSchemes","light","dark","console","error","concat","ColorSchemeContext","createContext","undefined","useColorScheme","value","useContext","Error","process","env","NODE_ENV","CssVarsProvider","_ref","children","themeProp","storageWindow","window","documentNode","document","colorSchemeNode","documentElement","colorSchemeSelector","hasMounted","useRef","components","cssVarPrefix","restThemeProp","allColorSchemes","Object","keys","defaultLightColorScheme","defaultDarkColorScheme","mode","setMode","systemMode","lightColorScheme","darkColorScheme","colorScheme","setColorScheme","supportedColorSchemes","resolvedColorScheme","css","rootCss","vars","rootVars","parsedTheme","prefix","getColorSchemeSelector","targetColorScheme","defaultColorSchemeStyleSheet","otherColorSchemesStyleSheet","entries","forEach","_ref2","key","scheme","parsedScheme","palette","resolvedDefaultColorScheme","useEffect","setAttribute","priorColorScheme","style","getPropertyValue","setProperty","timer","current","createElement","appendChild","createTextNode","head","getComputedStyle","body","setTimeout","removeChild","clearTimeout","Provider","styles","propTypes","string","node","any","oneOfType","object","bool","func","getInitColorSchemeScript","params"],"sources":["/Users/parijatchatterjee/Desktop/TrailsExplore/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\", \"components\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { deepmerge, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    theme: defaultTheme = {},\n    attribute: defaultAttribute = DEFAULT_ATTRIBUTE,\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    defaultMode: desisgnSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    enableColorScheme: designSystemEnableColorScheme = true,\n    shouldSkipGeneratingVar: designSystemShouldSkipGeneratingVar,\n    resolveTheme\n  } = options;\n\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider({\n    children,\n    theme: themeProp = defaultTheme,\n    modeStorageKey = defaultModeStorageKey,\n    colorSchemeStorageKey = defaultColorSchemeStorageKey,\n    attribute = defaultAttribute,\n    defaultMode = desisgnSystemMode,\n    defaultColorScheme = designSystemColorScheme,\n    disableTransitionOnChange = designSystemTransitionOnChange,\n    enableColorScheme = designSystemEnableColorScheme,\n    storageWindow = typeof window === 'undefined' ? undefined : window,\n    documentNode = typeof document === 'undefined' ? undefined : document,\n    colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n    colorSchemeSelector = ':root',\n    shouldSkipGeneratingVar = designSystemShouldSkipGeneratingVar\n  }) {\n    const hasMounted = React.useRef(false);\n\n    const {\n      colorSchemes = {},\n      components = {},\n      cssVarPrefix\n    } = themeProp,\n          restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded);\n\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n    const {\n      mode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n\n    const resolvedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (defaultMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'auto'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    })();\n\n    let theme = restThemeProp;\n    const {\n      css: rootCss,\n      vars: rootVars,\n      parsedTheme\n    } = cssVarsParser(theme, {\n      prefix: cssVarPrefix,\n      shouldSkipGeneratingVar\n    });\n    theme = _extends({}, parsedTheme, {\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: targetColorScheme => `[${attribute}=\"${targetColorScheme}\"] &`\n    });\n    const defaultColorSchemeStyleSheet = {};\n    const otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\n      const {\n        css,\n        vars,\n        parsedTheme: parsedScheme\n      } = cssVarsParser(scheme, {\n        prefix: cssVarPrefix,\n        shouldSkipGeneratingVar\n      });\n      theme.vars = deepmerge(theme.vars, vars);\n\n      if (key === resolvedColorScheme) {\n        theme = _extends({}, theme, parsedScheme);\n\n        if (theme.palette) {\n          // assign runtime mode & colorScheme\n          theme.palette.mode = mode;\n          theme.palette.colorScheme = resolvedColorScheme;\n        }\n      }\n\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      })();\n\n      if (key === resolvedDefaultColorScheme) {\n        defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}=\"${key}\"]`] = css;\n      } else {\n        otherColorSchemesStyleSheet[`${colorSchemeSelector === ':root' ? '' : colorSchemeSelector}[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]);\n    useEnhancedEffect(() => {\n      if (!mode || !enableColorScheme || !colorSchemeNode) {\n        return undefined;\n      }\n\n      const priorColorScheme = colorSchemeNode.style.getPropertyValue('color-scheme'); // `color-scheme` tells browser to render built-in elements according to its value: `light` or `dark`\n\n      if (mode === 'system') {\n        colorSchemeNode.style.setProperty('color-scheme', systemMode);\n      } else {\n        colorSchemeNode.style.setProperty('color-scheme', mode);\n      }\n\n      return () => {\n        colorSchemeNode.style.setProperty('color-scheme', priorColorScheme);\n      };\n    }, [mode, systemMode, enableColorScheme, colorSchemeNode]);\n    React.useEffect(() => {\n      let timer;\n\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css); // Force browser repaint\n\n        (() => window.getComputedStyle(documentNode.body))();\n\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: {\n        mode,\n        setMode,\n        lightColorScheme,\n        darkColorScheme,\n        colorScheme,\n        setColorScheme,\n        allColorSchemes\n      },\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          [colorSchemeSelector]: rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: defaultColorSchemeStyleSheet\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: otherColorSchemesStyleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: PropTypes.bool,\n\n    /**\n     * The document to attach the attribute to\n     */\n    documentNode: PropTypes.any,\n\n    /**\n     * Indicate to the browser which color scheme is used (light or dark) for rendering built-in UI\n     */\n    enableColorScheme: PropTypes.bool,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * A function to determine if the key, value should be attached as CSS Variable\n     */\n    shouldSkipGeneratingVar: PropTypes.func,\n\n    /**\n     * The window that attaches the 'storage' event listener\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n\n  const getInitColorSchemeScript = params => systemGetInitColorSchemeScript(_extends({\n    attribute: defaultAttribute,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    modeStorageKey: defaultModeStorageKey,\n    enableColorScheme: designSystemEnableColorScheme\n  }, params));\n\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAOC,6BAA6B,MAAM,yDAAyD;AACnG,SAASC,qBAAqB,IAAIC,sBAAsB,QAAQ,YAAY;AAC5E,MAAMC,SAAS,GAAG,CAAC,cAAc,EAAE,YAAY,EAAE,cAAc,CAAC;AAChE,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,SAAS,EAAEC,0BAA0B,IAAIC,iBAAiB,QAAQ,YAAY;AACvF,SAASC,YAAY,QAAQ,oBAAoB;AACjD,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,aAAa,MAAM,kBAAkB;AAC5C,OAAOC,8BAA8B,IAAIC,iBAAiB,EAAEC,gCAAgC,EAAEC,wBAAwB,QAAQ,4BAA4B;AAC1J,OAAOC,qBAAqB,MAAM,yBAAyB;AAC3D,SAASC,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,SAASC,IAAI,IAAIC,KAAK,QAAQ,mBAAmB;AACjD,OAAO,MAAMC,sBAAsB,GAAG,0JAA0J;AAChM,eAAe,SAASC,qBAAqBA,CAACC,OAAO,EAAE;EACrD,MAAM;IACJC,KAAK,EAAEC,YAAY,GAAG,CAAC,CAAC;IACxBC,SAAS,EAAEC,gBAAgB,GAAGd,iBAAiB;IAC/Ce,cAAc,EAAEC,qBAAqB,GAAGd,wBAAwB;IAChEe,qBAAqB,EAAEC,4BAA4B,GAAGjB,gCAAgC;IACtFkB,WAAW,EAAEC,iBAAiB,GAAG,OAAO;IACxCC,kBAAkB,EAAEC,uBAAuB;IAC3CC,yBAAyB,EAAEC,8BAA8B,GAAG,KAAK;IACjEC,iBAAiB,EAAEC,6BAA6B,GAAG,IAAI;IACvDC,uBAAuB,EAAEC,mCAAmC;IAC5DC;EACF,CAAC,GAAGnB,OAAO;EAEX,IAAI,CAACE,YAAY,CAACkB,YAAY,IAAI,OAAOR,uBAAuB,KAAK,QAAQ,IAAI,CAACV,YAAY,CAACkB,YAAY,CAACR,uBAAuB,CAAC,IAAI,OAAOA,uBAAuB,KAAK,QAAQ,IAAI,CAACV,YAAY,CAACkB,YAAY,CAACR,uBAAuB,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,uBAAuB,CAACS,KAAK,CAAC,IAAI,OAAOT,uBAAuB,KAAK,QAAQ,IAAI,CAACV,YAAY,CAACkB,YAAY,CAACR,uBAAuB,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,uBAAuB,CAACU,IAAI,CAAC,EAAE;IACjbC,OAAO,CAACC,KAAK,UAAAC,MAAA,CAAWb,uBAAuB,8CAA8C,CAAC;EAChG;EAEA,MAAMc,kBAAkB,GAAG,aAAa7C,KAAK,CAAC8C,aAAa,CAACC,SAAS,CAAC;EAEtE,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMC,KAAK,GAAGjD,KAAK,CAACkD,UAAU,CAACL,kBAAkB,CAAC;IAElD,IAAI,CAACI,KAAK,EAAE;MACV,MAAM,IAAIE,KAAK,CAACC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,sEAAwExD,sBAAsB,CAAC,EAAE,CAAC,CAAC;IAC1J;IAEA,OAAOmD,KAAK;EACd,CAAC;EAED,SAASM,eAAeA,CAAAC,IAAA,EAerB;IAAA,IAfsB;MACvBC,QAAQ;MACRrC,KAAK,EAAEsC,SAAS,GAAGrC,YAAY;MAC/BG,cAAc,GAAGC,qBAAqB;MACtCC,qBAAqB,GAAGC,4BAA4B;MACpDL,SAAS,GAAGC,gBAAgB;MAC5BK,WAAW,GAAGC,iBAAiB;MAC/BC,kBAAkB,GAAGC,uBAAuB;MAC5CC,yBAAyB,GAAGC,8BAA8B;MAC1DC,iBAAiB,GAAGC,6BAA6B;MACjDwB,aAAa,GAAG,OAAOC,MAAM,KAAK,WAAW,GAAGb,SAAS,GAAGa,MAAM;MAClEC,YAAY,GAAG,OAAOC,QAAQ,KAAK,WAAW,GAAGf,SAAS,GAAGe,QAAQ;MACrEC,eAAe,GAAG,OAAOD,QAAQ,KAAK,WAAW,GAAGf,SAAS,GAAGe,QAAQ,CAACE,eAAe;MACxFC,mBAAmB,GAAG,OAAO;MAC7B7B,uBAAuB,GAAGC;IAC5B,CAAC,GAAAmB,IAAA;IACC,MAAMU,UAAU,GAAGlE,KAAK,CAACmE,MAAM,CAAC,KAAK,CAAC;IAEtC,MAAM;QACJ5B,YAAY,GAAG,CAAC,CAAC;QACjB6B,UAAU,GAAG,CAAC,CAAC;QACfC;MACF,CAAC,GAAGX,SAAS;MACPY,aAAa,GAAG1E,6BAA6B,CAAC8D,SAAS,EAAE3D,SAAS,CAAC;IAEzE,MAAMwE,eAAe,GAAGC,MAAM,CAACC,IAAI,CAAClC,YAAY,CAAC;IACjD,MAAMmC,uBAAuB,GAAG,OAAO5C,kBAAkB,KAAK,QAAQ,GAAGA,kBAAkB,GAAGA,kBAAkB,CAACU,KAAK;IACtH,MAAMmC,sBAAsB,GAAG,OAAO7C,kBAAkB,KAAK,QAAQ,GAAGA,kBAAkB,GAAGA,kBAAkB,CAACW,IAAI;IACpH,MAAM;MACJmC,IAAI;MACJC,OAAO;MACPC,UAAU;MACVC,gBAAgB;MAChBC,eAAe;MACfC,WAAW;MACXC;IACF,CAAC,GAAGtE,qBAAqB,CAAC;MACxBuE,qBAAqB,EAAEZ,eAAe;MACtCG,uBAAuB;MACvBC,sBAAsB;MACtBnD,cAAc;MACdE,qBAAqB;MACrBE,WAAW;MACX+B;IACF,CAAC,CAAC;IAEF,MAAMyB,mBAAmB,GAAG,CAAC,MAAM;MACjC,IAAI,CAACH,WAAW,EAAE;QAChB;QACA,IAAIrD,WAAW,KAAK,MAAM,EAAE;UAC1B,OAAO+C,sBAAsB;QAC/B,CAAC,CAAC;;QAGF,OAAOD,uBAAuB;MAChC;MAEA,OAAOO,WAAW;IACpB,CAAC,EAAE,CAAC;IAEJ,IAAI7D,KAAK,GAAGkD,aAAa;IACzB,MAAM;MACJe,GAAG,EAAEC,OAAO;MACZC,IAAI,EAAEC,QAAQ;MACdC;IACF,CAAC,GAAGnF,aAAa,CAACc,KAAK,EAAE;MACvBsE,MAAM,EAAErB,YAAY;MACpBjC;IACF,CAAC,CAAC;IACFhB,KAAK,GAAGzB,QAAQ,CAAC,CAAC,CAAC,EAAE8F,WAAW,EAAE;MAChCrB,UAAU;MACV7B,YAAY;MACZ8B,YAAY;MACZkB,IAAI,EAAEC,QAAQ;MACdG,sBAAsB,EAAEC,iBAAiB,QAAAhD,MAAA,CAAQtB,SAAS,SAAAsB,MAAA,CAAKgD,iBAAiB;IAClF,CAAC,CAAC;IACF,MAAMC,4BAA4B,GAAG,CAAC,CAAC;IACvC,MAAMC,2BAA2B,GAAG,CAAC,CAAC;IACtCtB,MAAM,CAACuB,OAAO,CAACxD,YAAY,CAAC,CAACyD,OAAO,CAACC,KAAA,IAAmB;MAAA,IAAlB,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAAF,KAAA;MACjD,MAAM;QACJZ,GAAG;QACHE,IAAI;QACJE,WAAW,EAAEW;MACf,CAAC,GAAG9F,aAAa,CAAC6F,MAAM,EAAE;QACxBT,MAAM,EAAErB,YAAY;QACpBjC;MACF,CAAC,CAAC;MACFhB,KAAK,CAACmE,IAAI,GAAGrF,SAAS,CAACkB,KAAK,CAACmE,IAAI,EAAEA,IAAI,CAAC;MAExC,IAAIW,GAAG,KAAKd,mBAAmB,EAAE;QAC/BhE,KAAK,GAAGzB,QAAQ,CAAC,CAAC,CAAC,EAAEyB,KAAK,EAAEgF,YAAY,CAAC;QAEzC,IAAIhF,KAAK,CAACiF,OAAO,EAAE;UACjB;UACAjF,KAAK,CAACiF,OAAO,CAACzB,IAAI,GAAGA,IAAI;UACzBxD,KAAK,CAACiF,OAAO,CAACpB,WAAW,GAAGG,mBAAmB;QACjD;MACF;MAEA,MAAMkB,0BAA0B,GAAG,CAAC,MAAM;QACxC,IAAI,OAAOxE,kBAAkB,KAAK,QAAQ,EAAE;UAC1C,OAAOA,kBAAkB;QAC3B;QAEA,IAAIF,WAAW,KAAK,MAAM,EAAE;UAC1B,OAAOE,kBAAkB,CAACW,IAAI;QAChC;QAEA,OAAOX,kBAAkB,CAACU,KAAK;MACjC,CAAC,EAAE,CAAC;MAEJ,IAAI0D,GAAG,KAAKI,0BAA0B,EAAE;QACtCT,4BAA4B,IAAAjD,MAAA,CAAIqB,mBAAmB,SAAArB,MAAA,CAAMtB,SAAS,SAAAsB,MAAA,CAAKsD,GAAG,SAAK,GAAGb,GAAG;MACvF,CAAC,MAAM;QACLS,2BAA2B,IAAAlD,MAAA,CAAIqB,mBAAmB,KAAK,OAAO,GAAG,EAAE,GAAGA,mBAAmB,OAAArB,MAAA,CAAItB,SAAS,SAAAsB,MAAA,CAAKsD,GAAG,SAAK,GAAGb,GAAG;MAC3H;IACF,CAAC,CAAC;IACFrF,KAAK,CAACuG,SAAS,CAAC,MAAM;MACpB,IAAItB,WAAW,IAAIlB,eAAe,EAAE;QAClC;QACAA,eAAe,CAACyC,YAAY,CAAClF,SAAS,EAAE2D,WAAW,CAAC;MACtD;IACF,CAAC,EAAE,CAACA,WAAW,EAAE3D,SAAS,EAAEyC,eAAe,CAAC,CAAC;IAC7C3D,iBAAiB,CAAC,MAAM;MACtB,IAAI,CAACwE,IAAI,IAAI,CAAC1C,iBAAiB,IAAI,CAAC6B,eAAe,EAAE;QACnD,OAAOhB,SAAS;MAClB;MAEA,MAAM0D,gBAAgB,GAAG1C,eAAe,CAAC2C,KAAK,CAACC,gBAAgB,CAAC,cAAc,CAAC,CAAC,CAAC;;MAEjF,IAAI/B,IAAI,KAAK,QAAQ,EAAE;QACrBb,eAAe,CAAC2C,KAAK,CAACE,WAAW,CAAC,cAAc,EAAE9B,UAAU,CAAC;MAC/D,CAAC,MAAM;QACLf,eAAe,CAAC2C,KAAK,CAACE,WAAW,CAAC,cAAc,EAAEhC,IAAI,CAAC;MACzD;MAEA,OAAO,MAAM;QACXb,eAAe,CAAC2C,KAAK,CAACE,WAAW,CAAC,cAAc,EAAEH,gBAAgB,CAAC;MACrE,CAAC;IACH,CAAC,EAAE,CAAC7B,IAAI,EAAEE,UAAU,EAAE5C,iBAAiB,EAAE6B,eAAe,CAAC,CAAC;IAC1D/D,KAAK,CAACuG,SAAS,CAAC,MAAM;MACpB,IAAIM,KAAK;MAET,IAAI7E,yBAAyB,IAAIkC,UAAU,CAAC4C,OAAO,IAAIjD,YAAY,EAAE;QACnE;QACA,MAAMwB,GAAG,GAAGxB,YAAY,CAACkD,aAAa,CAAC,OAAO,CAAC;QAC/C1B,GAAG,CAAC2B,WAAW,CAACnD,YAAY,CAACoD,cAAc,CAAChG,sBAAsB,CAAC,CAAC;QACpE4C,YAAY,CAACqD,IAAI,CAACF,WAAW,CAAC3B,GAAG,CAAC,CAAC,CAAC;;QAEpC,CAAC,MAAMzB,MAAM,CAACuD,gBAAgB,CAACtD,YAAY,CAACuD,IAAI,CAAC,EAAE,CAAC;QAEpDP,KAAK,GAAGQ,UAAU,CAAC,MAAM;UACvBxD,YAAY,CAACqD,IAAI,CAACI,WAAW,CAACjC,GAAG,CAAC;QACpC,CAAC,EAAE,CAAC,CAAC;MACP;MAEA,OAAO,MAAM;QACXkC,YAAY,CAACV,KAAK,CAAC;MACrB,CAAC;IACH,CAAC,EAAE,CAAC5B,WAAW,EAAEjD,yBAAyB,EAAE6B,YAAY,CAAC,CAAC;IAC1D7D,KAAK,CAACuG,SAAS,CAAC,MAAM;MACpBrC,UAAU,CAAC4C,OAAO,GAAG,IAAI;MACzB,OAAO,MAAM;QACX5C,UAAU,CAAC4C,OAAO,GAAG,KAAK;MAC5B,CAAC;IACH,CAAC,EAAE,EAAE,CAAC;IACN,OAAO,aAAa9F,KAAK,CAAC6B,kBAAkB,CAAC2E,QAAQ,EAAE;MACrDvE,KAAK,EAAE;QACL2B,IAAI;QACJC,OAAO;QACPE,gBAAgB;QAChBC,eAAe;QACfC,WAAW;QACXC,cAAc;QACdX;MACF,CAAC;MACDd,QAAQ,EAAE,CAAC,aAAa3C,IAAI,CAACT,YAAY,EAAE;QACzCoH,MAAM,EAAE;UACN,CAACxD,mBAAmB,GAAGqB;QACzB;MACF,CAAC,CAAC,EAAE,aAAaxE,IAAI,CAACT,YAAY,EAAE;QAClCoH,MAAM,EAAE5B;MACV,CAAC,CAAC,EAAE,aAAa/E,IAAI,CAACT,YAAY,EAAE;QAClCoH,MAAM,EAAE3B;MACV,CAAC,CAAC,EAAE,aAAahF,IAAI,CAACP,aAAa,EAAE;QACnCa,KAAK,EAAEkB,YAAY,GAAGA,YAAY,CAAClB,KAAK,CAAC,GAAGA,KAAK;QACjDqC,QAAQ,EAAEA;MACZ,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEAL,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGC,eAAe,CAACmE,SAAS,GAAG;IAClE;AACJ;AACA;IACIpG,SAAS,EAAErB,SAAS,CAAC0H,MAAM;IAE3B;AACJ;AACA;IACIlE,QAAQ,EAAExD,SAAS,CAAC2H,IAAI;IAExB;AACJ;AACA;IACI7D,eAAe,EAAE9D,SAAS,CAAC4H,GAAG;IAE9B;AACJ;AACA;IACI5D,mBAAmB,EAAEhE,SAAS,CAAC0H,MAAM;IAErC;AACJ;AACA;IACIjG,qBAAqB,EAAEzB,SAAS,CAAC0H,MAAM;IAEvC;AACJ;AACA;IACI7F,kBAAkB,EAAE7B,SAAS,CAAC6H,SAAS,CAAC,CAAC7H,SAAS,CAAC0H,MAAM,EAAE1H,SAAS,CAAC8H,MAAM,CAAC,CAAC;IAE7E;AACJ;AACA;IACInG,WAAW,EAAE3B,SAAS,CAAC0H,MAAM;IAE7B;AACJ;AACA;IACI3F,yBAAyB,EAAE/B,SAAS,CAAC+H,IAAI;IAEzC;AACJ;AACA;IACInE,YAAY,EAAE5D,SAAS,CAAC4H,GAAG;IAE3B;AACJ;AACA;IACI3F,iBAAiB,EAAEjC,SAAS,CAAC+H,IAAI;IAEjC;AACJ;AACA;IACIxG,cAAc,EAAEvB,SAAS,CAAC0H,MAAM;IAEhC;AACJ;AACA;IACIvF,uBAAuB,EAAEnC,SAAS,CAACgI,IAAI;IAEvC;AACJ;AACA;AACA;IACItE,aAAa,EAAE1D,SAAS,CAAC4H,GAAG;IAE5B;AACJ;AACA;IACIzG,KAAK,EAAEnB,SAAS,CAAC8H;EACnB,CAAC,GAAG,KAAK,CAAC;EAEV,MAAMG,wBAAwB,GAAGC,MAAM,IAAI3H,8BAA8B,CAACb,QAAQ,CAAC;IACjF2B,SAAS,EAAEC,gBAAgB;IAC3BG,qBAAqB,EAAEC,4BAA4B;IACnDH,cAAc,EAAEC,qBAAqB;IACrCS,iBAAiB,EAAEC;EACrB,CAAC,EAAEgG,MAAM,CAAC,CAAC;EAEX,OAAO;IACL5E,eAAe;IACfP,cAAc;IACdkF;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}