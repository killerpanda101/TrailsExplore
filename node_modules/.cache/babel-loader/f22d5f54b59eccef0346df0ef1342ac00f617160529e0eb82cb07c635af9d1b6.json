{"ast":null,"code":"import { isValidElement as t, useMemo as n, createElement as i } from \"react\";\nimport o from \"lodash/filter\";\nimport e from \"lodash/isNumber\";\nimport a from \"lodash/omit\";\nimport { absoluteAngleDegrees as r, radiansToDegrees as s, positionFromAngle as l, degreesToRadians as u, useTheme as h, useMotionConfig as d, useAnimatedPath as c } from \"@nivo/core\";\nimport { useSpring as f, animated as y } from \"@react-spring/web\";\nimport { jsxs as x, Fragment as m, jsx as p } from \"react/jsx-runtime\";\nfunction g() {\n  return g = Object.assign ? Object.assign.bind() : function (t) {\n    for (var n = 1; n < arguments.length; n++) {\n      var i = arguments[n];\n      for (var o in i) Object.prototype.hasOwnProperty.call(i, o) && (t[o] = i[o]);\n    }\n    return t;\n  }, g.apply(this, arguments);\n}\nvar k = {\n    dotSize: 4,\n    noteWidth: 120,\n    noteTextOffset: 8,\n    animate: !0\n  },\n  W = function (n) {\n    var i = typeof n;\n    return t(n) || \"string\" === i || \"function\" === i || \"object\" === i;\n  },\n  v = function (t) {\n    var n = typeof t;\n    return \"string\" === n || \"function\" === n;\n  },\n  b = function (t) {\n    return \"circle\" === t.type;\n  },\n  w = function (t) {\n    return \"dot\" === t.type;\n  },\n  z = function (t) {\n    return \"rect\" === t.type;\n  },\n  P = function (t) {\n    var n = t.data,\n      i = t.annotations,\n      e = t.getPosition,\n      r = t.getDimensions;\n    return i.reduce(function (t, i) {\n      var s = i.offset || 0;\n      return [].concat(t, o(n, i.match).map(function (t) {\n        var n = e(t),\n          o = r(t);\n        return (b(i) || z(i)) && (o.size = o.size + 2 * s, o.width = o.width + 2 * s, o.height = o.height + 2 * s), g({}, a(i, [\"match\", \"offset\"]), n, o, {\n          size: i.size || o.size,\n          datum: t\n        });\n      }));\n    }, []);\n  },\n  C = function (t, n, i, o) {\n    var e = Math.atan2(o - n, i - t);\n    return r(s(e));\n  },\n  O = function (t) {\n    var n,\n      i,\n      o = t.x,\n      a = t.y,\n      r = t.noteX,\n      s = t.noteY,\n      h = t.noteWidth,\n      d = void 0 === h ? k.noteWidth : h,\n      c = t.noteTextOffset,\n      f = void 0 === c ? k.noteTextOffset : c;\n    if (e(r)) n = o + r;else {\n      if (void 0 === r.abs) throw new Error(\"noteX should be either a number or an object containing an 'abs' property\");\n      n = r.abs;\n    }\n    if (e(s)) i = a + s;else {\n      if (void 0 === s.abs) throw new Error(\"noteY should be either a number or an object containing an 'abs' property\");\n      i = s.abs;\n    }\n    var y = o,\n      x = a,\n      m = C(o, a, n, i);\n    if (b(t)) {\n      var p = l(u(m), t.size / 2);\n      y += p.x, x += p.y;\n    }\n    if (z(t)) {\n      var g = Math.round((m + 90) / 45) % 8;\n      0 === g && (x -= t.height / 2), 1 === g && (y += t.width / 2, x -= t.height / 2), 2 === g && (y += t.width / 2), 3 === g && (y += t.width / 2, x += t.height / 2), 4 === g && (x += t.height / 2), 5 === g && (y -= t.width / 2, x += t.height / 2), 6 === g && (y -= t.width / 2), 7 === g && (y -= t.width / 2, x -= t.height / 2);\n    }\n    var W = n,\n      v = n;\n    return (m + 90) % 360 > 180 ? (W -= d, v -= d) : v += d, {\n      points: [[y, x], [n, i], [v, i]],\n      text: [W, i - f],\n      angle: m + 90\n    };\n  },\n  S = function (t) {\n    var i = t.data,\n      o = t.annotations,\n      e = t.getPosition,\n      a = t.getDimensions;\n    return n(function () {\n      return P({\n        data: i,\n        annotations: o,\n        getPosition: e,\n        getDimensions: a\n      });\n    }, [i, o, e, a]);\n  },\n  j = function (t) {\n    var i = t.annotations;\n    return n(function () {\n      return i.map(function (t) {\n        return g({}, t, {\n          computed: O(g({}, t))\n        });\n      });\n    }, [i]);\n  },\n  M = function (t) {\n    return n(function () {\n      return O(t);\n    }, [t]);\n  },\n  T = function (t) {\n    var n = t.datum,\n      o = t.x,\n      e = t.y,\n      r = t.note,\n      s = h(),\n      l = d(),\n      u = l.animate,\n      c = l.config,\n      k = f({\n        x: o,\n        y: e,\n        config: c,\n        immediate: !u\n      });\n    return \"function\" == typeof r ? i(r, {\n      x: o,\n      y: e,\n      datum: n\n    }) : x(m, {\n      children: [s.annotations.text.outlineWidth > 0 && p(y.text, {\n        x: k.x,\n        y: k.y,\n        style: g({}, s.annotations.text, {\n          strokeLinejoin: \"round\",\n          strokeWidth: 2 * s.annotations.text.outlineWidth,\n          stroke: s.annotations.text.outlineColor\n        }),\n        children: r\n      }), p(y.text, {\n        x: k.x,\n        y: k.y,\n        style: a(s.annotations.text, [\"outlineWidth\", \"outlineColor\"]),\n        children: r\n      })]\n    });\n  },\n  E = function (t) {\n    var i = t.points,\n      o = t.isOutline,\n      e = void 0 !== o && o,\n      a = h(),\n      r = n(function () {\n        var t = i[0];\n        return i.slice(1).reduce(function (t, n) {\n          return t + \" L\" + n[0] + \",\" + n[1];\n        }, \"M\" + t[0] + \",\" + t[1]);\n      }, [i]),\n      s = c(r);\n    if (e && a.annotations.link.outlineWidth <= 0) return null;\n    var l = g({}, a.annotations.link);\n    return e && (l.strokeLinecap = \"square\", l.strokeWidth = a.annotations.link.strokeWidth + 2 * a.annotations.link.outlineWidth, l.stroke = a.annotations.link.outlineColor, l.opacity = a.annotations.link.outlineOpacity), p(y.path, {\n      fill: \"none\",\n      d: s,\n      style: l\n    });\n  },\n  I = function (t) {\n    var n = t.x,\n      i = t.y,\n      o = t.size,\n      e = h(),\n      a = d(),\n      r = a.animate,\n      s = a.config,\n      l = f({\n        x: n,\n        y: i,\n        radius: o / 2,\n        config: s,\n        immediate: !r\n      });\n    return x(m, {\n      children: [e.annotations.outline.outlineWidth > 0 && p(y.circle, {\n        cx: l.x,\n        cy: l.y,\n        r: l.radius,\n        style: g({}, e.annotations.outline, {\n          fill: \"none\",\n          strokeWidth: e.annotations.outline.strokeWidth + 2 * e.annotations.outline.outlineWidth,\n          stroke: e.annotations.outline.outlineColor,\n          opacity: e.annotations.outline.outlineOpacity\n        })\n      }), p(y.circle, {\n        cx: l.x,\n        cy: l.y,\n        r: l.radius,\n        style: e.annotations.outline\n      })]\n    });\n  },\n  D = function (t) {\n    var n = t.x,\n      i = t.y,\n      o = t.size,\n      e = void 0 === o ? k.dotSize : o,\n      a = h(),\n      r = d(),\n      s = r.animate,\n      l = r.config,\n      u = f({\n        x: n,\n        y: i,\n        radius: e / 2,\n        config: l,\n        immediate: !s\n      });\n    return x(m, {\n      children: [a.annotations.outline.outlineWidth > 0 && p(y.circle, {\n        cx: u.x,\n        cy: u.y,\n        r: u.radius,\n        style: g({}, a.annotations.outline, {\n          fill: \"none\",\n          strokeWidth: 2 * a.annotations.outline.outlineWidth,\n          stroke: a.annotations.outline.outlineColor,\n          opacity: a.annotations.outline.outlineOpacity\n        })\n      }), p(y.circle, {\n        cx: u.x,\n        cy: u.y,\n        r: u.radius,\n        style: a.annotations.symbol\n      })]\n    });\n  },\n  L = function (t) {\n    var n = t.x,\n      i = t.y,\n      o = t.width,\n      e = t.height,\n      a = t.borderRadius,\n      r = void 0 === a ? 6 : a,\n      s = h(),\n      l = d(),\n      u = l.animate,\n      c = l.config,\n      k = f({\n        x: n - o / 2,\n        y: i - e / 2,\n        width: o,\n        height: e,\n        config: c,\n        immediate: !u\n      });\n    return x(m, {\n      children: [s.annotations.outline.outlineWidth > 0 && p(y.rect, {\n        x: k.x,\n        y: k.y,\n        rx: r,\n        ry: r,\n        width: k.width,\n        height: k.height,\n        style: g({}, s.annotations.outline, {\n          fill: \"none\",\n          strokeWidth: s.annotations.outline.strokeWidth + 2 * s.annotations.outline.outlineWidth,\n          stroke: s.annotations.outline.outlineColor,\n          opacity: s.annotations.outline.outlineOpacity\n        })\n      }), p(y.rect, {\n        x: k.x,\n        y: k.y,\n        rx: r,\n        ry: r,\n        width: k.width,\n        height: k.height,\n        style: s.annotations.outline\n      })]\n    });\n  },\n  R = function (t) {\n    var n = t.datum,\n      i = t.x,\n      o = t.y,\n      e = t.note,\n      a = M(t);\n    if (!W(e)) throw new Error(\"note should be a valid react element\");\n    return x(m, {\n      children: [p(E, {\n        points: a.points,\n        isOutline: !0\n      }), b(t) && p(I, {\n        x: i,\n        y: o,\n        size: t.size\n      }), w(t) && p(D, {\n        x: i,\n        y: o,\n        size: t.size\n      }), z(t) && p(L, {\n        x: i,\n        y: o,\n        width: t.width,\n        height: t.height,\n        borderRadius: t.borderRadius\n      }), p(E, {\n        points: a.points\n      }), p(T, {\n        datum: n,\n        x: a.text[0],\n        y: a.text[1],\n        note: e\n      })]\n    });\n  },\n  q = function (t, n) {\n    n.forEach(function (n, i) {\n      var o = n[0],\n        e = n[1];\n      0 === i ? t.moveTo(o, e) : t.lineTo(o, e);\n    });\n  },\n  J = function (t, n) {\n    var i = n.annotations,\n      o = n.theme;\n    0 !== i.length && (t.save(), i.forEach(function (n) {\n      if (!v(n.note)) throw new Error(\"note is invalid for canvas implementation\");\n      o.annotations.link.outlineWidth > 0 && (t.lineCap = \"square\", t.strokeStyle = o.annotations.link.outlineColor, t.lineWidth = o.annotations.link.strokeWidth + 2 * o.annotations.link.outlineWidth, t.beginPath(), q(t, n.computed.points), t.stroke(), t.lineCap = \"butt\"), b(n) && o.annotations.outline.outlineWidth > 0 && (t.strokeStyle = o.annotations.outline.outlineColor, t.lineWidth = o.annotations.outline.strokeWidth + 2 * o.annotations.outline.outlineWidth, t.beginPath(), t.arc(n.x, n.y, n.size / 2, 0, 2 * Math.PI), t.stroke()), w(n) && o.annotations.symbol.outlineWidth > 0 && (t.strokeStyle = o.annotations.symbol.outlineColor, t.lineWidth = 2 * o.annotations.symbol.outlineWidth, t.beginPath(), t.arc(n.x, n.y, n.size / 2, 0, 2 * Math.PI), t.stroke()), z(n) && o.annotations.outline.outlineWidth > 0 && (t.strokeStyle = o.annotations.outline.outlineColor, t.lineWidth = o.annotations.outline.strokeWidth + 2 * o.annotations.outline.outlineWidth, t.beginPath(), t.rect(n.x - n.width / 2, n.y - n.height / 2, n.width, n.height), t.stroke()), t.strokeStyle = o.annotations.link.stroke, t.lineWidth = o.annotations.link.strokeWidth, t.beginPath(), q(t, n.computed.points), t.stroke(), b(n) && (t.strokeStyle = o.annotations.outline.stroke, t.lineWidth = o.annotations.outline.strokeWidth, t.beginPath(), t.arc(n.x, n.y, n.size / 2, 0, 2 * Math.PI), t.stroke()), w(n) && (t.fillStyle = o.annotations.symbol.fill, t.beginPath(), t.arc(n.x, n.y, n.size / 2, 0, 2 * Math.PI), t.fill()), z(n) && (t.strokeStyle = o.annotations.outline.stroke, t.lineWidth = o.annotations.outline.strokeWidth, t.beginPath(), t.rect(n.x - n.width / 2, n.y - n.height / 2, n.width, n.height), t.stroke()), \"function\" == typeof n.note ? n.note(t, {\n        datum: n.datum,\n        x: n.computed.text[0],\n        y: n.computed.text[1],\n        theme: o\n      }) : (t.font = o.annotations.text.fontSize + \"px \" + o.annotations.text.fontFamily, t.textAlign = \"left\", t.textBaseline = \"alphabetic\", t.fillStyle = o.annotations.text.fill, t.strokeStyle = o.annotations.text.outlineColor, t.lineWidth = 2 * o.annotations.text.outlineWidth, o.annotations.text.outlineWidth > 0 && (t.lineJoin = \"round\", t.strokeText(n.note, n.computed.text[0], n.computed.text[1]), t.lineJoin = \"miter\"), t.fillText(n.note, n.computed.text[0], n.computed.text[1]));\n    }), t.restore());\n  };\nexport { R as Annotation, P as bindAnnotations, O as computeAnnotation, k as defaultProps, C as getLinkAngle, v as isCanvasNote, b as isCircleAnnotation, w as isDotAnnotation, z as isRectAnnotation, W as isSvgNote, J as renderAnnotationsToCanvas, S as useAnnotations, M as useComputedAnnotation, j as useComputedAnnotations };","map":{"version":3,"mappings":"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","names":["defaultProps","dotSize","noteWidth","noteTextOffset","animate","isSvgNote","note","noteType","isValidElement","isCanvasNote","isCircleAnnotation","annotationSpec","type","isDotAnnotation","isRectAnnotation","bindAnnotations","_ref","data","annotations","getPosition","getDimensions","reduce","acc","annotation","offset","filter","match","map","position","datum","dimensions","size","width","height","_extends","omit","getLinkAngle","sourceX","sourceY","targetX","targetY","angle","Math","atan2","absoluteAngleDegrees","radiansToDegrees","computeAnnotation","computedNoteX","computedNoteY","x","y","noteX","noteY","_annotation$noteWidth","_annotation$noteTextO","isNumber","undefined","abs","Error","computedX","computedY","positionFromAngle","degreesToRadians","eighth","round","textX","noteLineX","points","text","useAnnotations","useMemo","useComputedAnnotations","_ref2","computed","useComputedAnnotation","AnnotationNote","theme","useTheme","_useMotionConfig","useMotionConfig","springConfig","config","animatedProps","useSpring","immediate","createElement","_jsxs","children","outlineWidth","_jsx","animated","style","strokeLinejoin","strokeWidth","stroke","outlineColor","AnnotationLink","_ref$isOutline","isOutline","path","firstPoint","slice","animatedPath","useAnimatedPath","link","strokeLinecap","opacity","outlineOpacity","fill","d","CircleAnnotationOutline","radius","outline","circle","cx","cy","r","DotAnnotationOutline","_ref$size","symbol","RectAnnotationOutline","_ref$borderRadius","borderRadius","rect","rx","ry","Annotation","drawPoints","ctx","forEach","index","moveTo","lineTo","renderAnnotationsToCanvas","length","save","lineCap","strokeStyle","lineWidth","beginPath","arc","PI","fillStyle","font","fontSize","fontFamily","textAlign","textBaseline","lineJoin","strokeText","fillText","restore"],"sources":["/Users/parijatchatterjee/Desktop/react-admin-dashboard/node_modules/@nivo/annotations/src/props.ts","/Users/parijatchatterjee/Desktop/react-admin-dashboard/node_modules/@nivo/annotations/src/utils.ts","/Users/parijatchatterjee/Desktop/react-admin-dashboard/node_modules/@nivo/annotations/src/compute.ts","/Users/parijatchatterjee/Desktop/react-admin-dashboard/node_modules/@nivo/annotations/src/hooks.ts","/Users/parijatchatterjee/Desktop/react-admin-dashboard/node_modules/@nivo/annotations/src/AnnotationNote.tsx","/Users/parijatchatterjee/Desktop/react-admin-dashboard/node_modules/@nivo/annotations/src/AnnotationLink.tsx","/Users/parijatchatterjee/Desktop/react-admin-dashboard/node_modules/@nivo/annotations/src/CircleAnnotationOutline.tsx","/Users/parijatchatterjee/Desktop/react-admin-dashboard/node_modules/@nivo/annotations/src/DotAnnotationOutline.tsx","/Users/parijatchatterjee/Desktop/react-admin-dashboard/node_modules/@nivo/annotations/src/RectAnnotationOutline.tsx","/Users/parijatchatterjee/Desktop/react-admin-dashboard/node_modules/@nivo/annotations/src/Annotation.tsx","/Users/parijatchatterjee/Desktop/react-admin-dashboard/node_modules/@nivo/annotations/src/canvas.ts"],"sourcesContent":["export const defaultProps = {\n    dotSize: 4,\n    noteWidth: 120,\n    noteTextOffset: 8,\n    animate: true,\n}\n","import {\n    AnnotationSpec,\n    CircleAnnotationSpec,\n    DotAnnotationSpec,\n    Note,\n    NoteCanvas,\n    NoteSvg,\n    RectAnnotationSpec,\n} from './types'\nimport { isValidElement } from 'react'\n\nexport const isSvgNote = <Datum>(note: Note<Datum>): note is NoteSvg<Datum> => {\n    const noteType = typeof note\n\n    return (\n        isValidElement(note) ||\n        noteType === 'string' ||\n        noteType === 'function' ||\n        noteType === 'object'\n    )\n}\n\nexport const isCanvasNote = <Datum>(note: Note<Datum>): note is NoteCanvas<Datum> => {\n    const noteType = typeof note\n\n    return noteType === 'string' || noteType === 'function'\n}\n\nexport const isCircleAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is CircleAnnotationSpec<Datum> => annotationSpec.type === 'circle'\n\nexport const isDotAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is DotAnnotationSpec<Datum> => annotationSpec.type === 'dot'\n\nexport const isRectAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is RectAnnotationSpec<Datum> => annotationSpec.type === 'rect'\n","import filter from 'lodash/filter'\nimport isNumber from 'lodash/isNumber'\nimport omit from 'lodash/omit'\nimport {\n    radiansToDegrees,\n    absoluteAngleDegrees,\n    degreesToRadians,\n    positionFromAngle,\n} from '@nivo/core'\nimport { defaultProps } from './props'\nimport {\n    AnnotationPositionGetter,\n    AnnotationDimensionsGetter,\n    BoundAnnotation,\n    AnnotationMatcher,\n    AnnotationInstructions,\n} from './types'\nimport { isCircleAnnotation, isRectAnnotation } from './utils'\n\nexport const bindAnnotations = <\n    Datum = {\n        x: number\n        y: number\n    }\n>({\n    data,\n    annotations,\n    getPosition,\n    getDimensions,\n}: {\n    data: readonly Datum[]\n    annotations: readonly AnnotationMatcher<Datum>[]\n    getPosition: AnnotationPositionGetter<Datum>\n    getDimensions: AnnotationDimensionsGetter<Datum>\n}): BoundAnnotation<Datum>[] =>\n    annotations.reduce((acc: BoundAnnotation<Datum>[], annotation) => {\n        const offset = annotation.offset || 0\n\n        return [\n            ...acc,\n            ...filter<Datum>(data, annotation.match).map(datum => {\n                const position = getPosition(datum)\n                const dimensions = getDimensions(datum)\n\n                if (isCircleAnnotation(annotation) || isRectAnnotation(annotation)) {\n                    dimensions.size = dimensions.size + offset * 2\n                    dimensions.width = dimensions.width + offset * 2\n                    dimensions.height = dimensions.height + offset * 2\n                }\n\n                // acc.push({\n                //     ...omit(annotation, ['match', 'offset']),\n                //     ...position,\n                //     ...dimensions,\n                //     size: annotation.size || dimensions.size,\n                //     datum,\n                // } as any)\n                // return [\n                //     ...acc,\n                //     {\n                //         ...omit(annotation, ['match', 'offset']),\n                //         ...position,\n                //         ...dimensions,\n                //         size: annotation.size || dimensions.size,\n                //         datum,\n                //     },\n                // ]\n                return {\n                    ...omit(annotation, ['match', 'offset']),\n                    ...position,\n                    ...dimensions,\n                    size: annotation.size || dimensions.size,\n                    datum,\n                } as Required<BoundAnnotation<Datum>>\n            }),\n        ]\n\n        // return acc\n    }, [])\n\nexport const getLinkAngle = (\n    sourceX: number,\n    sourceY: number,\n    targetX: number,\n    targetY: number\n) => {\n    const angle = Math.atan2(targetY - sourceY, targetX - sourceX)\n\n    return absoluteAngleDegrees(radiansToDegrees(angle))\n}\n\nexport const computeAnnotation = <Datum>(\n    annotation: BoundAnnotation<Datum>\n): AnnotationInstructions => {\n    const {\n        x,\n        y,\n        noteX,\n        noteY,\n        noteWidth = defaultProps.noteWidth,\n        noteTextOffset = defaultProps.noteTextOffset,\n    } = annotation\n\n    let computedNoteX: number\n    let computedNoteY: number\n\n    if (isNumber(noteX)) {\n        computedNoteX = x + noteX\n    } else if (noteX.abs !== undefined) {\n        computedNoteX = noteX.abs\n    } else {\n        throw new Error(`noteX should be either a number or an object containing an 'abs' property`)\n    }\n\n    if (isNumber(noteY)) {\n        computedNoteY = y + noteY\n    } else if (noteY.abs !== undefined) {\n        computedNoteY = noteY.abs\n    } else {\n        throw new Error(`noteY should be either a number or an object containing an 'abs' property`)\n    }\n\n    let computedX = x\n    let computedY = y\n\n    const angle = getLinkAngle(x, y, computedNoteX, computedNoteY)\n\n    if (isCircleAnnotation<Datum>(annotation)) {\n        const position = positionFromAngle(degreesToRadians(angle), annotation.size / 2)\n        computedX += position.x\n        computedY += position.y\n    }\n\n    if (isRectAnnotation<Datum>(annotation)) {\n        const eighth = Math.round((angle + 90) / 45) % 8\n        if (eighth === 0) {\n            computedY -= annotation.height / 2\n        }\n        if (eighth === 1) {\n            computedX += annotation.width / 2\n            computedY -= annotation.height / 2\n        }\n        if (eighth === 2) {\n            computedX += annotation.width / 2\n        }\n        if (eighth === 3) {\n            computedX += annotation.width / 2\n            computedY += annotation.height / 2\n        }\n        if (eighth === 4) {\n            computedY += annotation.height / 2\n        }\n        if (eighth === 5) {\n            computedX -= annotation.width / 2\n            computedY += annotation.height / 2\n        }\n        if (eighth === 6) {\n            computedX -= annotation.width / 2\n        }\n        if (eighth === 7) {\n            computedX -= annotation.width / 2\n            computedY -= annotation.height / 2\n        }\n    }\n\n    let textX = computedNoteX\n    const textY = computedNoteY - noteTextOffset\n\n    let noteLineX = computedNoteX\n    const noteLineY = computedNoteY\n\n    if ((angle + 90) % 360 > 180) {\n        textX -= noteWidth\n        noteLineX -= noteWidth\n    } else {\n        noteLineX += noteWidth\n    }\n\n    return {\n        points: [\n            [computedX, computedY],\n            [computedNoteX, computedNoteY],\n            [noteLineX, noteLineY],\n        ] as [number, number][],\n        text: [textX, textY],\n        angle: angle + 90,\n    }\n}\n","import { useMemo } from 'react'\nimport { bindAnnotations, computeAnnotation } from './compute'\nimport {\n    AnnotationDimensionsGetter,\n    AnnotationMatcher,\n    AnnotationPositionGetter,\n    BoundAnnotation,\n} from './types'\n\n/**\n * Bind annotations to a dataset.\n */\nexport const useAnnotations = <Datum>({\n    data,\n    annotations,\n    getPosition,\n    getDimensions,\n}: {\n    data: readonly Datum[]\n    annotations: readonly AnnotationMatcher<Datum>[]\n    getPosition: AnnotationPositionGetter<Datum>\n    getDimensions: AnnotationDimensionsGetter<Datum>\n}) =>\n    useMemo(\n        () =>\n            bindAnnotations<Datum>({\n                data,\n                annotations,\n                getPosition,\n                getDimensions,\n            }),\n        [data, annotations, getPosition, getDimensions]\n    )\n\nexport const useComputedAnnotations = <Datum>({\n    annotations,\n}: {\n    annotations: readonly BoundAnnotation<Datum>[]\n}) =>\n    useMemo(\n        () =>\n            annotations.map(annotation => ({\n                ...annotation,\n                computed: computeAnnotation<Datum>({\n                    ...annotation,\n                }),\n            })),\n        [annotations]\n    )\n\nexport const useComputedAnnotation = <Datum>(annotation: BoundAnnotation<Datum>) =>\n    useMemo(() => computeAnnotation<Datum>(annotation), [annotation])\n","import { createElement } from 'react'\nimport omit from 'lodash/omit'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { NoteSvg } from './types'\n\nexport const AnnotationNote = <Datum,>({\n    datum,\n    x,\n    y,\n    note,\n}: {\n    datum: Datum\n    x: number\n    y: number\n    note: NoteSvg<Datum>\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    if (typeof note === 'function') {\n        return createElement(note, { x, y, datum })\n    }\n\n    return (\n        <>\n            {theme.annotations.text.outlineWidth > 0 && (\n                <animated.text\n                    x={animatedProps.x}\n                    y={animatedProps.y}\n                    style={{\n                        ...theme.annotations.text,\n                        strokeLinejoin: 'round',\n                        strokeWidth: theme.annotations.text.outlineWidth * 2,\n                        stroke: theme.annotations.text.outlineColor,\n                    }}\n                >\n                    {note}\n                </animated.text>\n            )}\n            <animated.text\n                x={animatedProps.x}\n                y={animatedProps.y}\n                style={omit(theme.annotations.text, ['outlineWidth', 'outlineColor'])}\n            >\n                {note}\n            </animated.text>\n        </>\n    )\n}\n","import { useMemo } from 'react'\nimport { animated } from '@react-spring/web'\nimport { useAnimatedPath, useTheme } from '@nivo/core'\n\nexport const AnnotationLink = ({\n    points,\n    isOutline = false,\n}: {\n    points: [number, number][]\n    isOutline?: boolean\n}) => {\n    const theme = useTheme()\n\n    const path = useMemo(() => {\n        const [firstPoint, ...otherPoints] = points\n\n        return otherPoints.reduce(\n            (acc, [x, y]) => `${acc} L${x},${y}`,\n            `M${firstPoint[0]},${firstPoint[1]}`\n        )\n    }, [points])\n\n    const animatedPath = useAnimatedPath(path)\n\n    if (isOutline && theme.annotations.link.outlineWidth <= 0) {\n        return null\n    }\n\n    const style = { ...theme.annotations.link }\n    if (isOutline) {\n        style.strokeLinecap = 'square'\n        style.strokeWidth =\n            theme.annotations.link.strokeWidth + theme.annotations.link.outlineWidth * 2\n        style.stroke = theme.annotations.link.outlineColor\n        style.opacity = theme.annotations.link.outlineOpacity\n    }\n\n    return <animated.path fill=\"none\" d={animatedPath} style={style} />\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\n\nexport const CircleAnnotationOutline = ({ x, y, size }: { x: number; y: number; size: number }) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size / 2,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.circle\n                    cx={animatedProps.x}\n                    cy={animatedProps.y}\n                    r={animatedProps.radius}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth:\n                            theme.annotations.outline.strokeWidth +\n                            theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                        opacity: theme.annotations.outline.outlineOpacity,\n                    }}\n                />\n            )}\n            <animated.circle\n                cx={animatedProps.x}\n                cy={animatedProps.y}\n                r={animatedProps.radius}\n                style={theme.annotations.outline}\n            />\n        </>\n    )\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { defaultProps } from './props'\n\nexport const DotAnnotationOutline = ({\n    x,\n    y,\n    size = defaultProps.dotSize,\n}: {\n    x: number\n    y: number\n    size?: number\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size / 2,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.circle\n                    cx={animatedProps.x}\n                    cy={animatedProps.y}\n                    r={animatedProps.radius}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth: theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                        opacity: theme.annotations.outline.outlineOpacity,\n                    }}\n                />\n            )}\n            <animated.circle\n                cx={animatedProps.x}\n                cy={animatedProps.y}\n                r={animatedProps.radius}\n                style={theme.annotations.symbol}\n            />\n        </>\n    )\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\n\nexport const RectAnnotationOutline = ({\n    x,\n    y,\n    width,\n    height,\n    borderRadius = 6,\n}: {\n    x: number\n    y: number\n    width: number\n    height: number\n    borderRadius?: number\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x: x - width / 2,\n        y: y - height / 2,\n        width,\n        height,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.rect\n                    x={animatedProps.x}\n                    y={animatedProps.y}\n                    rx={borderRadius}\n                    ry={borderRadius}\n                    width={animatedProps.width}\n                    height={animatedProps.height}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth:\n                            theme.annotations.outline.strokeWidth +\n                            theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                        opacity: theme.annotations.outline.outlineOpacity,\n                    }}\n                />\n            )}\n            <animated.rect\n                x={animatedProps.x}\n                y={animatedProps.y}\n                rx={borderRadius}\n                ry={borderRadius}\n                width={animatedProps.width}\n                height={animatedProps.height}\n                style={theme.annotations.outline}\n            />\n        </>\n    )\n}\n","import { useComputedAnnotation } from './hooks'\nimport { AnnotationNote } from './AnnotationNote'\nimport { AnnotationLink } from './AnnotationLink'\nimport { CircleAnnotationOutline } from './CircleAnnotationOutline'\nimport { DotAnnotationOutline } from './DotAnnotationOutline'\nimport { RectAnnotationOutline } from './RectAnnotationOutline'\nimport { BoundAnnotation } from './types'\nimport { isCircleAnnotation, isDotAnnotation, isRectAnnotation, isSvgNote } from './utils'\n\nexport const Annotation = <Datum,>(annotation: BoundAnnotation<Datum>) => {\n    const { datum, x, y, note } = annotation\n    const computed = useComputedAnnotation(annotation)\n\n    if (!isSvgNote(note)) {\n        throw new Error('note should be a valid react element')\n    }\n\n    return (\n        <>\n            <AnnotationLink points={computed.points} isOutline={true} />\n            {isCircleAnnotation(annotation) && (\n                <CircleAnnotationOutline x={x} y={y} size={annotation.size} />\n            )}\n            {isDotAnnotation(annotation) && (\n                <DotAnnotationOutline x={x} y={y} size={annotation.size} />\n            )}\n            {isRectAnnotation(annotation) && (\n                <RectAnnotationOutline\n                    x={x}\n                    y={y}\n                    width={annotation.width}\n                    height={annotation.height}\n                    borderRadius={annotation.borderRadius}\n                />\n            )}\n            <AnnotationLink points={computed.points} />\n            <AnnotationNote datum={datum} x={computed.text[0]} y={computed.text[1]} note={note} />\n        </>\n    )\n}\n","import { CompleteTheme } from '@nivo/core'\nimport { ComputedAnnotation } from './types'\nimport { isCanvasNote, isCircleAnnotation, isDotAnnotation, isRectAnnotation } from './utils'\n\nconst drawPoints = (ctx: CanvasRenderingContext2D, points: [number, number][]) => {\n    points.forEach(([x, y], index) => {\n        if (index === 0) {\n            ctx.moveTo(x, y)\n        } else {\n            ctx.lineTo(x, y)\n        }\n    })\n}\n\nexport const renderAnnotationsToCanvas = <Datum>(\n    ctx: CanvasRenderingContext2D,\n    {\n        annotations,\n        theme,\n    }: {\n        annotations: ComputedAnnotation<Datum>[]\n        theme: CompleteTheme\n    }\n) => {\n    if (annotations.length === 0) return\n\n    ctx.save()\n    annotations.forEach(annotation => {\n        if (!isCanvasNote(annotation.note)) {\n            throw new Error('note is invalid for canvas implementation')\n        }\n\n        if (theme.annotations.link.outlineWidth > 0) {\n            ctx.lineCap = 'square'\n            ctx.strokeStyle = theme.annotations.link.outlineColor\n            ctx.lineWidth =\n                theme.annotations.link.strokeWidth + theme.annotations.link.outlineWidth * 2\n            ctx.beginPath()\n            drawPoints(ctx, annotation.computed.points)\n            ctx.stroke()\n            ctx.lineCap = 'butt'\n        }\n\n        if (isCircleAnnotation(annotation) && theme.annotations.outline.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.outline.outlineColor\n            ctx.lineWidth =\n                theme.annotations.outline.strokeWidth + theme.annotations.outline.outlineWidth * 2\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isDotAnnotation(annotation) && theme.annotations.symbol.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.symbol.outlineColor\n            ctx.lineWidth = theme.annotations.symbol.outlineWidth * 2\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isRectAnnotation(annotation) && theme.annotations.outline.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.outline.outlineColor\n            ctx.lineWidth =\n                theme.annotations.outline.strokeWidth + theme.annotations.outline.outlineWidth * 2\n            ctx.beginPath()\n            ctx.rect(\n                annotation.x - annotation.width / 2,\n                annotation.y - annotation.height / 2,\n                annotation.width,\n                annotation.height\n            )\n            ctx.stroke()\n        }\n\n        ctx.strokeStyle = theme.annotations.link.stroke\n        ctx.lineWidth = theme.annotations.link.strokeWidth\n        ctx.beginPath()\n        drawPoints(ctx, annotation.computed.points)\n        ctx.stroke()\n\n        if (isCircleAnnotation(annotation)) {\n            ctx.strokeStyle = theme.annotations.outline.stroke\n            ctx.lineWidth = theme.annotations.outline.strokeWidth\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isDotAnnotation(annotation)) {\n            ctx.fillStyle = theme.annotations.symbol.fill\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.fill()\n        }\n\n        if (isRectAnnotation(annotation)) {\n            ctx.strokeStyle = theme.annotations.outline.stroke\n            ctx.lineWidth = theme.annotations.outline.strokeWidth\n            ctx.beginPath()\n            ctx.rect(\n                annotation.x - annotation.width / 2,\n                annotation.y - annotation.height / 2,\n                annotation.width,\n                annotation.height\n            )\n            ctx.stroke()\n        }\n\n        if (typeof annotation.note === 'function') {\n            annotation.note(ctx, {\n                datum: annotation.datum,\n                x: annotation.computed.text[0],\n                y: annotation.computed.text[1],\n                theme,\n            })\n        } else {\n            ctx.font = `${theme.annotations.text.fontSize}px ${theme.annotations.text.fontFamily}`\n            ctx.textAlign = 'left'\n            ctx.textBaseline = 'alphabetic'\n\n            ctx.fillStyle = theme.annotations.text.fill\n            ctx.strokeStyle = theme.annotations.text.outlineColor\n            ctx.lineWidth = theme.annotations.text.outlineWidth * 2\n\n            if (theme.annotations.text.outlineWidth > 0) {\n                ctx.lineJoin = 'round'\n                ctx.strokeText(\n                    annotation.note,\n                    annotation.computed.text[0],\n                    annotation.computed.text[1]\n                )\n                ctx.lineJoin = 'miter'\n            }\n            ctx.fillText(annotation.note, annotation.computed.text[0], annotation.computed.text[1])\n        }\n    })\n    ctx.restore()\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}