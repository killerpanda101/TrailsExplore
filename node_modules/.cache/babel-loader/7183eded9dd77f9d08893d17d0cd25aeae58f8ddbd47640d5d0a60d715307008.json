{"ast":null,"code":"import * as t from \"react\";\nimport { memo as e, useMemo as i, useCallback as n, createElement as r } from \"react\";\nimport { textPropsByEngine as o, useTheme as a, useMotionConfig as l, degreesToRadians as s } from \"@nivo/core\";\nimport { animated as c, useSpring as f, useTransition as u } from \"@react-spring/web\";\nimport { timeFormat as d } from \"d3-time-format\";\nimport { format as x } from \"d3-format\";\nimport { getScaleTicks as m, centerScale as y } from \"@nivo/scales\";\nimport { jsxs as h, jsx as g, Fragment as k } from \"react/jsx-runtime\";\nimport v from \"prop-types\";\nfunction p() {\n  return p = Object.assign ? Object.assign.bind() : function (t) {\n    for (var e = 1; e < arguments.length; e++) {\n      var i = arguments[e];\n      for (var n in i) Object.prototype.hasOwnProperty.call(i, n) && (t[n] = i[n]);\n    }\n    return t;\n  }, p.apply(this, arguments);\n}\nvar b = function (t) {\n    var e,\n      i = t.axis,\n      n = t.scale,\n      r = t.ticksPosition,\n      a = t.tickValues,\n      l = t.tickSize,\n      s = t.tickPadding,\n      c = t.tickRotation,\n      f = t.truncateTickAt,\n      u = t.engine,\n      d = void 0 === u ? \"svg\" : u,\n      x = m(n, a),\n      h = o[d],\n      g = \"bandwidth\" in n ? y(n) : n,\n      k = {\n        lineX: 0,\n        lineY: 0\n      },\n      v = {\n        textX: 0,\n        textY: 0\n      },\n      b = \"object\" == typeof document && \"rtl\" === document.dir,\n      T = h.align.center,\n      P = h.baseline.center;\n    \"x\" === i ? (e = function (t) {\n      var e;\n      return {\n        x: null != (e = g(t)) ? e : 0,\n        y: 0\n      };\n    }, k.lineY = l * (\"after\" === r ? 1 : -1), v.textY = (l + s) * (\"after\" === r ? 1 : -1), P = \"after\" === r ? h.baseline.top : h.baseline.bottom, 0 === c ? T = h.align.center : \"after\" === r && c < 0 || \"before\" === r && c > 0 ? (T = h.align[b ? \"left\" : \"right\"], P = h.baseline.center) : (\"after\" === r && c > 0 || \"before\" === r && c < 0) && (T = h.align[b ? \"right\" : \"left\"], P = h.baseline.center)) : (e = function (t) {\n      var e;\n      return {\n        x: 0,\n        y: null != (e = g(t)) ? e : 0\n      };\n    }, k.lineX = l * (\"after\" === r ? 1 : -1), v.textX = (l + s) * (\"after\" === r ? 1 : -1), T = \"after\" === r ? h.align.left : h.align.right);\n    return {\n      ticks: x.map(function (t) {\n        var i = \"string\" == typeof t ? function (t) {\n          var e = String(t).length;\n          return f && f > 0 && e > f ? \"\" + String(t).slice(0, f).concat(\"...\") : \"\" + t;\n        }(t) : t;\n        return p({\n          key: t instanceof Date ? \"\" + t.valueOf() : \"\" + t,\n          value: i\n        }, e(t), k, v);\n      }),\n      textAlign: T,\n      textBaseline: P\n    };\n  },\n  T = function (t, e) {\n    if (void 0 === t || \"function\" == typeof t) return t;\n    if (\"time\" === e.type) {\n      var i = d(t);\n      return function (t) {\n        return i(t instanceof Date ? t : new Date(t));\n      };\n    }\n    return x(t);\n  },\n  P = function (t) {\n    var e,\n      i = t.width,\n      n = t.height,\n      r = t.scale,\n      o = t.axis,\n      a = t.values,\n      l = (e = a, Array.isArray(e) ? a : void 0) || m(r, a),\n      s = \"bandwidth\" in r ? y(r) : r,\n      c = \"x\" === o ? l.map(function (t) {\n        var e, i;\n        return {\n          key: t instanceof Date ? \"\" + t.valueOf() : \"\" + t,\n          x1: null != (e = s(t)) ? e : 0,\n          x2: null != (i = s(t)) ? i : 0,\n          y1: 0,\n          y2: n\n        };\n      }) : l.map(function (t) {\n        var e, n;\n        return {\n          key: t instanceof Date ? \"\" + t.valueOf() : \"\" + t,\n          x1: 0,\n          x2: i,\n          y1: null != (e = s(t)) ? e : 0,\n          y2: null != (n = s(t)) ? n : 0\n        };\n      });\n    return c;\n  },\n  S = e(function (t) {\n    var e,\n      n = t.value,\n      r = t.format,\n      o = t.lineX,\n      l = t.lineY,\n      s = t.onClick,\n      f = t.textBaseline,\n      u = t.textAnchor,\n      d = t.animatedProps,\n      x = a(),\n      m = x.axis.ticks.line,\n      y = x.axis.ticks.text,\n      k = null != (e = null == r ? void 0 : r(n)) ? e : n,\n      v = i(function () {\n        var t = {\n          opacity: d.opacity\n        };\n        return s ? {\n          style: p({}, t, {\n            cursor: \"pointer\"\n          }),\n          onClick: function (t) {\n            return s(t, k);\n          }\n        } : {\n          style: t\n        };\n      }, [d.opacity, s, k]);\n    return h(c.g, p({\n      transform: d.transform\n    }, v, {\n      children: [g(\"line\", {\n        x1: 0,\n        x2: o,\n        y1: 0,\n        y2: l,\n        style: m\n      }), y.outlineWidth > 0 && g(c.text, {\n        dominantBaseline: f,\n        textAnchor: u,\n        transform: d.textTransform,\n        style: y,\n        strokeWidth: 2 * y.outlineWidth,\n        stroke: y.outlineColor,\n        strokeLinejoin: \"round\",\n        children: \"\" + k\n      }), g(c.text, {\n        dominantBaseline: f,\n        textAnchor: u,\n        transform: d.textTransform,\n        style: y,\n        children: \"\" + k\n      })]\n    }));\n  }),\n  A = function (e) {\n    var r = e.axis,\n      o = e.scale,\n      s = e.x,\n      d = void 0 === s ? 0 : s,\n      x = e.y,\n      m = void 0 === x ? 0 : x,\n      y = e.length,\n      v = e.ticksPosition,\n      P = e.tickValues,\n      A = e.tickSize,\n      W = void 0 === A ? 5 : A,\n      O = e.tickPadding,\n      w = void 0 === O ? 5 : O,\n      B = e.tickRotation,\n      X = void 0 === B ? 0 : B,\n      Y = e.format,\n      C = e.renderTick,\n      z = void 0 === C ? S : C,\n      V = e.truncateTickAt,\n      j = e.legend,\n      D = e.legendPosition,\n      R = void 0 === D ? \"end\" : D,\n      E = e.legendOffset,\n      L = void 0 === E ? 0 : E,\n      q = e.onClick,\n      F = e.ariaHidden,\n      H = a(),\n      N = H.axis.legend.text,\n      I = i(function () {\n        return T(Y, o);\n      }, [Y, o]),\n      J = b({\n        axis: r,\n        scale: o,\n        ticksPosition: v,\n        tickValues: P,\n        tickSize: W,\n        tickPadding: w,\n        tickRotation: X,\n        truncateTickAt: V\n      }),\n      G = J.ticks,\n      K = J.textAlign,\n      M = J.textBaseline,\n      Q = null;\n    if (void 0 !== j) {\n      var U,\n        Z = 0,\n        $ = 0,\n        _ = 0;\n      \"y\" === r ? (_ = -90, Z = L, \"start\" === R ? (U = \"start\", $ = y) : \"middle\" === R ? (U = \"middle\", $ = y / 2) : \"end\" === R && (U = \"end\")) : ($ = L, \"start\" === R ? U = \"start\" : \"middle\" === R ? (U = \"middle\", Z = y / 2) : \"end\" === R && (U = \"end\", Z = y)), Q = h(k, {\n        children: [N.outlineWidth > 0 && g(\"text\", {\n          transform: \"translate(\" + Z + \", \" + $ + \") rotate(\" + _ + \")\",\n          textAnchor: U,\n          style: p({\n            dominantBaseline: \"central\"\n          }, N),\n          strokeWidth: 2 * N.outlineWidth,\n          stroke: N.outlineColor,\n          strokeLinejoin: \"round\",\n          children: j\n        }), g(\"text\", {\n          transform: \"translate(\" + Z + \", \" + $ + \") rotate(\" + _ + \")\",\n          textAnchor: U,\n          style: p({\n            dominantBaseline: \"central\"\n          }, N),\n          children: j\n        })]\n      });\n    }\n    var tt = l(),\n      et = tt.animate,\n      it = tt.config,\n      nt = f({\n        transform: \"translate(\" + d + \",\" + m + \")\",\n        lineX2: \"x\" === r ? y : 0,\n        lineY2: \"x\" === r ? 0 : y,\n        config: it,\n        immediate: !et\n      }),\n      rt = n(function (t) {\n        return {\n          opacity: 1,\n          transform: \"translate(\" + t.x + \",\" + t.y + \")\",\n          textTransform: \"translate(\" + t.textX + \",\" + t.textY + \") rotate(\" + X + \")\"\n        };\n      }, [X]),\n      ot = n(function (t) {\n        return {\n          opacity: 0,\n          transform: \"translate(\" + t.x + \",\" + t.y + \")\",\n          textTransform: \"translate(\" + t.textX + \",\" + t.textY + \") rotate(\" + X + \")\"\n        };\n      }, [X]),\n      at = u(G, {\n        keys: function (t) {\n          return t.key;\n        },\n        initial: rt,\n        from: ot,\n        enter: rt,\n        update: rt,\n        leave: {\n          opacity: 0\n        },\n        config: it,\n        immediate: !et\n      });\n    return h(c.g, {\n      transform: nt.transform,\n      \"aria-hidden\": F,\n      children: [at(function (e, i, n, r) {\n        return t.createElement(z, p({\n          tickIndex: r,\n          format: I,\n          rotate: X,\n          textBaseline: M,\n          textAnchor: K,\n          truncateTickAt: V,\n          animatedProps: e\n        }, i, q ? {\n          onClick: q\n        } : {}));\n      }), g(c.line, {\n        style: H.axis.domain.line,\n        x1: 0,\n        x2: nt.lineX2,\n        y1: 0,\n        y2: nt.lineY2\n      }), Q]\n    });\n  },\n  W = e(A),\n  O = {\n    ticksPosition: v.oneOf([\"before\", \"after\"]),\n    tickValues: v.oneOfType([v.number, v.arrayOf(v.oneOfType([v.number, v.string, v.instanceOf(Date)])), v.string]),\n    rotateOnTickLength: v.shape({\n      angle: v.number,\n      length: v.number\n    }),\n    tickSize: v.number,\n    tickPadding: v.number,\n    tickRotation: v.number,\n    format: v.oneOfType([v.func, v.string]),\n    renderTick: v.func,\n    legend: v.node,\n    legendPosition: v.oneOf([\"start\", \"middle\", \"end\"]),\n    legendOffset: v.number,\n    ariaHidden: v.bool\n  },\n  w = v.shape(O),\n  B = [\"top\", \"right\", \"bottom\", \"left\"],\n  X = e(function (t) {\n    var e = t.xScale,\n      i = t.yScale,\n      n = t.width,\n      r = t.height,\n      o = {\n        top: t.top,\n        right: t.right,\n        bottom: t.bottom,\n        left: t.left\n      };\n    return g(k, {\n      children: B.map(function (t) {\n        var a = o[t];\n        if (!a) return null;\n        var l = \"top\" === t || \"bottom\" === t;\n        return g(W, p({}, a, {\n          axis: l ? \"x\" : \"y\",\n          x: \"right\" === t ? n : 0,\n          y: \"bottom\" === t ? r : 0,\n          scale: l ? e : i,\n          length: l ? n : r,\n          ticksPosition: \"top\" === t || \"left\" === t ? \"before\" : \"after\",\n          truncateTickAt: a.truncateTickAt\n        }), t);\n      })\n    });\n  }),\n  Y = e(function (t) {\n    var e = t.animatedProps,\n      i = a();\n    return g(c.line, p({}, e, i.grid.line));\n  }),\n  C = e(function (t) {\n    var e = t.lines,\n      i = l(),\n      n = i.animate,\n      o = i.config,\n      a = u(e, {\n        keys: function (t) {\n          return t.key;\n        },\n        initial: function (t) {\n          return {\n            opacity: 1,\n            x1: t.x1,\n            x2: t.x2,\n            y1: t.y1,\n            y2: t.y2\n          };\n        },\n        from: function (t) {\n          return {\n            opacity: 0,\n            x1: t.x1,\n            x2: t.x2,\n            y1: t.y1,\n            y2: t.y2\n          };\n        },\n        enter: function (t) {\n          return {\n            opacity: 1,\n            x1: t.x1,\n            x2: t.x2,\n            y1: t.y1,\n            y2: t.y2\n          };\n        },\n        update: function (t) {\n          return {\n            opacity: 1,\n            x1: t.x1,\n            x2: t.x2,\n            y1: t.y1,\n            y2: t.y2\n          };\n        },\n        leave: {\n          opacity: 0\n        },\n        config: o,\n        immediate: !n\n      });\n    return g(\"g\", {\n      children: a(function (t, e) {\n        return r(Y, p({}, e, {\n          key: e.key,\n          animatedProps: t\n        }));\n      })\n    });\n  }),\n  z = e(function (t) {\n    var e = t.width,\n      n = t.height,\n      r = t.xScale,\n      o = t.yScale,\n      a = t.xValues,\n      l = t.yValues,\n      s = i(function () {\n        return !!r && P({\n          width: e,\n          height: n,\n          scale: r,\n          axis: \"x\",\n          values: a\n        });\n      }, [r, a, e, n]),\n      c = i(function () {\n        return !!o && P({\n          width: e,\n          height: n,\n          scale: o,\n          axis: \"y\",\n          values: l\n        });\n      }, [n, e, o, l]);\n    return h(k, {\n      children: [s && g(C, {\n        lines: s\n      }), c && g(C, {\n        lines: c\n      })]\n    });\n  }),\n  V = function (t, e) {\n    var i,\n      n = e.axis,\n      r = e.scale,\n      o = e.x,\n      a = void 0 === o ? 0 : o,\n      l = e.y,\n      c = void 0 === l ? 0 : l,\n      f = e.length,\n      u = e.ticksPosition,\n      d = e.tickValues,\n      x = e.tickSize,\n      m = void 0 === x ? 5 : x,\n      y = e.tickPadding,\n      h = void 0 === y ? 5 : y,\n      g = e.tickRotation,\n      k = void 0 === g ? 0 : g,\n      v = e.format,\n      p = e.legend,\n      T = e.legendPosition,\n      P = void 0 === T ? \"end\" : T,\n      S = e.legendOffset,\n      A = void 0 === S ? 0 : S,\n      W = e.theme,\n      O = b({\n        axis: n,\n        scale: r,\n        ticksPosition: u,\n        tickValues: d,\n        tickSize: m,\n        tickPadding: h,\n        tickRotation: k,\n        engine: \"canvas\"\n      }),\n      w = O.ticks,\n      B = O.textAlign,\n      X = O.textBaseline;\n    t.save(), t.translate(a, c), t.textAlign = B, t.textBaseline = X;\n    var Y = W.axis.ticks.text;\n    t.font = (Y.fontWeight ? Y.fontWeight + \" \" : \"\") + Y.fontSize + \"px \" + Y.fontFamily, (null != (i = W.axis.domain.line.strokeWidth) ? i : 0) > 0 && (t.lineWidth = Number(W.axis.domain.line.strokeWidth), t.lineCap = \"square\", W.axis.domain.line.stroke && (t.strokeStyle = W.axis.domain.line.stroke), t.beginPath(), t.moveTo(0, 0), t.lineTo(\"x\" === n ? f : 0, \"x\" === n ? 0 : f), t.stroke());\n    var C = \"function\" == typeof v ? v : function (t) {\n      return \"\" + t;\n    };\n    if (w.forEach(function (e) {\n      var i;\n      (null != (i = W.axis.ticks.line.strokeWidth) ? i : 0) > 0 && (t.lineWidth = Number(W.axis.ticks.line.strokeWidth), t.lineCap = \"square\", W.axis.ticks.line.stroke && (t.strokeStyle = W.axis.ticks.line.stroke), t.beginPath(), t.moveTo(e.x, e.y), t.lineTo(e.x + e.lineX, e.y + e.lineY), t.stroke());\n      var n = C(e.value);\n      t.save(), t.translate(e.x + e.textX, e.y + e.textY), t.rotate(s(k)), Y.outlineWidth > 0 && (t.strokeStyle = Y.outlineColor, t.lineWidth = 2 * Y.outlineWidth, t.lineJoin = \"round\", t.strokeText(\"\" + n, 0, 0)), W.axis.ticks.text.fill && (t.fillStyle = Y.fill), t.fillText(\"\" + n, 0, 0), t.restore();\n    }), void 0 !== p) {\n      var z = 0,\n        V = 0,\n        j = 0,\n        D = \"center\";\n      \"y\" === n ? (j = -90, z = A, \"start\" === P ? (D = \"start\", V = f) : \"middle\" === P ? (D = \"center\", V = f / 2) : \"end\" === P && (D = \"end\")) : (V = A, \"start\" === P ? D = \"start\" : \"middle\" === P ? (D = \"center\", z = f / 2) : \"end\" === P && (D = \"end\", z = f)), t.translate(z, V), t.rotate(s(j)), t.font = (W.axis.legend.text.fontWeight ? W.axis.legend.text.fontWeight + \" \" : \"\") + W.axis.legend.text.fontSize + \"px \" + W.axis.legend.text.fontFamily, W.axis.legend.text.fill && (t.fillStyle = W.axis.legend.text.fill), t.textAlign = D, t.textBaseline = \"middle\", t.fillText(p, 0, 0);\n    }\n    t.restore();\n  },\n  j = function (t, e) {\n    var i = e.xScale,\n      n = e.yScale,\n      r = e.width,\n      o = e.height,\n      a = e.top,\n      l = e.right,\n      s = e.bottom,\n      c = e.left,\n      f = e.theme,\n      u = {\n        top: a,\n        right: l,\n        bottom: s,\n        left: c\n      };\n    B.forEach(function (e) {\n      var a = u[e];\n      if (!a) return null;\n      var l = \"top\" === e || \"bottom\" === e,\n        s = \"top\" === e || \"left\" === e ? \"before\" : \"after\",\n        c = l ? i : n,\n        d = T(a.format, c);\n      V(t, p({}, a, {\n        axis: l ? \"x\" : \"y\",\n        x: \"right\" === e ? r : 0,\n        y: \"bottom\" === e ? o : 0,\n        scale: c,\n        format: d,\n        length: l ? r : o,\n        ticksPosition: s,\n        theme: f\n      }));\n    });\n  },\n  D = function (t, e) {\n    var i = e.width,\n      n = e.height,\n      r = e.scale,\n      o = e.axis,\n      a = e.values;\n    P({\n      width: i,\n      height: n,\n      scale: r,\n      axis: o,\n      values: a\n    }).forEach(function (e) {\n      t.beginPath(), t.moveTo(e.x1, e.y1), t.lineTo(e.x2, e.y2), t.stroke();\n    });\n  };\nexport { X as Axes, W as Axis, S as AxisTick, z as Grid, Y as GridLine, C as GridLines, A as NonMemoizedAxis, w as axisPropType, O as axisPropTypes, B as positions, j as renderAxesToCanvas, V as renderAxisToCanvas, D as renderGridLinesToCanvas };","map":{"version":3,"mappings":"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","names":["computeCartesianTicks","_ref","translate","axis","scale","ticksPosition","tickValues","tickSize","tickPadding","tickRotation","truncateTickAt","_ref$engine","engine","values","getScaleTicks","textProps","textPropsByEngine","position","centerScale","line","lineX","lineY","text","textX","textY","isRTL","document","dir","textAlign","align","center","textBaseline","baseline","x","_position","d","y","top","bottom","_position2","left","right","ticks","map","value","processedValue","valueLength","String","length","slice","concat","truncateTick","key","Date","valueOf","getFormatter","format","type","formatter","timeFormat","d3Format","computeGridLines","_ref2","width","height","_values","Array","isArray","undefined","lines","x1","_position3","x2","_position4","y1","y2","_position5","_position6","memoizedAxisTick","memo","_value","onClick","textAnchor","animatedProps","theme","useTheme","lineStyle","textStyle","_format","props","useMemo","style","opacity","_extends","cursor","event","_jsxs","animated","g","transform","children","_jsx","outlineWidth","dominantBaseline","textTransform","strokeWidth","stroke","outlineColor","strokeLinejoin","NonMemoizedAxis","_ref$x","_ref$y","_ref$tickSize","_ref$tickPadding","_ref$tickRotation","_ref$renderTick","renderTick","AxisTick","legend","_ref$legendPosition","legendPosition","_ref$legendOffset","legendOffset","ariaHidden","legendTextStyle","formatValue","_computeCartesianTick","legendNode","legendX","legendY","legendRotation","useMotionConfig","animate","_useMotionConfig","springConfig","config","useSpring","lineX2","lineY2","immediate","getAnimatedProps","useCallback","tick","getFromAnimatedProps","transition","useTransition","keys","initial","from","enter","update","leave","transitionProps","_state","tickIndex","React","createElement","rotate","domain","Axis","axisPropTypes","PropTypes","oneOf","oneOfType","number","arrayOf","string","instanceOf","rotateOnTickLength","shape","angle","func","node","bool","axisPropType","positions","Axes","xScale","yScale","axes","isXAxis","GridLine","grid","GridLines","_createElement","Grid","xValues","yValues","xLines","yLines","renderAxisToCanvas","ctx","save","font","fontWeight","fontSize","fontFamily","_theme$axis$domain$li","lineWidth","Number","lineCap","strokeStyle","beginPath","moveTo","lineTo","forEach","_theme$axis$ticks$lin","degreesToRadians","lineJoin","strokeText","fill","fillStyle","fillText","restore","renderAxesToCanvas","renderGridLinesToCanvas","_ref3"],"sources":["/Users/parijatchatterjee/Desktop/TrailsExplore/node_modules/@nivo/axes/src/compute.ts","/Users/parijatchatterjee/Desktop/TrailsExplore/node_modules/@nivo/axes/src/components/AxisTick.tsx","/Users/parijatchatterjee/Desktop/TrailsExplore/node_modules/@nivo/axes/src/components/Axis.tsx","/Users/parijatchatterjee/Desktop/TrailsExplore/node_modules/@nivo/axes/src/props.ts","/Users/parijatchatterjee/Desktop/TrailsExplore/node_modules/@nivo/axes/src/components/Axes.tsx","/Users/parijatchatterjee/Desktop/TrailsExplore/node_modules/@nivo/axes/src/components/GridLine.tsx","/Users/parijatchatterjee/Desktop/TrailsExplore/node_modules/@nivo/axes/src/components/GridLines.tsx","/Users/parijatchatterjee/Desktop/TrailsExplore/node_modules/@nivo/axes/src/components/Grid.tsx","/Users/parijatchatterjee/Desktop/TrailsExplore/node_modules/@nivo/axes/src/canvas.ts"],"sourcesContent":["import { timeFormat } from 'd3-time-format'\nimport { format as d3Format } from 'd3-format'\n// @ts-ignore\nimport { textPropsByEngine } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec, getScaleTicks, centerScale } from '@nivo/scales'\nimport { Point, ValueFormatter, Line } from './types'\n\nconst isArray = <T>(value: unknown): value is T[] => Array.isArray(value)\n\nexport const computeCartesianTicks = <Value extends ScaleValue>({\n    axis,\n    scale,\n    ticksPosition,\n    tickValues,\n    tickSize,\n    tickPadding,\n    tickRotation,\n    truncateTickAt,\n    engine = 'svg',\n}: {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    ticksPosition?: 'after' | 'before'\n    tickValues?: TicksSpec<Value>\n    tickSize: number\n    tickPadding: number\n    tickRotation: number\n    truncateTickAt?: number\n    engine?: 'svg' | 'canvas'\n}) => {\n    const values = getScaleTicks<Value>(scale, tickValues)\n\n    const textProps = textPropsByEngine[engine]\n\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n    const line = { lineX: 0, lineY: 0 }\n    const text = { textX: 0, textY: 0 }\n\n    const isRTL = typeof document === 'object' ? document.dir === 'rtl' : false\n    let translate: (value: Value) => Point\n    let textAlign: CanvasTextAlign = textProps.align.center\n    let textBaseline: CanvasTextBaseline = textProps.baseline.center\n\n    if (axis === 'x') {\n        translate = d => ({ x: position(d) ?? 0, y: 0 })\n\n        line.lineY = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textY = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textBaseline = textProps.baseline.top\n        } else {\n            textBaseline = textProps.baseline.bottom\n        }\n\n        if (tickRotation === 0) {\n            textAlign = textProps.align.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation < 0) ||\n            (ticksPosition === 'before' && tickRotation > 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'left' : 'right']\n            textBaseline = textProps.baseline.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation > 0) ||\n            (ticksPosition === 'before' && tickRotation < 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'right' : 'left']\n            textBaseline = textProps.baseline.center\n        }\n    } else {\n        translate = d => ({ x: 0, y: position(d) ?? 0 })\n\n        line.lineX = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textX = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textAlign = textProps.align.left\n        } else {\n            textAlign = textProps.align.right\n        }\n    }\n\n    const truncateTick = (value: string) => {\n        const valueLength = String(value).length\n\n        if (truncateTickAt && truncateTickAt > 0 && valueLength > truncateTickAt) {\n            return `${String(value).slice(0, truncateTickAt).concat('...')}`\n        }\n        return `${value}`\n    }\n\n    const ticks = values.map((value: Value) => {\n        const processedValue =\n            typeof value === 'string' ? (truncateTick(value) as unknown as Value) : value\n        return {\n            key: value instanceof Date ? `${value.valueOf()}` : `${value}`,\n            value: processedValue,\n            ...translate(value),\n            ...line,\n            ...text,\n        }\n    })\n\n    return {\n        ticks,\n        textAlign,\n        textBaseline,\n    }\n}\n\nexport const getFormatter = <Value extends ScaleValue>(\n    format: string | ValueFormatter<Value> | undefined,\n    scale: AnyScale\n): ValueFormatter<Value> | undefined => {\n    if (typeof format === 'undefined' || typeof format === 'function') return format\n\n    if (scale.type === 'time') {\n        const formatter = timeFormat(format)\n\n        return ((d: any) => formatter(d instanceof Date ? d : new Date(d))) as ValueFormatter<Value>\n    }\n\n    return d3Format(format) as unknown as ValueFormatter<Value>\n}\n\nexport const computeGridLines = <Value extends ScaleValue>({\n    width,\n    height,\n    scale,\n    axis,\n    values: _values,\n}: {\n    width: number\n    height: number\n    scale: AnyScale\n    axis: 'x' | 'y'\n    values?: TicksSpec<Value>\n}) => {\n    const lineValues = isArray<number>(_values) ? _values : undefined\n    const values = lineValues || getScaleTicks<Value>(scale, _values)\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n\n    const lines: Line[] =\n        axis === 'x'\n            ? values.map((value: Value) => ({\n                  key: value instanceof Date ? `${value.valueOf()}` : `${value}`,\n                  x1: position(value) ?? 0,\n                  x2: position(value) ?? 0,\n                  y1: 0,\n                  y2: height,\n              }))\n            : values.map((value: Value) => ({\n                  key: value instanceof Date ? `${value.valueOf()}` : `${value}`,\n                  x1: 0,\n                  x2: width,\n                  y1: position(value) ?? 0,\n                  y2: position(value) ?? 0,\n              }))\n\n    return lines\n}\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { ScaleValue } from '@nivo/scales'\nimport { AxisTickProps } from '../types'\n\nconst AxisTick = <Value extends ScaleValue>({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    animatedProps,\n}: AxisTickProps<Value>) => {\n    const theme = useTheme()\n    const lineStyle = theme.axis.ticks.line\n    const textStyle = theme.axis.ticks.text\n\n    const value = format?.(_value) ?? _value\n\n    const props = useMemo(() => {\n        const style = { opacity: animatedProps.opacity }\n\n        if (!onClick) {\n            return { style }\n        }\n\n        return {\n            style: { ...style, cursor: 'pointer' },\n            onClick: (event: React.MouseEvent<SVGGElement, MouseEvent>) => onClick(event, value),\n        }\n    }, [animatedProps.opacity, onClick, value])\n\n    return (\n        <animated.g transform={animatedProps.transform} {...props}>\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={lineStyle} />\n            {textStyle.outlineWidth > 0 && (\n                <animated.text\n                    dominantBaseline={textBaseline}\n                    textAnchor={textAnchor}\n                    transform={animatedProps.textTransform}\n                    style={textStyle}\n                    strokeWidth={textStyle.outlineWidth * 2}\n                    stroke={textStyle.outlineColor}\n                    strokeLinejoin=\"round\"\n                >\n                    {`${value}`}\n                </animated.text>\n            )}\n            <animated.text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={textStyle}\n            >\n                {`${value}`}\n            </animated.text>\n        </animated.g>\n    )\n}\n\nconst memoizedAxisTick = memo(AxisTick) as typeof AxisTick\n\nexport { memoizedAxisTick as AxisTick }\n","import { useMotionConfig, useTheme } from '@nivo/core'\nimport { AnyScale, ScaleValue } from '@nivo/scales'\nimport { animated, useSpring, useTransition } from '@react-spring/web'\nimport * as React from 'react'\nimport { memo, useCallback, useMemo } from 'react'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { AxisProps } from '../types'\nimport { AxisTick } from './AxisTick'\n\nexport const NonMemoizedAxis = <Value extends ScaleValue>({\n    axis,\n    scale,\n    x = 0,\n    y = 0,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation = 0,\n    format,\n    renderTick = AxisTick,\n    truncateTickAt,\n    legend,\n    legendPosition = 'end',\n    legendOffset = 0,\n    onClick,\n    ariaHidden,\n}: AxisProps<Value> & {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    x?: number\n    y?: number\n    length: number\n    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value | string) => void\n}) => {\n    const theme = useTheme()\n    const legendTextStyle = theme.axis.legend.text\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n        truncateTickAt,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <>\n                {legendTextStyle.outlineWidth > 0 && (\n                    <text\n                        transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                        textAnchor={textAnchor}\n                        style={{\n                            dominantBaseline: 'central',\n                            ...legendTextStyle,\n                        }}\n                        strokeWidth={legendTextStyle.outlineWidth * 2}\n                        stroke={legendTextStyle.outlineColor}\n                        strokeLinejoin=\"round\"\n                    >\n                        {legend}\n                    </text>\n                )}\n                <text\n                    transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                    textAnchor={textAnchor}\n                    style={{\n                        dominantBaseline: 'central',\n                        ...legendTextStyle,\n                    }}\n                >\n                    {legend}\n                </text>\n            </>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const getAnimatedProps = useCallback(\n        (tick: (typeof ticks)[0]) => {\n            return {\n                opacity: 1,\n                transform: `translate(${tick.x},${tick.y})`,\n                textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n            }\n        },\n        [tickRotation]\n    )\n    const getFromAnimatedProps = useCallback(\n        (tick: (typeof ticks)[0]) => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        [tickRotation]\n    )\n\n    const transition = useTransition<\n        (typeof ticks)[0],\n        { opacity: number; transform: string; textTransform: string }\n    >(ticks, {\n        keys: tick => tick.key,\n        initial: getAnimatedProps,\n        from: getFromAnimatedProps,\n        enter: getAnimatedProps,\n        update: getAnimatedProps,\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transition((transitionProps, tick, _state, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    truncateTickAt: truncateTickAt,\n                    animatedProps: transitionProps,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                })\n            })}\n            <animated.line\n                style={theme.axis.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n\nexport const Axis = memo(NonMemoizedAxis) as typeof NonMemoizedAxis\n","import PropTypes from 'prop-types'\n\nexport const axisPropTypes = {\n    ticksPosition: PropTypes.oneOf(['before', 'after']),\n    tickValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n        PropTypes.string,\n    ]),\n    rotateOnTickLength: PropTypes.shape({\n        angle: PropTypes.number,\n        length: PropTypes.number,\n    }),\n    tickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickRotation: PropTypes.number,\n    format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    renderTick: PropTypes.func,\n    legend: PropTypes.node,\n    legendPosition: PropTypes.oneOf(['start', 'middle', 'end']),\n    legendOffset: PropTypes.number,\n    ariaHidden: PropTypes.bool,\n}\n\nexport const axisPropType = PropTypes.shape(axisPropTypes)\n\nexport const positions = ['top', 'right', 'bottom', 'left'] as const\n","import { memo } from 'react'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { Axis } from './Axis'\nimport { positions } from '../props'\nimport { AxisProps } from '../types'\n\nexport const Axes = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        xScale,\n        yScale,\n        width,\n        height,\n        top,\n        right,\n        bottom,\n        left,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: AxisProps<X> | null\n        right?: AxisProps<Y> | null\n        bottom?: AxisProps<X> | null\n        left?: AxisProps<Y> | null\n    }) => {\n        const axes = { top, right, bottom, left }\n\n        return (\n            <>\n                {positions.map(position => {\n                    const axis = axes[position] as typeof position extends 'bottom' | 'top'\n                        ? AxisProps<X> | undefined\n                        : AxisProps<Y> | undefined\n\n                    if (!axis) return null\n\n                    const isXAxis = position === 'top' || position === 'bottom'\n                    const ticksPosition =\n                        position === 'top' || position === 'left' ? 'before' : 'after'\n\n                    return (\n                        <Axis\n                            key={position}\n                            {...axis}\n                            axis={isXAxis ? 'x' : 'y'}\n                            x={position === 'right' ? width : 0}\n                            y={position === 'bottom' ? height : 0}\n                            scale={isXAxis ? xScale : yScale}\n                            length={isXAxis ? width : height}\n                            ticksPosition={ticksPosition}\n                            truncateTickAt={axis.truncateTickAt}\n                        />\n                    )\n                })}\n            </>\n        )\n    }\n)\n","import { memo, SVGAttributes } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\n\nexport const GridLine = memo(\n    ({\n        animatedProps,\n    }: {\n        animatedProps: SpringValues<{\n            opacity: number\n            x1: number\n            x2: number\n            y1: number\n            y2: number\n        }>\n    }) => {\n        const theme = useTheme()\n\n        return (\n            <animated.line\n                {...animatedProps}\n                {...(theme.grid.line as SVGAttributes<SVGLineElement>)}\n            />\n        )\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { GridLine } from './GridLine'\nimport { Line } from '../types'\n\nexport const GridLines = memo(({ lines }: { lines: Line[] }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<Line, Record<'opacity' | 'x1' | 'x2' | 'y1' | 'y2', number>>(\n        lines,\n        {\n            keys: line => line.key,\n            initial: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            from: line => ({\n                opacity: 0,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            enter: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            update: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            leave: {\n                opacity: 0,\n            },\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <g>\n            {transition((animatedProps, line) => (\n                <GridLine {...line} key={line.key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n})\n","import { useMemo, memo } from 'react'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { GridLines } from './GridLines'\nimport { computeGridLines } from '../compute'\n\nexport const Grid = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        width,\n        height,\n        xScale,\n        yScale,\n        xValues,\n        yValues,\n    }: {\n        width: number\n        height: number\n        xScale?: AnyScale | null\n        xValues?: TicksSpec<X>\n        yScale?: AnyScale | null\n        yValues?: TicksSpec<Y>\n    }) => {\n        const xLines = useMemo(() => {\n            if (!xScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: xScale,\n                axis: 'x',\n                values: xValues,\n            })\n        }, [xScale, xValues, width, height])\n\n        const yLines = useMemo(() => {\n            if (!yScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: yScale,\n                axis: 'y',\n                values: yValues,\n            })\n        }, [height, width, yScale, yValues])\n\n        return (\n            <>\n                {xLines && <GridLines lines={xLines} />}\n                {yLines && <GridLines lines={yLines} />}\n            </>\n        )\n    }\n)\n","import { degreesToRadians, CompleteTheme } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter, computeGridLines } from './compute'\nimport { positions } from './props'\nimport { AxisLegendPosition, CanvasAxisProps, ValueFormatter } from './types'\n\nexport const renderAxisToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        axis,\n        scale,\n        x = 0,\n        y = 0,\n        length,\n\n        ticksPosition,\n        tickValues,\n        tickSize = 5,\n        tickPadding = 5,\n        tickRotation = 0,\n        format: _format,\n\n        legend,\n        legendPosition = 'end',\n        legendOffset = 0,\n\n        theme,\n    }: {\n        axis: 'x' | 'y'\n        scale: AnyScale\n        x?: number\n        y?: number\n        length: number\n        ticksPosition: 'before' | 'after'\n        tickValues?: TicksSpec<Value>\n        tickSize?: number\n        tickPadding?: number\n        tickRotation?: number\n        format?: string | ValueFormatter<Value>\n        legend?: string\n        legendPosition?: AxisLegendPosition\n        legendOffset?: number\n        theme: CompleteTheme\n    }\n) => {\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n        engine: 'canvas',\n    })\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.textAlign = textAlign\n    ctx.textBaseline = textBaseline\n\n    const textStyle = theme.axis.ticks.text\n    ctx.font = `${textStyle.fontWeight ? `${textStyle.fontWeight} ` : ''}${textStyle.fontSize}px ${\n        textStyle.fontFamily\n    }`\n\n    if ((theme.axis.domain.line.strokeWidth ?? 0) > 0) {\n        ctx.lineWidth = Number(theme.axis.domain.line.strokeWidth)\n        ctx.lineCap = 'square'\n\n        if (theme.axis.domain.line.stroke) {\n            ctx.strokeStyle = theme.axis.domain.line.stroke\n        }\n\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(axis === 'x' ? length : 0, axis === 'x' ? 0 : length)\n        ctx.stroke()\n    }\n\n    const format = typeof _format === 'function' ? _format : (value: unknown) => `${value}`\n\n    ticks.forEach(tick => {\n        if ((theme.axis.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            ctx.lineCap = 'square'\n\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x, tick.y)\n            ctx.lineTo(tick.x + tick.lineX, tick.y + tick.lineY)\n            ctx.stroke()\n        }\n\n        const value = format(tick.value)\n\n        ctx.save()\n        ctx.translate(tick.x + tick.textX, tick.y + tick.textY)\n        ctx.rotate(degreesToRadians(tickRotation))\n\n        if (textStyle.outlineWidth > 0) {\n            ctx.strokeStyle = textStyle.outlineColor\n            ctx.lineWidth = textStyle.outlineWidth * 2\n            ctx.lineJoin = 'round'\n            ctx.strokeText(`${value}`, 0, 0)\n        }\n\n        if (theme.axis.ticks.text.fill) {\n            ctx.fillStyle = textStyle.fill\n        }\n\n        ctx.fillText(`${value}`, 0, 0)\n        ctx.restore()\n    })\n\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAlign: CanvasTextAlign = 'center'\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n                legendX = length\n            }\n        }\n\n        ctx.translate(legendX, legendY)\n        ctx.rotate(degreesToRadians(legendRotation))\n        ctx.font = `${\n            theme.axis.legend.text.fontWeight ? `${theme.axis.legend.text.fontWeight} ` : ''\n        }${theme.axis.legend.text.fontSize}px ${theme.axis.legend.text.fontFamily}`\n\n        if (theme.axis.legend.text.fill) {\n            ctx.fillStyle = theme.axis.legend.text.fill\n        }\n\n        ctx.textAlign = textAlign\n        ctx.textBaseline = 'middle'\n        ctx.fillText(legend, 0, 0)\n    }\n\n    ctx.restore()\n}\n\nexport const renderAxesToCanvas = <X extends ScaleValue, Y extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        xScale,\n        yScale,\n        width,\n        height,\n\n        top,\n        right,\n        bottom,\n        left,\n\n        theme,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: CanvasAxisProps<X> | null\n        right?: CanvasAxisProps<Y> | null\n        bottom?: CanvasAxisProps<X> | null\n        left?: CanvasAxisProps<Y> | null\n        theme: CompleteTheme\n    }\n) => {\n    const axes = { top, right, bottom, left }\n\n    positions.forEach(position => {\n        const axis = axes[position] as typeof position extends 'bottom' | 'top'\n            ? CanvasAxisProps<X> | undefined\n            : CanvasAxisProps<Y> | undefined\n\n        if (!axis) return null\n\n        const isXAxis = position === 'top' || position === 'bottom'\n        const ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after'\n        const scale = isXAxis ? xScale : yScale\n        const format = getFormatter(axis.format, scale)\n\n        renderAxisToCanvas(ctx, {\n            ...axis,\n            axis: isXAxis ? 'x' : 'y',\n            x: position === 'right' ? width : 0,\n            y: position === 'bottom' ? height : 0,\n            scale,\n            format,\n            length: isXAxis ? width : height,\n            ticksPosition,\n            theme,\n        })\n    })\n}\n\nexport const renderGridLinesToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        width,\n        height,\n        scale,\n        axis,\n        values,\n    }: {\n        width: number\n        height: number\n        scale: AnyScale\n        axis: 'x' | 'y'\n        values?: TicksSpec<Value>\n    }\n) => {\n    const lines = computeGridLines({ width, height, scale, axis, values })\n\n    lines.forEach(line => {\n        ctx.beginPath()\n        ctx.moveTo(line.x1, line.y1)\n        ctx.lineTo(line.x2, line.y2)\n        ctx.stroke()\n    })\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}