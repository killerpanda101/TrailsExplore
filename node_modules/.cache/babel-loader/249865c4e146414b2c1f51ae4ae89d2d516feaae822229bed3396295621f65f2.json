{"ast":null,"code":"import { useMemo as e, memo as o, useCallback as r, Fragment as i, useRef as t, useEffect as n } from \"react\";\nimport { useTheme as a, guessQuantizeColorScale as u, quantizeColorScalePropType as l, useDimensions as d, SvgWrapper as c, withContainer as f, ResponsiveWrapper as s, getRelativeCursor as h, bindDefs as p } from \"@nivo/core\";\nimport { BasicTooltip as v, useTooltip as g } from \"@nivo/tooltip\";\nimport m from \"prop-types\";\nimport { useInheritedColor as C, inheritedColorPropType as b } from \"@nivo/colors\";\nimport y from \"lodash/isFunction\";\nimport R from \"lodash/get\";\nimport { format as j } from \"d3-format\";\nimport { geoAzimuthalEqualArea as q, geoAzimuthalEquidistant as w, geoGnomonic as T, geoOrthographic as M, geoStereographic as W, geoEqualEarth as k, geoEquirectangular as F, geoMercator as O, geoTransverseMercator as L, geoNaturalEarth1 as E, geoPath as S, geoGraticule as G, geoContains as x } from \"d3-geo\";\nimport { useQuantizeColorScaleLegendData as B, BoxLegendSvg as P, renderLegendToCanvas as N } from \"@nivo/legends\";\nimport { jsx as H } from \"react/jsx-runtime\";\nfunction I() {\n  return I = Object.assign ? Object.assign.bind() : function (e) {\n    for (var o = 1; o < arguments.length; o++) {\n      var r = arguments[o];\n      for (var i in r) Object.prototype.hasOwnProperty.call(r, i) && (e[i] = r[i]);\n    }\n    return e;\n  }, I.apply(this, arguments);\n}\nvar D = {\n    azimuthalEqualArea: q,\n    azimuthalEquidistant: w,\n    gnomonic: T,\n    orthographic: M,\n    stereographic: W,\n    equalEarth: k,\n    equirectangular: F,\n    mercator: O,\n    transverseMercator: L,\n    naturalEarth1: E\n  },\n  z = function (o) {\n    var r = o.width,\n      i = o.height,\n      t = o.projectionType,\n      n = o.projectionScale,\n      u = o.projectionTranslation,\n      l = o.projectionRotation,\n      d = o.fillColor,\n      c = o.borderWidth,\n      f = o.borderColor,\n      s = e(function () {\n        return D[t]().scale(n).translate([r * u[0], i * u[1]]).rotate(l);\n      }, [r, i, t, n, u[0], u[1], l[0], l[1], l[2]]),\n      h = e(function () {\n        return S(s);\n      }, [s]),\n      p = e(function () {\n        return G();\n      }),\n      v = a(),\n      g = e(function () {\n        return \"function\" == typeof c ? c : function () {\n          return c;\n        };\n      }, [c]),\n      m = C(f, v),\n      b = e(function () {\n        return \"function\" == typeof d ? d : function () {\n          return d;\n        };\n      }, [d]);\n    return {\n      projection: s,\n      path: h,\n      graticule: p,\n      getBorderWidth: g,\n      getBorderColor: m,\n      getFillColor: b\n    };\n  },\n  K = function (o) {\n    var r = o.features,\n      i = o.data,\n      t = o.match,\n      n = o.label,\n      a = o.value,\n      l = o.valueFormat,\n      d = o.colors,\n      c = o.unknownColor,\n      f = o.domain,\n      s = e(function () {\n        return y(t) ? t : function (e, o) {\n          var r = R(e, t),\n            i = R(o, t);\n          return r && r === i;\n        };\n      }, [t]),\n      h = e(function () {\n        return y(n) ? n : function (e) {\n          return R(e, n);\n        };\n      }, [n]),\n      p = e(function () {\n        return y(a) ? a : function (e) {\n          return R(e, a);\n        };\n      }, [a]),\n      v = e(function () {\n        return void 0 === l ? function (e) {\n          return e;\n        } : y(l) ? l : j(l);\n      }, [l]),\n      g = e(function () {\n        return u(d).domain(f);\n      }, [d, f]),\n      m = e(function () {\n        return function (e) {\n          return void 0 === e.value ? c : g(e.value);\n        };\n      }, [g, c]),\n      C = e(function () {\n        return r.map(function (e) {\n          var o = i.find(function (o) {\n              return s(e, o);\n            }),\n            r = p(o);\n          if (o) {\n            var t = I({}, e, {\n              data: o,\n              value: r,\n              formattedValue: v(r)\n            });\n            return t.color = m(t), t.label = h(t), t;\n          }\n          return e;\n        });\n      }, [r, i, s, p, v, m]),\n      b = B({\n        scale: g,\n        valueFormat: v\n      });\n    return {\n      colorScale: g,\n      getFillColor: m,\n      boundFeatures: C,\n      valueFormatter: v,\n      legendData: b\n    };\n  },\n  V = o(function (e) {\n    var o = e.feature;\n    return void 0 === o.data ? null : H(v, {\n      id: o.label,\n      color: o.color,\n      enableChip: !0,\n      value: o.formattedValue\n    });\n  });\nV.propTypes = {\n  feature: m.object.isRequired\n}, V.displayName = \"ChoroplethTooltip\";\nvar A = {\n    features: m.arrayOf(m.shape({\n      id: m.string.isRequired,\n      type: m.oneOf([\"Feature\"]).isRequired,\n      properties: m.object,\n      geometry: m.object.isRequired\n    })).isRequired,\n    projectionType: m.oneOf(Object.keys(D)).isRequired,\n    projectionScale: m.number.isRequired,\n    projectionTranslation: m.arrayOf(m.number).isRequired,\n    projectionRotation: m.arrayOf(m.number).isRequired,\n    fillColor: m.oneOfType([m.string, m.func]).isRequired,\n    borderWidth: m.oneOfType([m.number, m.func]).isRequired,\n    borderColor: b.isRequired,\n    enableGraticule: m.bool.isRequired,\n    graticuleLineWidth: m.number.isRequired,\n    graticuleLineColor: m.string.isRequired,\n    isInteractive: m.bool.isRequired,\n    onMouseEnter: m.func.isRequired,\n    onMouseMove: m.func.isRequired,\n    onMouseLeave: m.func.isRequired,\n    onClick: m.func.isRequired,\n    tooltip: m.any,\n    layers: m.arrayOf(m.oneOfType([m.oneOf([\"graticule\", \"features\"]), m.func])).isRequired\n  },\n  J = I({}, A, {\n    role: m.string.isRequired\n  }),\n  Q = I({\n    pixelRatio: m.number.isRequired\n  }, A),\n  U = {\n    data: m.arrayOf(m.object).isRequired,\n    match: m.oneOfType([m.string, m.func]).isRequired,\n    label: m.oneOfType([m.string, m.func]).isRequired,\n    value: m.oneOfType([m.string, m.func]).isRequired,\n    valueFormat: m.oneOfType([m.string, m.func]),\n    colors: l.isRequired,\n    domain: m.arrayOf(m.number).isRequired,\n    unknownColor: m.string.isRequired,\n    layers: m.arrayOf(m.oneOfType([m.oneOf([\"graticule\", \"features\", \"legends\"]), m.func])).isRequired\n  },\n  X = I({}, J, U, {\n    role: m.string.isRequired\n  }),\n  Y = I({}, Q, U),\n  Z = {\n    projectionType: \"mercator\",\n    projectionScale: 100,\n    projectionTranslation: [.5, .5],\n    projectionRotation: [0, 0, 0],\n    enableGraticule: !1,\n    graticuleLineWidth: .5,\n    graticuleLineColor: \"#999999\",\n    fillColor: \"#dddddd\",\n    borderWidth: 0,\n    borderColor: \"#000000\",\n    isInteractive: !0,\n    onMouseEnter: function () {},\n    onMouseLeave: function () {},\n    onMouseMove: function () {},\n    onClick: function () {},\n    layers: [\"graticule\", \"features\"],\n    legends: [],\n    fill: [],\n    defs: []\n  },\n  $ = I({}, Z, {\n    role: \"img\"\n  }),\n  _ = I({}, Z, {\n    pixelRatio: \"undefined\" != typeof window && window.devicePixelRatio || 1\n  }),\n  ee = {\n    match: \"id\",\n    label: \"id\",\n    value: \"value\",\n    colors: \"PuBuGn\",\n    unknownColor: \"#999\",\n    tooltip: V,\n    layers: [\"graticule\", \"features\", \"legends\"]\n  },\n  oe = I({}, $, ee, {\n    role: \"img\"\n  }),\n  re = I({}, _, ee),\n  ie = o(function (e) {\n    var o = e.path,\n      r = e.graticule,\n      i = e.lineWidth,\n      t = e.lineColor;\n    return H(\"path\", {\n      fill: \"none\",\n      strokeWidth: i,\n      stroke: t,\n      d: o(r())\n    });\n  });\nie.propTypes = {\n  path: m.func.isRequired,\n  graticule: m.func.isRequired,\n  lineWidth: m.number.isRequired,\n  lineColor: m.string.isRequired\n}, ie.displayName = \"GeoGraticule\";\nvar te = o(function (e) {\n  var o,\n    r = e.feature,\n    i = e.path,\n    t = e.fillColor,\n    n = e.borderWidth,\n    a = e.borderColor,\n    u = e.onClick,\n    l = e.onMouseEnter,\n    d = e.onMouseMove,\n    c = e.onMouseLeave;\n  return H(\"path\", {\n    fill: null != (o = null == r ? void 0 : r.fill) ? o : t,\n    strokeWidth: n,\n    stroke: a,\n    strokeLinejoin: \"bevel\",\n    d: i(r),\n    onMouseEnter: function (e) {\n      return l(r, e);\n    },\n    onMouseMove: function (e) {\n      return d(r, e);\n    },\n    onMouseLeave: function (e) {\n      return c(r, e);\n    },\n    onClick: function (e) {\n      return u(r, e);\n    }\n  }, r.id);\n});\nte.propTypes = {\n  feature: m.shape({\n    id: m.string.isRequired,\n    type: m.oneOf([\"Feature\"]).isRequired,\n    properties: m.object,\n    geometry: m.object.isRequired\n  }).isRequired,\n  path: m.func.isRequired,\n  fillColor: m.string.isRequired,\n  borderWidth: m.number.isRequired,\n  borderColor: m.string.isRequired,\n  onMouseEnter: m.func.isRequired,\n  onMouseMove: m.func.isRequired,\n  onMouseLeave: m.func.isRequired,\n  onClick: m.func.isRequired\n}, te.displayName = \"GeoMapFeature\";\nvar ne = o(function (e) {\n  var o = e.width,\n    t = e.height,\n    n = e.margin,\n    u = e.features,\n    l = e.layers,\n    f = void 0 === l ? [\"graticule\", \"features\"] : l,\n    s = e.projectionType,\n    h = void 0 === s ? \"mercator\" : s,\n    p = e.projectionScale,\n    v = void 0 === p ? 100 : p,\n    m = e.projectionTranslation,\n    C = void 0 === m ? [.5, .5] : m,\n    b = e.projectionRotation,\n    y = void 0 === b ? [0, 0, 0] : b,\n    R = e.fillColor,\n    j = void 0 === R ? \"#dddddd\" : R,\n    q = e.borderWidth,\n    w = void 0 === q ? 0 : q,\n    T = e.borderColor,\n    M = void 0 === T ? \"#000000\" : T,\n    W = e.enableGraticule,\n    k = void 0 !== W && W,\n    F = e.graticuleLineWidth,\n    O = void 0 === F ? .5 : F,\n    L = e.graticuleLineColor,\n    E = void 0 === L ? \"#999999\" : L,\n    S = e.isInteractive,\n    G = void 0 === S || S,\n    x = e.onClick,\n    B = void 0 === x ? function () {} : x,\n    P = e.tooltip,\n    N = e.role,\n    I = void 0 === N ? \"img\" : N,\n    D = d(o, t, n),\n    K = D.margin,\n    V = D.outerWidth,\n    A = D.outerHeight,\n    J = z({\n      width: o,\n      height: t,\n      projectionType: h,\n      projectionScale: v,\n      projectionTranslation: C,\n      projectionRotation: y,\n      fillColor: j,\n      borderWidth: w,\n      borderColor: M\n    }),\n    Q = J.graticule,\n    U = J.path,\n    X = J.getFillColor,\n    Y = J.getBorderWidth,\n    Z = J.getBorderColor,\n    $ = a(),\n    _ = g(),\n    ee = _.showTooltipFromEvent,\n    oe = _.hideTooltip,\n    re = r(function (e, o) {\n      return G && B && B(e, o);\n    }, [G, B]),\n    ne = r(function (e, o) {\n      return G && P && ee(H(P, {\n        feature: e\n      }), o);\n    }, [G, ee, P]),\n    ae = r(function (e, o) {\n      return G && P && ee(H(P, {\n        feature: e\n      }), o);\n    }, [G, ee, P]),\n    ue = r(function () {\n      return G && oe();\n    }, [G, oe]);\n  return H(c, {\n    width: V,\n    height: A,\n    margin: K,\n    theme: $,\n    role: I,\n    children: f.map(function (o, r) {\n      return \"graticule\" === o ? !0 !== k ? null : H(ie, {\n        path: U,\n        graticule: Q,\n        lineWidth: O,\n        lineColor: E\n      }, \"graticule\") : \"features\" === o ? H(i, {\n        children: u.map(function (e) {\n          return H(te, {\n            feature: e,\n            path: U,\n            fillColor: X(e),\n            borderWidth: Y(e),\n            borderColor: Z(e),\n            onMouseEnter: ne,\n            onMouseMove: ae,\n            onMouseLeave: ue,\n            onClick: re\n          }, e.id);\n        })\n      }, \"features\") : H(i, {\n        children: o(e)\n      }, r);\n    })\n  });\n});\nne.displayName = \"GeoMap\", ne.propTypes = J;\nvar ae = f(ne),\n  ue = function (e) {\n    return H(s, {\n      children: function (o) {\n        var r = o.width,\n          i = o.height;\n        return H(ae, I({\n          width: r,\n          height: i\n        }, e));\n      }\n    });\n  },\n  le = function (e, o, r, i) {\n    var t = h(o, e),\n      n = t[0],\n      a = t[1];\n    return r.find(function (e) {\n      return x(e, i.invert([n, a]));\n    });\n  },\n  de = o(function (e) {\n    var o = e.width,\n      i = e.height,\n      u = e.margin,\n      l = e.pixelRatio,\n      c = void 0 === l ? \"undefined\" != typeof window && window.devicePixelRatio || 1 : l,\n      f = e.features,\n      s = e.layers,\n      h = e.projectionType,\n      p = void 0 === h ? \"mercator\" : h,\n      v = e.projectionScale,\n      m = void 0 === v ? 100 : v,\n      C = e.projectionTranslation,\n      b = void 0 === C ? [.5, .5] : C,\n      y = e.projectionRotation,\n      R = void 0 === y ? [0, 0, 0] : y,\n      j = e.fillColor,\n      q = void 0 === j ? \"#dddddd\" : j,\n      w = e.borderWidth,\n      T = void 0 === w ? 0 : w,\n      M = e.borderColor,\n      W = void 0 === M ? \"#000000\" : M,\n      k = e.enableGraticule,\n      F = void 0 !== k && k,\n      O = e.graticuleLineWidth,\n      L = void 0 === O ? .5 : O,\n      E = e.graticuleLineColor,\n      S = void 0 === E ? \"#999999\" : E,\n      G = e.isInteractive,\n      x = void 0 === G || G,\n      B = e.onClick,\n      P = void 0 === B ? function () {} : B,\n      N = e.onMouseMove,\n      I = void 0 === N ? function () {} : N,\n      D = e.tooltip,\n      K = t(null),\n      V = a(),\n      A = d(o, i, u),\n      J = A.margin,\n      Q = A.outerWidth,\n      U = A.outerHeight,\n      X = z({\n        width: o,\n        height: i,\n        projectionType: p,\n        projectionScale: m,\n        projectionTranslation: b,\n        projectionRotation: R,\n        fillColor: q,\n        borderWidth: T,\n        borderColor: W\n      }),\n      Y = X.projection,\n      Z = X.graticule,\n      $ = X.path,\n      _ = X.getFillColor,\n      ee = X.getBorderWidth,\n      oe = X.getBorderColor;\n    n(function () {\n      if (K) {\n        K.current.width = Q * c, K.current.height = U * c;\n        var o = K.current.getContext(\"2d\");\n        o.scale(c, c), o.fillStyle = V.background, o.fillRect(0, 0, Q, U), o.translate(J.left, J.top), $.context(o), s.forEach(function (r) {\n          \"graticule\" === r ? !0 === F && (o.lineWidth = L, o.strokeStyle = S, o.beginPath(), $(Z()), o.stroke()) : \"features\" === r ? f.forEach(function (e) {\n            o.beginPath(), $(e), o.fillStyle = _(e), o.fill();\n            var r = ee(e);\n            r > 0 && (o.strokeStyle = oe(e), o.lineWidth = r, o.stroke());\n          }) : r(o, e);\n        });\n      }\n    }, [K, Q, U, J, c, V, $, Z, _, ee, oe, f, s]);\n    var re = g(),\n      ie = re.showTooltipFromEvent,\n      te = re.hideTooltip,\n      ne = r(function (e) {\n        if (x && D) {\n          var o = le(e, K.current, f, Y);\n          o ? ie(H(D, {\n            feature: o\n          }), e) : te(), I && I(o || null, e);\n        }\n      }, [ie, te, x, D, K, f, Y]),\n      ae = r(function () {\n        return x && te();\n      }, [x, te]),\n      ue = r(function (e) {\n        if (x && P) {\n          var o = le(e, K.current, f, Y);\n          o && P(o, e);\n        }\n      }, [x, K, f, Y, P]);\n    return H(\"canvas\", {\n      ref: K,\n      width: Q * c,\n      height: U * c,\n      style: {\n        width: Q,\n        height: U,\n        cursor: x ? \"auto\" : \"normal\"\n      },\n      onMouseMove: ne,\n      onMouseLeave: ae,\n      onClick: ue\n    });\n  });\nde.displatName = \"GeoMapCanvas\", de.propTypes = Q;\nvar ce = f(de),\n  fe = function (e) {\n    return H(s, {\n      children: function (o) {\n        var r = o.width,\n          i = o.height;\n        return H(ce, I({\n          width: r,\n          height: i\n        }, e));\n      }\n    });\n  },\n  se = o(function (e) {\n    var o = e.width,\n      t = e.height,\n      n = e.margin,\n      u = e.features,\n      l = e.data,\n      f = e.match,\n      s = void 0 === f ? \"id\" : f,\n      h = e.label,\n      v = void 0 === h ? \"id\" : h,\n      m = e.value,\n      C = void 0 === m ? \"value\" : m,\n      b = e.valueFormat,\n      y = e.projectionType,\n      R = void 0 === y ? \"mercator\" : y,\n      j = e.projectionScale,\n      q = void 0 === j ? 100 : j,\n      w = e.projectionTranslation,\n      T = void 0 === w ? [.5, .5] : w,\n      M = e.projectionRotation,\n      W = void 0 === M ? [0, 0, 0] : M,\n      k = e.colors,\n      F = void 0 === k ? \"PuBuGn\" : k,\n      O = e.domain,\n      L = e.unknownColor,\n      E = void 0 === L ? \"#999\" : L,\n      S = e.borderWidth,\n      G = void 0 === S ? 0 : S,\n      x = e.borderColor,\n      B = void 0 === x ? \"#000000\" : x,\n      N = e.enableGraticule,\n      D = void 0 !== N && N,\n      A = e.graticuleLineWidth,\n      J = void 0 === A ? .5 : A,\n      Q = e.graticuleLineColor,\n      U = void 0 === Q ? \"#999999\" : Q,\n      X = e.layers,\n      Y = void 0 === X ? [\"graticule\", \"features\", \"legends\"] : X,\n      Z = e.legends,\n      $ = void 0 === Z ? [] : Z,\n      _ = e.isInteractive,\n      ee = void 0 === _ || _,\n      oe = e.onClick,\n      re = void 0 === oe ? function () {} : oe,\n      ne = e.tooltip,\n      ae = void 0 === ne ? V : ne,\n      ue = e.role,\n      le = void 0 === ue ? \"img\" : ue,\n      de = e.defs,\n      ce = void 0 === de ? [] : de,\n      fe = e.fill,\n      se = void 0 === fe ? [] : fe,\n      he = d(o, t, n),\n      pe = he.margin,\n      ve = he.outerWidth,\n      ge = he.outerHeight,\n      me = z({\n        width: o,\n        height: t,\n        projectionType: R,\n        projectionScale: q,\n        projectionTranslation: T,\n        projectionRotation: W,\n        fillColor: function () {},\n        borderWidth: G,\n        borderColor: B\n      }),\n      Ce = me.graticule,\n      be = me.path,\n      ye = me.getBorderWidth,\n      Re = me.getBorderColor,\n      je = K({\n        features: u,\n        data: l,\n        match: s,\n        label: v,\n        value: C,\n        valueFormat: b,\n        colors: F,\n        unknownColor: E,\n        domain: O\n      }),\n      qe = je.getFillColor,\n      we = je.boundFeatures,\n      Te = je.legendData,\n      Me = a(),\n      We = p(ce, we, se, {\n        dataKey: \"data\",\n        targetKey: \"fill\"\n      }),\n      ke = g(),\n      Fe = ke.showTooltipFromEvent,\n      Oe = ke.hideTooltip,\n      Le = r(function (e, o) {\n        return ee && re && re(e, o);\n      }, [ee, re]),\n      Ee = r(function (e, o) {\n        return ee && ae && Fe(H(ae, {\n          feature: e\n        }), o);\n      }, [ee, Fe, ae]),\n      Se = r(function (e, o) {\n        return ee && ae && Fe(H(ae, {\n          feature: e\n        }), o);\n      }, [ee, Fe, ae]),\n      Ge = r(function () {\n        return ee && Oe();\n      }, [ee, Oe]);\n    return H(c, {\n      width: ve,\n      height: ge,\n      margin: pe,\n      theme: Me,\n      defs: We,\n      role: le,\n      children: Y.map(function (e, r) {\n        return \"graticule\" === e ? !0 !== D ? null : H(ie, {\n          path: be,\n          graticule: Ce,\n          lineWidth: J,\n          lineColor: U\n        }, \"graticule\") : \"features\" === e ? H(i, {\n          children: we.map(function (e) {\n            return H(te, {\n              feature: e,\n              path: be,\n              fillColor: qe(e),\n              borderWidth: ye(e),\n              borderColor: Re(e),\n              onMouseEnter: Ee,\n              onMouseMove: Se,\n              onMouseLeave: Ge,\n              onClick: Le\n            }, e.id);\n          })\n        }, \"features\") : \"legends\" === e ? $.map(function (e, r) {\n          return H(P, I({\n            containerWidth: o,\n            containerHeight: t,\n            data: Te\n          }, e), r);\n        }) : H(i, {\n          children: e({})\n        }, r);\n      })\n    });\n  });\nse.displayName = \"Choropleth\", se.propTypes = X;\nvar he = f(se),\n  pe = function (e) {\n    return H(s, {\n      children: function (o) {\n        var r = o.width,\n          i = o.height;\n        return H(he, I({\n          width: r,\n          height: i\n        }, e));\n      }\n    });\n  },\n  ve = function (e, o, r, i) {\n    var t = h(o, e),\n      n = t[0],\n      a = t[1];\n    return r.find(function (e) {\n      return x(e, i.invert([n, a]));\n    });\n  },\n  ge = o(function (e) {\n    var o = e.width,\n      i = e.height,\n      u = e.margin,\n      l = e.pixelRatio,\n      c = void 0 === l ? \"undefined\" != typeof window && window.devicePixelRatio || 1 : l,\n      f = e.features,\n      s = e.data,\n      h = e.match,\n      p = void 0 === h ? \"id\" : h,\n      v = e.label,\n      m = void 0 === v ? \"id\" : v,\n      C = e.value,\n      b = void 0 === C ? \"value\" : C,\n      y = e.valueFormat,\n      R = e.projectionType,\n      j = void 0 === R ? \"mercator\" : R,\n      q = e.projectionScale,\n      w = void 0 === q ? 100 : q,\n      T = e.projectionTranslation,\n      M = void 0 === T ? [.5, .5] : T,\n      W = e.projectionRotation,\n      k = void 0 === W ? [0, 0, 0] : W,\n      F = e.colors,\n      O = void 0 === F ? \"PuBuGn\" : F,\n      L = e.domain,\n      E = e.unknownColor,\n      S = void 0 === E ? \"#999\" : E,\n      G = e.borderWidth,\n      x = void 0 === G ? 0 : G,\n      B = e.borderColor,\n      P = void 0 === B ? \"#000000\" : B,\n      D = e.enableGraticule,\n      A = void 0 !== D && D,\n      J = e.graticuleLineWidth,\n      Q = void 0 === J ? .5 : J,\n      U = e.graticuleLineColor,\n      X = void 0 === U ? \"#999999\" : U,\n      Y = e.layers,\n      Z = void 0 === Y ? [\"graticule\", \"features\", \"legends\"] : Y,\n      $ = e.legends,\n      _ = void 0 === $ ? [] : $,\n      ee = e.isInteractive,\n      oe = void 0 === ee || ee,\n      re = e.onClick,\n      ie = void 0 === re ? function () {} : re,\n      te = e.onMouseMove,\n      ne = void 0 === te ? function () {} : te,\n      ae = e.tooltip,\n      ue = void 0 === ae ? V : ae,\n      le = t(null),\n      de = a(),\n      ce = d(o, i, u),\n      fe = ce.margin,\n      se = ce.outerWidth,\n      he = ce.outerHeight,\n      pe = z({\n        width: o,\n        height: i,\n        projectionType: j,\n        projectionScale: w,\n        projectionTranslation: M,\n        projectionRotation: k,\n        fillColor: function () {},\n        borderWidth: x,\n        borderColor: P\n      }),\n      ge = pe.projection,\n      me = pe.graticule,\n      Ce = pe.path,\n      be = pe.getBorderWidth,\n      ye = pe.getBorderColor,\n      Re = K({\n        features: f,\n        data: s,\n        match: p,\n        label: m,\n        value: b,\n        valueFormat: y,\n        colors: O,\n        unknownColor: S,\n        domain: L\n      }),\n      je = Re.getFillColor,\n      qe = Re.boundFeatures,\n      we = Re.legendData;\n    n(function () {\n      if (le) {\n        le.current.width = se * c, le.current.height = he * c;\n        var e = le.current.getContext(\"2d\");\n        e.scale(c, c), e.fillStyle = de.background, e.fillRect(0, 0, se, he), e.translate(fe.left, fe.top), Ce.context(e), Z.forEach(function (r) {\n          \"graticule\" === r ? !0 === A && (e.lineWidth = Q, e.strokeStyle = X, e.beginPath(), Ce(me()), e.stroke()) : \"features\" === r ? qe.forEach(function (o) {\n            e.beginPath(), Ce(o), e.fillStyle = je(o), e.fill();\n            var r = be(o);\n            r > 0 && (e.strokeStyle = ye(o), e.lineWidth = r, e.stroke());\n          }) : \"legends\" === r && _.forEach(function (r) {\n            N(e, I({}, r, {\n              data: we,\n              containerWidth: o,\n              containerHeight: i,\n              theme: de\n            }));\n          });\n        });\n      }\n    }, [le, se, he, fe, c, de, Ce, me, je, be, ye, qe, _, Z]);\n    var Te = g(),\n      Me = Te.showTooltipFromEvent,\n      We = Te.hideTooltip,\n      ke = r(function (e) {\n        if (oe && ue) {\n          var o = ve(e, le.current, qe, ge);\n          o ? Me(H(ue, {\n            feature: o\n          }), e) : We(), ne && ne(o || null, e);\n        }\n      }, [Me, We, oe, ue, le, qe, ge]),\n      Fe = r(function () {\n        return oe && We();\n      }, [oe, We]),\n      Oe = r(function (e) {\n        if (oe && ie) {\n          var o = ve(e, le.current, qe, ge);\n          o && ie(o, e);\n        }\n      }, [oe, le, qe, ge, ie]);\n    return H(\"canvas\", {\n      ref: le,\n      width: se * c,\n      height: he * c,\n      style: {\n        width: se,\n        height: he,\n        cursor: oe ? \"auto\" : \"normal\"\n      },\n      onMouseMove: ke,\n      onMouseLeave: Fe,\n      onClick: Oe\n    });\n  });\nge.displayName = \"ChoroplethCanvas\", ge.propTypes = Y;\nvar me = f(ge),\n  Ce = function (e) {\n    return H(s, {\n      children: function (o) {\n        var r = o.width,\n          i = o.height;\n        return H(me, I({\n          width: r,\n          height: i\n        }, e));\n      }\n    });\n  };\nexport { he as Choropleth, me as ChoroplethCanvas, re as ChoroplethCanvasDefaultProps, Y as ChoroplethCanvasPropTypes, oe as ChoroplethDefaultProps, X as ChoroplethPropTypes, ae as GeoMap, ce as GeoMapCanvas, _ as GeoMapCanvasDefaultProps, Q as GeoMapCanvasPropTypes, $ as GeoMapDefaultProps, J as GeoMapPropTypes, pe as ResponsiveChoropleth, Ce as ResponsiveChoroplethCanvas, ue as ResponsiveGeoMap, fe as ResponsiveGeoMapCanvas, D as projectionById, K as useChoropleth, z as useGeoMap };","map":{"version":3,"mappings":"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","names":["projectionById","azimuthalEqualArea","geoAzimuthalEqualArea","azimuthalEquidistant","geoAzimuthalEquidistant","gnomonic","geoGnomonic","orthographic","geoOrthographic","stereographic","geoStereographic","equalEarth","geoEqualEarth","equirectangular","geoEquirectangular","mercator","geoMercator","transverseMercator","geoTransverseMercator","naturalEarth1","geoNaturalEarth1","useGeoMap","_ref","width","height","projectionType","projectionScale","projectionTranslation","projectionRotation","fillColor","borderWidth","borderColor","projection","useMemo","scale","translate","rotate","path","geoPath","graticule","geoGraticule","theme","useTheme","getBorderWidth","getBorderColor","useInheritedColor","getFillColor","useChoropleth","_ref2","features","data","match","label","value","valueFormat","colors","unknownColor","domain","findMatchingDatum","isFunction","feature","datum","featureKey","get","datumKey","getLabel","getValue","valueFormatter","undefined","d","format","colorScale","guessQuantizeColorScale","boundFeatures","map","find","datumValue","featureWithData","_extends","formattedValue","color","legendData","useQuantizeColorScaleLegendData","ChoroplethTooltip","memo","_jsx","BasicTooltip","id","enableChip","propTypes","PropTypes","object","isRequired","displayName","commonPropTypes","arrayOf","shape","string","type","oneOf","properties","geometry","Object","keys","number","oneOfType","func","inheritedColorPropType","enableGraticule","bool","graticuleLineWidth","graticuleLineColor","isInteractive","onMouseEnter","onMouseMove","onMouseLeave","onClick","tooltip","any","layers","GeoMapPropTypes","role","GeoMapCanvasPropTypes","pixelRatio","commonChoroplethPropTypes","quantizeColorScalePropType","ChoroplethPropTypes","ChoroplethCanvasPropTypes","commonDefaultProps","legends","fill","defs","GeoMapDefaultProps","GeoMapCanvasDefaultProps","window","devicePixelRatio","commonChoroplethDefaultProps","ChoroplethDefaultProps","ChoroplethCanvasDefaultProps","GeoGraticule","lineWidth","lineColor","strokeWidth","stroke","GeoMapFeature","_feature$fill","strokeLinejoin","event","GeoMap","props","partialMargin","margin","_props$layers","_props$projectionType","_props$projectionScal","_props$projectionTran","_props$projectionRota","_props$fillColor","_props$borderWidth","_props$borderColor","_props$enableGraticul","_props$graticuleLineW","_props$graticuleLineC","_props$isInteractive","_props$onClick","Tooltip","_props$role","_useDimensions","useDimensions","outerWidth","outerHeight","_useGeoMap","_useTooltip","useTooltip","showTooltipFromEvent","hideTooltip","handleClick","useCallback","handleMouseEnter","handleMouseMove","handleMouseLeave","SvgWrapper","children","layer","i","Fragment","withContainer","ResponsiveGeoMap","ResponsiveWrapper","getFeatureFromMouseEvent","el","getRelativeCursor","x","_getRelativeCursor","y","geoContains","f","invert","GeoMapCanvas","_props$pixelRatio","_props$onMouseMove","canvasEl","useRef","useEffect","current","ctx","getContext","fillStyle","background","fillRect","left","top","context","forEach","strokeStyle","beginPath","ref","style","cursor","displatName","ResponsiveGeoMapCanvas","Choropleth","_props$match","_props$label","_props$value","_props$colors","_props$unknownColor","_props$legends","_props$tooltip","_props$defs","_props$fill","_useChoropleth","boundDefs","bindDefs","dataKey","targetKey","legend","BoxLegendSvg","containerWidth","containerHeight","ResponsiveChoropleth","ChoroplethCanvas","renderLegendToCanvas","ResponsiveChoroplethCanvas"],"sources":["/Users/parijatchatterjee/Desktop/TrailsExplore/node_modules/@nivo/geo/src/hooks.js","/Users/parijatchatterjee/Desktop/TrailsExplore/node_modules/@nivo/geo/src/ChoroplethTooltip.js","/Users/parijatchatterjee/Desktop/TrailsExplore/node_modules/@nivo/geo/src/props.js","/Users/parijatchatterjee/Desktop/TrailsExplore/node_modules/@nivo/geo/src/GeoGraticule.js","/Users/parijatchatterjee/Desktop/TrailsExplore/node_modules/@nivo/geo/src/GeoMapFeature.js","/Users/parijatchatterjee/Desktop/TrailsExplore/node_modules/@nivo/geo/src/GeoMap.js","/Users/parijatchatterjee/Desktop/TrailsExplore/node_modules/@nivo/geo/src/ResponsiveGeoMap.js","/Users/parijatchatterjee/Desktop/TrailsExplore/node_modules/@nivo/geo/src/GeoMapCanvas.js","/Users/parijatchatterjee/Desktop/TrailsExplore/node_modules/@nivo/geo/src/ResponsiveGeoMapCanvas.js","/Users/parijatchatterjee/Desktop/TrailsExplore/node_modules/@nivo/geo/src/Choropleth.js","/Users/parijatchatterjee/Desktop/TrailsExplore/node_modules/@nivo/geo/src/ResponsiveChoropleth.js","/Users/parijatchatterjee/Desktop/TrailsExplore/node_modules/@nivo/geo/src/ChoroplethCanvas.js","/Users/parijatchatterjee/Desktop/TrailsExplore/node_modules/@nivo/geo/src/ResponsiveChoroplethCanvas.js"],"sourcesContent":["/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { useMemo } from 'react'\nimport isFunction from 'lodash/isFunction'\nimport get from 'lodash/get'\nimport { format } from 'd3-format'\nimport {\n    geoPath,\n    geoAzimuthalEqualArea,\n    geoAzimuthalEquidistant,\n    geoGnomonic,\n    geoOrthographic,\n    geoStereographic,\n    geoEqualEarth,\n    geoEquirectangular,\n    geoMercator,\n    geoTransverseMercator,\n    geoNaturalEarth1,\n    geoGraticule,\n} from 'd3-geo'\nimport { guessQuantizeColorScale, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { useQuantizeColorScaleLegendData } from '@nivo/legends'\n\nexport const projectionById = {\n    azimuthalEqualArea: geoAzimuthalEqualArea,\n    azimuthalEquidistant: geoAzimuthalEquidistant,\n    gnomonic: geoGnomonic,\n    orthographic: geoOrthographic,\n    stereographic: geoStereographic,\n    equalEarth: geoEqualEarth,\n    equirectangular: geoEquirectangular,\n    mercator: geoMercator,\n    transverseMercator: geoTransverseMercator,\n    naturalEarth1: geoNaturalEarth1,\n}\n\nexport const useGeoMap = ({\n    width,\n    height,\n    projectionType,\n    projectionScale,\n    projectionTranslation,\n    projectionRotation,\n    fillColor,\n    borderWidth,\n    borderColor,\n}) => {\n    const projection = useMemo(() => {\n        return projectionById[projectionType]()\n            .scale(projectionScale)\n            .translate([width * projectionTranslation[0], height * projectionTranslation[1]])\n            .rotate(projectionRotation)\n    }, [\n        width,\n        height,\n        projectionType,\n        projectionScale,\n        projectionTranslation[0],\n        projectionTranslation[1],\n        projectionRotation[0],\n        projectionRotation[1],\n        projectionRotation[2],\n    ])\n    const path = useMemo(() => geoPath(projection), [projection])\n    const graticule = useMemo(() => geoGraticule())\n\n    const theme = useTheme()\n    const getBorderWidth = useMemo(\n        () => (typeof borderWidth === 'function' ? borderWidth : () => borderWidth),\n        [borderWidth]\n    )\n    const getBorderColor = useInheritedColor(borderColor, theme)\n    const getFillColor = useMemo(\n        () => (typeof fillColor === 'function' ? fillColor : () => fillColor),\n        [fillColor]\n    )\n\n    return {\n        projection,\n        path,\n        graticule,\n        getBorderWidth,\n        getBorderColor,\n        getFillColor,\n    }\n}\n\nexport const useChoropleth = ({\n    features,\n    data,\n    match,\n    label,\n    value,\n    valueFormat,\n    colors,\n    unknownColor,\n    domain,\n}) => {\n    const findMatchingDatum = useMemo(() => {\n        if (isFunction(match)) return match\n        return (feature, datum) => {\n            const featureKey = get(feature, match)\n            const datumKey = get(datum, match)\n\n            return featureKey && featureKey === datumKey\n        }\n    }, [match])\n    const getLabel = useMemo(\n        () => (isFunction(label) ? label : datum => get(datum, label)),\n        [label]\n    )\n    const getValue = useMemo(\n        () => (isFunction(value) ? value : datum => get(datum, value)),\n        [value]\n    )\n    const valueFormatter = useMemo(() => {\n        if (valueFormat === undefined) return d => d\n        if (isFunction(valueFormat)) return valueFormat\n        return format(valueFormat)\n    }, [valueFormat])\n\n    const colorScale = useMemo(\n        () => guessQuantizeColorScale(colors).domain(domain),\n        [colors, domain]\n    )\n    const getFillColor = useMemo(() => {\n        return feature => {\n            if (feature.value === undefined) return unknownColor\n            return colorScale(feature.value)\n        }\n    }, [colorScale, unknownColor])\n\n    const boundFeatures = useMemo(\n        () =>\n            features.map(feature => {\n                const datum = data.find(datum => findMatchingDatum(feature, datum))\n                const datumValue = getValue(datum)\n\n                if (datum) {\n                    const featureWithData = {\n                        ...feature,\n                        data: datum,\n                        value: datumValue,\n                        formattedValue: valueFormatter(datumValue),\n                    }\n                    featureWithData.color = getFillColor(featureWithData)\n                    featureWithData.label = getLabel(featureWithData)\n\n                    return featureWithData\n                }\n\n                return feature\n            }),\n        [features, data, findMatchingDatum, getValue, valueFormatter, getFillColor]\n    )\n\n    const legendData = useQuantizeColorScaleLegendData({\n        scale: colorScale,\n        valueFormat: valueFormatter,\n    })\n\n    return {\n        colorScale,\n        getFillColor,\n        boundFeatures,\n        valueFormatter,\n        legendData,\n    }\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst ChoroplethTooltip = memo(({ feature }) => {\n    if (feature.data === undefined) return null\n\n    return (\n        <BasicTooltip\n            id={feature.label}\n            color={feature.color}\n            enableChip={true}\n            value={feature.formattedValue}\n        />\n    )\n})\n\nChoroplethTooltip.propTypes = {\n    feature: PropTypes.object.isRequired,\n}\n\nChoroplethTooltip.displayName = 'ChoroplethTooltip'\n\nexport default ChoroplethTooltip\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { quantizeColorScalePropType } from '@nivo/core'\nimport { inheritedColorPropType } from '@nivo/colors'\nimport { projectionById } from './hooks'\nimport ChoroplethTooltip from './ChoroplethTooltip'\n\nconst commonPropTypes = {\n    features: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            type: PropTypes.oneOf(['Feature']).isRequired,\n            properties: PropTypes.object,\n            geometry: PropTypes.object.isRequired,\n        })\n    ).isRequired,\n\n    projectionType: PropTypes.oneOf(Object.keys(projectionById)).isRequired,\n    projectionScale: PropTypes.number.isRequired,\n    projectionTranslation: PropTypes.arrayOf(PropTypes.number).isRequired,\n    projectionRotation: PropTypes.arrayOf(PropTypes.number).isRequired,\n\n    fillColor: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    borderWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,\n    borderColor: inheritedColorPropType.isRequired,\n\n    enableGraticule: PropTypes.bool.isRequired,\n    graticuleLineWidth: PropTypes.number.isRequired,\n    graticuleLineColor: PropTypes.string.isRequired,\n\n    isInteractive: PropTypes.bool.isRequired,\n    onMouseEnter: PropTypes.func.isRequired,\n    onMouseMove: PropTypes.func.isRequired,\n    onMouseLeave: PropTypes.func.isRequired,\n    onClick: PropTypes.func.isRequired,\n    tooltip: PropTypes.any,\n\n    layers: PropTypes.arrayOf(\n        PropTypes.oneOfType([PropTypes.oneOf(['graticule', 'features']), PropTypes.func])\n    ).isRequired,\n}\n\nexport const GeoMapPropTypes = {\n    ...commonPropTypes,\n    role: PropTypes.string.isRequired,\n}\n\nexport const GeoMapCanvasPropTypes = {\n    pixelRatio: PropTypes.number.isRequired,\n    ...commonPropTypes,\n}\n\nconst commonChoroplethPropTypes = {\n    data: PropTypes.arrayOf(PropTypes.object).isRequired,\n    match: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    valueFormat: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    colors: quantizeColorScalePropType.isRequired,\n    domain: PropTypes.arrayOf(PropTypes.number).isRequired,\n    unknownColor: PropTypes.string.isRequired,\n    layers: PropTypes.arrayOf(\n        PropTypes.oneOfType([PropTypes.oneOf(['graticule', 'features', 'legends']), PropTypes.func])\n    ).isRequired,\n}\n\nexport const ChoroplethPropTypes = {\n    ...GeoMapPropTypes,\n    ...commonChoroplethPropTypes,\n    role: PropTypes.string.isRequired,\n}\n\nexport const ChoroplethCanvasPropTypes = {\n    ...GeoMapCanvasPropTypes,\n    ...commonChoroplethPropTypes,\n}\n\nconst commonDefaultProps = {\n    projectionType: 'mercator',\n    projectionScale: 100,\n    projectionTranslation: [0.5, 0.5],\n    projectionRotation: [0, 0, 0],\n\n    enableGraticule: false,\n    graticuleLineWidth: 0.5,\n    graticuleLineColor: '#999999',\n\n    fillColor: '#dddddd',\n    borderWidth: 0,\n    borderColor: '#000000',\n\n    isInteractive: true,\n    onMouseEnter: () => {},\n    onMouseLeave: () => {},\n    onMouseMove: () => {},\n    onClick: () => {},\n\n    layers: ['graticule', 'features'],\n    legends: [],\n\n    fill: [],\n    defs: [],\n}\n\nexport const GeoMapDefaultProps = {\n    ...commonDefaultProps,\n    role: 'img',\n}\n\nexport const GeoMapCanvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n\nconst commonChoroplethDefaultProps = {\n    match: 'id',\n    label: 'id',\n    value: 'value',\n    colors: 'PuBuGn',\n    unknownColor: '#999',\n    tooltip: ChoroplethTooltip,\n    layers: ['graticule', 'features', 'legends'],\n}\n\nexport const ChoroplethDefaultProps = {\n    ...GeoMapDefaultProps,\n    ...commonChoroplethDefaultProps,\n    role: 'img',\n}\n\nexport const ChoroplethCanvasDefaultProps = {\n    ...GeoMapCanvasDefaultProps,\n    ...commonChoroplethDefaultProps,\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\n\nconst GeoGraticule = memo(({ path, graticule, lineWidth, lineColor }) => {\n    return <path fill=\"none\" strokeWidth={lineWidth} stroke={lineColor} d={path(graticule())} />\n})\n\nGeoGraticule.propTypes = {\n    path: PropTypes.func.isRequired,\n    graticule: PropTypes.func.isRequired,\n    lineWidth: PropTypes.number.isRequired,\n    lineColor: PropTypes.string.isRequired,\n}\n\nGeoGraticule.displayName = 'GeoGraticule'\n\nexport default GeoGraticule\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\n\nconst GeoMapFeature = memo(\n    ({\n        feature,\n        path,\n        fillColor,\n        borderWidth,\n        borderColor,\n        onClick,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n    }) => {\n        return (\n            <path\n                key={feature.id}\n                fill={feature?.fill ?? fillColor}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                strokeLinejoin=\"bevel\"\n                d={path(feature)}\n                onMouseEnter={event => onMouseEnter(feature, event)}\n                onMouseMove={event => onMouseMove(feature, event)}\n                onMouseLeave={event => onMouseLeave(feature, event)}\n                onClick={event => onClick(feature, event)}\n            />\n        )\n    }\n)\n\nGeoMapFeature.propTypes = {\n    feature: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        type: PropTypes.oneOf(['Feature']).isRequired,\n        properties: PropTypes.object,\n        geometry: PropTypes.object.isRequired,\n    }).isRequired,\n    path: PropTypes.func.isRequired,\n\n    fillColor: PropTypes.string.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: PropTypes.string.isRequired,\n\n    onMouseEnter: PropTypes.func.isRequired,\n    onMouseMove: PropTypes.func.isRequired,\n    onMouseLeave: PropTypes.func.isRequired,\n    onClick: PropTypes.func.isRequired,\n}\n\nGeoMapFeature.displayName = 'GeoMapFeature'\n\nexport default GeoMapFeature\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { Fragment, useCallback, memo } from 'react'\nimport { SvgWrapper, withContainer, useDimensions, useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { GeoMapPropTypes } from './props'\nimport GeoGraticule from './GeoGraticule'\nimport GeoMapFeature from './GeoMapFeature'\nimport { useGeoMap } from './hooks'\n\nconst GeoMap = memo(props => {\n    const {\n        width,\n        height,\n        margin: partialMargin,\n        features,\n        layers = ['graticule', 'features'],\n        projectionType = 'mercator',\n        projectionScale = 100,\n        projectionTranslation = [0.5, 0.5],\n        projectionRotation = [0, 0, 0],\n        fillColor = '#dddddd',\n        borderWidth = 0,\n        borderColor = '#000000',\n        enableGraticule = false,\n        graticuleLineWidth = 0.5,\n        graticuleLineColor = '#999999',\n        isInteractive = true,\n        onClick = () => {},\n        tooltip: Tooltip,\n        role = 'img',\n    } = props\n    const { margin, outerWidth, outerHeight } = useDimensions(width, height, partialMargin)\n    const { graticule, path, getFillColor, getBorderWidth, getBorderColor } = useGeoMap({\n        width,\n        height,\n        projectionType,\n        projectionScale,\n        projectionTranslation,\n        projectionRotation,\n        fillColor,\n        borderWidth,\n        borderColor,\n    })\n\n    const theme = useTheme()\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleClick = useCallback(\n        (feature, event) => isInteractive && onClick && onClick(feature, event),\n        [isInteractive, onClick]\n    )\n    const handleMouseEnter = useCallback(\n        (feature, event) =>\n            isInteractive && Tooltip && showTooltipFromEvent(<Tooltip feature={feature} />, event),\n        [isInteractive, showTooltipFromEvent, Tooltip]\n    )\n    const handleMouseMove = useCallback(\n        (feature, event) =>\n            isInteractive && Tooltip && showTooltipFromEvent(<Tooltip feature={feature} />, event),\n        [isInteractive, showTooltipFromEvent, Tooltip]\n    )\n    const handleMouseLeave = useCallback(\n        () => isInteractive && hideTooltip(),\n        [isInteractive, hideTooltip]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            theme={theme}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layer === 'graticule') {\n                    if (enableGraticule !== true) return null\n\n                    return (\n                        <GeoGraticule\n                            key=\"graticule\"\n                            path={path}\n                            graticule={graticule}\n                            lineWidth={graticuleLineWidth}\n                            lineColor={graticuleLineColor}\n                        />\n                    )\n                }\n                if (layer === 'features') {\n                    return (\n                        <Fragment key=\"features\">\n                            {features.map(feature => (\n                                <GeoMapFeature\n                                    key={feature.id}\n                                    feature={feature}\n                                    path={path}\n                                    fillColor={getFillColor(feature)}\n                                    borderWidth={getBorderWidth(feature)}\n                                    borderColor={getBorderColor(feature)}\n                                    onMouseEnter={handleMouseEnter}\n                                    onMouseMove={handleMouseMove}\n                                    onMouseLeave={handleMouseLeave}\n                                    onClick={handleClick}\n                                />\n                            ))}\n                        </Fragment>\n                    )\n                }\n\n                return <Fragment key={i}>{layer(props)}</Fragment>\n            })}\n        </SvgWrapper>\n    )\n})\n\nGeoMap.displayName = 'GeoMap'\nGeoMap.propTypes = GeoMapPropTypes\n\nexport default withContainer(GeoMap)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport GeoMap from './GeoMap'\n\nconst ResponsiveGeoMap = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <GeoMap width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveGeoMap\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo, useRef, useEffect, useCallback } from 'react'\nimport { geoContains } from 'd3-geo'\nimport { getRelativeCursor, withContainer, useDimensions, useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { GeoMapCanvasPropTypes } from './props'\nimport { useGeoMap } from './hooks'\n\nconst getFeatureFromMouseEvent = (event, el, features, projection) => {\n    const [x, y] = getRelativeCursor(el, event)\n\n    return features.find(f => geoContains(f, projection.invert([x, y])))\n}\n\nconst GeoMapCanvas = memo(props => {\n    const {\n        width,\n        height,\n        margin: partialMargin,\n        pixelRatio = typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n        features,\n        layers,\n\n        projectionType = 'mercator',\n        projectionScale = 100,\n        projectionTranslation = [0.5, 0.5],\n        projectionRotation = [0, 0, 0],\n\n        fillColor = '#dddddd',\n        borderWidth = 0,\n        borderColor = '#000000',\n\n        enableGraticule = false,\n        graticuleLineWidth = 0.5,\n        graticuleLineColor = '#999999',\n\n        isInteractive = true,\n        onClick = () => {},\n        onMouseMove = () => {},\n        tooltip: Tooltip,\n    } = props\n\n    const canvasEl = useRef(null)\n    const theme = useTheme()\n    const { margin, outerWidth, outerHeight } = useDimensions(width, height, partialMargin)\n    const { projection, graticule, path, getFillColor, getBorderWidth, getBorderColor } = useGeoMap(\n        {\n            width,\n            height,\n            projectionType,\n            projectionScale,\n            projectionTranslation,\n            projectionRotation,\n            fillColor,\n            borderWidth,\n            borderColor,\n        }\n    )\n\n    useEffect(() => {\n        if (!canvasEl) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        path.context(ctx)\n\n        layers.forEach(layer => {\n            if (layer === 'graticule') {\n                if (enableGraticule === true) {\n                    ctx.lineWidth = graticuleLineWidth\n                    ctx.strokeStyle = graticuleLineColor\n                    ctx.beginPath()\n                    path(graticule())\n                    ctx.stroke()\n                }\n            } else if (layer === 'features') {\n                features.forEach(feature => {\n                    ctx.beginPath()\n                    path(feature)\n                    ctx.fillStyle = getFillColor(feature)\n                    ctx.fill()\n\n                    const borderWidth = getBorderWidth(feature)\n                    if (borderWidth > 0) {\n                        ctx.strokeStyle = getBorderColor(feature)\n                        ctx.lineWidth = borderWidth\n                        ctx.stroke()\n                    }\n                })\n            } else {\n                layer(ctx, props)\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        margin,\n        pixelRatio,\n        theme,\n        path,\n        graticule,\n        getFillColor,\n        getBorderWidth,\n        getBorderColor,\n        features,\n        layers,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleMouseMove = useCallback(\n        event => {\n            if (!isInteractive || !Tooltip) return\n\n            const feature = getFeatureFromMouseEvent(event, canvasEl.current, features, projection)\n            if (feature) {\n                showTooltipFromEvent(<Tooltip feature={feature} />, event)\n            } else {\n                hideTooltip()\n            }\n            onMouseMove && onMouseMove(feature || null, event)\n        },\n        [showTooltipFromEvent, hideTooltip, isInteractive, Tooltip, canvasEl, features, projection]\n    )\n    const handleMouseLeave = useCallback(\n        () => isInteractive && hideTooltip(),\n        [isInteractive, hideTooltip]\n    )\n    const handleClick = useCallback(\n        event => {\n            if (!isInteractive || !onClick) return\n\n            const feature = getFeatureFromMouseEvent(event, canvasEl.current, features, projection)\n            if (feature) {\n                onClick(feature, event)\n            }\n        },\n        [isInteractive, canvasEl, features, projection, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n        />\n    )\n})\n\nGeoMapCanvas.displatName = 'GeoMapCanvas'\nGeoMapCanvas.propTypes = GeoMapCanvasPropTypes\n\nexport default withContainer(GeoMapCanvas)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport GeoMapCanvas from './GeoMapCanvas'\n\nconst ResponsiveGeoMapCanvas = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <GeoMapCanvas width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveGeoMapCanvas\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo, Fragment, useCallback } from 'react'\nimport { SvgWrapper, withContainer, useDimensions, useTheme, bindDefs } from '@nivo/core'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ChoroplethPropTypes } from './props'\nimport GeoGraticule from './GeoGraticule'\nimport GeoMapFeature from './GeoMapFeature'\nimport { useGeoMap, useChoropleth } from './hooks'\nimport ChoroplethTooltip from './ChoroplethTooltip'\n\nconst Choropleth = memo(props => {\n    const {\n        width,\n        height,\n        margin: partialMargin,\n        features,\n        data,\n        match = 'id',\n        label = 'id',\n        value = 'value',\n        valueFormat,\n        projectionType = 'mercator',\n        projectionScale = 100,\n        projectionTranslation = [0.5, 0.5],\n        projectionRotation = [0, 0, 0],\n        colors = 'PuBuGn',\n        domain,\n        unknownColor = '#999',\n        borderWidth = 0,\n        borderColor = '#000000',\n        enableGraticule = false,\n        graticuleLineWidth = 0.5,\n        graticuleLineColor = '#999999',\n        layers = ['graticule', 'features', 'legends'],\n        legends = [],\n        isInteractive = true,\n        onClick = () => {},\n        tooltip: Tooltip = ChoroplethTooltip,\n        role = 'img',\n        defs = [],\n        fill = [],\n    } = props\n\n    const { margin, outerWidth, outerHeight } = useDimensions(width, height, partialMargin)\n    const { graticule, path, getBorderWidth, getBorderColor } = useGeoMap({\n        width,\n        height,\n        projectionType,\n        projectionScale,\n        projectionTranslation,\n        projectionRotation,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fillColor: () => {},\n        borderWidth,\n        borderColor,\n    })\n    const { getFillColor, boundFeatures, legendData } = useChoropleth({\n        features,\n        data,\n        match,\n        label,\n        value,\n        valueFormat,\n        colors,\n        unknownColor,\n        domain,\n    })\n\n    const theme = useTheme()\n\n    const boundDefs = bindDefs(defs, boundFeatures, fill, {\n        dataKey: 'data',\n        targetKey: 'fill',\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleClick = useCallback(\n        (feature, event) => isInteractive && onClick && onClick(feature, event),\n        [isInteractive, onClick]\n    )\n    const handleMouseEnter = useCallback(\n        (feature, event) =>\n            isInteractive && Tooltip && showTooltipFromEvent(<Tooltip feature={feature} />, event),\n        [isInteractive, showTooltipFromEvent, Tooltip]\n    )\n    const handleMouseMove = useCallback(\n        (feature, event) =>\n            isInteractive && Tooltip && showTooltipFromEvent(<Tooltip feature={feature} />, event),\n        [isInteractive, showTooltipFromEvent, Tooltip]\n    )\n    const handleMouseLeave = useCallback(\n        () => isInteractive && hideTooltip(),\n        [isInteractive, hideTooltip]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            theme={theme}\n            defs={boundDefs}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layer === 'graticule') {\n                    if (enableGraticule !== true) return null\n\n                    return (\n                        <GeoGraticule\n                            key=\"graticule\"\n                            path={path}\n                            graticule={graticule}\n                            lineWidth={graticuleLineWidth}\n                            lineColor={graticuleLineColor}\n                        />\n                    )\n                }\n                if (layer === 'features') {\n                    return (\n                        <Fragment key=\"features\">\n                            {boundFeatures.map(feature => (\n                                <GeoMapFeature\n                                    key={feature.id}\n                                    feature={feature}\n                                    path={path}\n                                    fillColor={getFillColor(feature)}\n                                    borderWidth={getBorderWidth(feature)}\n                                    borderColor={getBorderColor(feature)}\n                                    onMouseEnter={handleMouseEnter}\n                                    onMouseMove={handleMouseMove}\n                                    onMouseLeave={handleMouseLeave}\n                                    onClick={handleClick}\n                                />\n                            ))}\n                        </Fragment>\n                    )\n                }\n                if (layer === 'legends') {\n                    return legends.map((legend, i) => {\n                        return (\n                            <BoxLegendSvg\n                                key={i}\n                                containerWidth={width}\n                                containerHeight={height}\n                                data={legendData}\n                                {...legend}\n                            />\n                        )\n                    })\n                }\n\n                return <Fragment key={i}>{layer({})}</Fragment>\n            })}\n        </SvgWrapper>\n    )\n})\n\nChoropleth.displayName = 'Choropleth'\nChoropleth.propTypes = ChoroplethPropTypes\n\nexport default withContainer(Choropleth)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport Choropleth from './Choropleth'\n\nconst ResponsiveChoropleth = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Choropleth width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveChoropleth\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo, useRef, useEffect, useCallback } from 'react'\nimport { geoContains } from 'd3-geo'\nimport { getRelativeCursor, withContainer, useDimensions, useTheme } from '@nivo/core'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ChoroplethCanvasPropTypes } from './props'\nimport { useGeoMap, useChoropleth } from './hooks'\nimport ChoroplethTooltip from './ChoroplethTooltip'\n\nconst getFeatureFromMouseEvent = (event, el, features, projection) => {\n    const [x, y] = getRelativeCursor(el, event)\n\n    return features.find(f => geoContains(f, projection.invert([x, y])))\n}\n\nconst ChoroplethCanvas = memo(props => {\n    const {\n        width,\n        height,\n        margin: partialMargin,\n        pixelRatio = typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n        features,\n        data,\n        match = 'id',\n        label = 'id',\n        value = 'value',\n        valueFormat,\n        projectionType = 'mercator',\n        projectionScale = 100,\n        projectionTranslation = [0.5, 0.5],\n        projectionRotation = [0, 0, 0],\n        colors = 'PuBuGn',\n        domain,\n        unknownColor = '#999',\n        borderWidth = 0,\n        borderColor = '#000000',\n        enableGraticule = false,\n        graticuleLineWidth = 0.5,\n        graticuleLineColor = '#999999',\n        layers = ['graticule', 'features', 'legends'],\n        legends = [],\n        isInteractive = true,\n        onClick = () => {},\n        onMouseMove = () => {},\n        tooltip: Tooltip = ChoroplethTooltip,\n    } = props\n    const canvasEl = useRef(null)\n    const theme = useTheme()\n    const { margin, outerWidth, outerHeight } = useDimensions(width, height, partialMargin)\n    const { projection, graticule, path, getBorderWidth, getBorderColor } = useGeoMap({\n        width,\n        height,\n        projectionType,\n        projectionScale,\n        projectionTranslation,\n        projectionRotation,\n        fillColor: () => {},\n        borderWidth,\n        borderColor,\n    })\n    const { getFillColor, boundFeatures, legendData } = useChoropleth({\n        features,\n        data,\n        match,\n        label,\n        value,\n        valueFormat,\n        colors,\n        unknownColor,\n        domain,\n    })\n\n    useEffect(() => {\n        if (!canvasEl) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        path.context(ctx)\n\n        layers.forEach(layer => {\n            if (layer === 'graticule') {\n                if (enableGraticule === true) {\n                    ctx.lineWidth = graticuleLineWidth\n                    ctx.strokeStyle = graticuleLineColor\n                    ctx.beginPath()\n                    path(graticule())\n                    ctx.stroke()\n                }\n            } else if (layer === 'features') {\n                boundFeatures.forEach(feature => {\n                    ctx.beginPath()\n                    path(feature)\n                    ctx.fillStyle = getFillColor(feature)\n                    ctx.fill()\n\n                    const borderWidth = getBorderWidth(feature)\n                    if (borderWidth > 0) {\n                        ctx.strokeStyle = getBorderColor(feature)\n                        ctx.lineWidth = borderWidth\n                        ctx.stroke()\n                    }\n                })\n            } else if (layer === 'legends') {\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legendData,\n                        containerWidth: width,\n                        containerHeight: height,\n                        theme,\n                    })\n                })\n            } else {\n                // layer(ctx, {})\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        margin,\n        pixelRatio,\n        theme,\n        path,\n        graticule,\n        getFillColor,\n        getBorderWidth,\n        getBorderColor,\n        boundFeatures,\n        legends,\n        layers,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleMouseMove = useCallback(\n        event => {\n            if (!isInteractive || !Tooltip) return\n\n            const feature = getFeatureFromMouseEvent(\n                event,\n                canvasEl.current,\n                boundFeatures,\n                projection\n            )\n            if (feature) {\n                showTooltipFromEvent(<Tooltip feature={feature} />, event)\n            } else {\n                hideTooltip()\n            }\n            onMouseMove && onMouseMove(feature || null, event)\n        },\n        [\n            showTooltipFromEvent,\n            hideTooltip,\n            isInteractive,\n            Tooltip,\n            canvasEl,\n            boundFeatures,\n            projection,\n        ]\n    )\n    const handleMouseLeave = useCallback(\n        () => isInteractive && hideTooltip(),\n        [isInteractive, hideTooltip]\n    )\n    const handleClick = useCallback(\n        event => {\n            if (!isInteractive || !onClick) return\n\n            const feature = getFeatureFromMouseEvent(\n                event,\n                canvasEl.current,\n                boundFeatures,\n                projection\n            )\n            if (feature) {\n                onClick(feature, event)\n            }\n        },\n        [isInteractive, canvasEl, boundFeatures, projection, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n        />\n    )\n})\n\nChoroplethCanvas.displayName = 'ChoroplethCanvas'\nChoroplethCanvas.propTypes = ChoroplethCanvasPropTypes\n\nexport default withContainer(ChoroplethCanvas)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport ChoroplethCanvas from './ChoroplethCanvas'\n\nconst ResponsiveChoroplethCanvas = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <ChoroplethCanvas width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveChoroplethCanvas\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}