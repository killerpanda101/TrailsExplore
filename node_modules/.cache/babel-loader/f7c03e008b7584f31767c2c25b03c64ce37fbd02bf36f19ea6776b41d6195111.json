{"ast":null,"code":"import { Axes as e, Grid as a, renderGridLinesToCanvas as i, renderAxesToCanvas as t } from \"@nivo/axes\";\nimport { useAnnotations as n, Annotation as r, useComputedAnnotations as l, renderAnnotationsToCanvas as o } from \"@nivo/annotations\";\nimport { jsx as d, Fragment as u, jsxs as c } from \"react/jsx-runtime\";\nimport { BoxLegendSvg as s, renderLegendToCanvas as h } from \"@nivo/legends\";\nimport { useTheme as b, getPropertyAccessor as g, usePropertyAccessor as v, useValueFormatter as f, Container as m, useMotionConfig as p, useDimensions as x, bindDefs as y, CartesianMarkers as S, SvgWrapper as k, getRelativeCursor as L, isCursorInRect as w, ResponsiveWrapper as C } from \"@nivo/core\";\nimport { useMemo as V, createElement as W, useCallback as M, useState as B, Fragment as I, forwardRef as T, useRef as R, useEffect as H } from \"react\";\nimport { animated as P, to as E, useTransition as F } from \"@react-spring/web\";\nimport { useTooltip as X, BasicTooltip as Y } from \"@nivo/tooltip\";\nimport { useOrdinalColorScale as D, useInheritedColor as O } from \"@nivo/colors\";\nimport { computeScale as G } from \"@nivo/scales\";\nimport { stack as A, stackOffsetDiverging as j } from \"d3-shape\";\nimport q from \"lodash/uniqBy\";\nfunction z() {\n  return z = Object.assign ? Object.assign.bind() : function (e) {\n    for (var a = 1; a < arguments.length; a++) {\n      var i = arguments[a];\n      for (var t in i) Object.prototype.hasOwnProperty.call(i, t) && (e[t] = i[t]);\n    }\n    return e;\n  }, z.apply(this, arguments);\n}\nfunction K(e, a) {\n  if (null == e) return {};\n  var i,\n    t,\n    n = {},\n    r = Object.keys(e);\n  for (t = 0; t < r.length; t++) i = r[t], a.indexOf(i) >= 0 || (n[i] = e[i]);\n  return n;\n}\nvar N,\n  J = function (e) {\n    var a = e.bars,\n      i = e.annotations,\n      t = n({\n        data: a,\n        annotations: i,\n        getPosition: function (e) {\n          return {\n            x: e.x + e.width / 2,\n            y: e.y + e.height / 2\n          };\n        },\n        getDimensions: function (e) {\n          var a = e.height,\n            i = e.width;\n          return {\n            width: i,\n            height: a,\n            size: Math.max(i, a)\n          };\n        }\n      });\n    return d(u, {\n      children: t.map(function (e, a) {\n        return d(r, z({}, e), a);\n      })\n    });\n  },\n  Q = function (e) {\n    var a = e.width,\n      i = e.height,\n      t = e.legends,\n      n = e.toggleSerie;\n    return d(u, {\n      children: t.map(function (e, t) {\n        var r,\n          l = e[0],\n          o = e[1];\n        return d(s, z({}, l, {\n          containerWidth: a,\n          containerHeight: i,\n          data: null != (r = l.data) ? r : o,\n          toggleSerie: l.toggleSerie && \"keys\" === l.dataFrom ? n : void 0\n        }), t);\n      })\n    });\n  },\n  U = [\"data\"],\n  Z = function (e) {\n    var a,\n      i = e.bar,\n      t = i.data,\n      n = K(i, U),\n      r = e.style,\n      l = r.borderColor,\n      o = r.color,\n      u = r.height,\n      s = r.labelColor,\n      h = r.labelOpacity,\n      g = r.labelX,\n      v = r.labelY,\n      f = r.transform,\n      m = r.width,\n      p = e.borderRadius,\n      x = e.borderWidth,\n      y = e.label,\n      S = e.shouldRenderLabel,\n      k = e.isInteractive,\n      L = e.onClick,\n      w = e.onMouseEnter,\n      C = e.onMouseLeave,\n      B = e.tooltip,\n      I = e.isFocusable,\n      T = e.ariaLabel,\n      R = e.ariaLabelledBy,\n      H = e.ariaDescribedBy,\n      F = b(),\n      Y = X(),\n      D = Y.showTooltipFromEvent,\n      O = Y.showTooltipAt,\n      G = Y.hideTooltip,\n      A = V(function () {\n        return function () {\n          return W(B, z({}, n, t));\n        };\n      }, [B, n, t]),\n      j = M(function (e) {\n        null == L || L(z({\n          color: n.color\n        }, t), e);\n      }, [n, t, L]),\n      q = M(function (e) {\n        return D(A(), e);\n      }, [D, A]),\n      N = M(function (e) {\n        null == w || w(t, e), D(A(), e);\n      }, [t, w, D, A]),\n      J = M(function (e) {\n        null == C || C(t, e), G();\n      }, [t, G, C]),\n      Q = M(function () {\n        O(A(), [n.absX + n.width / 2, n.absY]);\n      }, [O, A, n]),\n      Z = M(function () {\n        G();\n      }, [G]);\n    return c(P.g, {\n      transform: f,\n      children: [d(P.rect, {\n        width: E(m, function (e) {\n          return Math.max(e, 0);\n        }),\n        height: E(u, function (e) {\n          return Math.max(e, 0);\n        }),\n        rx: p,\n        ry: p,\n        fill: null != (a = t.fill) ? a : o,\n        strokeWidth: x,\n        stroke: l,\n        focusable: I,\n        tabIndex: I ? 0 : void 0,\n        \"aria-label\": T ? T(t) : void 0,\n        \"aria-labelledby\": R ? R(t) : void 0,\n        \"aria-describedby\": H ? H(t) : void 0,\n        onMouseEnter: k ? N : void 0,\n        onMouseMove: k ? q : void 0,\n        onMouseLeave: k ? J : void 0,\n        onClick: k ? j : void 0,\n        onFocus: k && I ? Q : void 0,\n        onBlur: k && I ? Z : void 0\n      }), S && d(P.text, {\n        x: g,\n        y: v,\n        textAnchor: \"middle\",\n        dominantBaseline: \"central\",\n        fillOpacity: h,\n        style: z({}, F.labels.text, {\n          pointerEvents: \"none\",\n          fill: s\n        }),\n        children: y\n      })]\n    });\n  },\n  $ = [\"color\", \"label\"],\n  _ = function (e) {\n    var a = e.color,\n      i = e.label,\n      t = K(e, $);\n    return d(Y, {\n      id: i,\n      value: t.formattedValue,\n      enableChip: !0,\n      color: a\n    });\n  },\n  ee = {\n    indexBy: \"id\",\n    keys: [\"value\"],\n    groupMode: \"stacked\",\n    layout: \"vertical\",\n    reverse: !1,\n    minValue: \"auto\",\n    maxValue: \"auto\",\n    valueScale: {\n      type: \"linear\"\n    },\n    indexScale: {\n      type: \"band\",\n      round: !0\n    },\n    padding: .1,\n    innerPadding: 0,\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: !1,\n    enableGridY: !0,\n    enableLabel: !0,\n    label: \"formattedValue\",\n    labelSkipWidth: 0,\n    labelSkipHeight: 0,\n    labelTextColor: {\n      from: \"theme\",\n      theme: \"labels.text.fill\"\n    },\n    colorBy: \"id\",\n    colors: {\n      scheme: \"nivo\"\n    },\n    borderRadius: 0,\n    borderWidth: 0,\n    borderColor: {\n      from: \"color\"\n    },\n    isInteractive: !0,\n    tooltip: _,\n    tooltipLabel: function (e) {\n      return e.id + \" - \" + e.indexValue;\n    },\n    legends: [],\n    initialHiddenIds: [],\n    annotations: [],\n    markers: []\n  },\n  ae = z({}, ee, {\n    layers: [\"grid\", \"axes\", \"bars\", \"markers\", \"legends\", \"annotations\"],\n    barComponent: Z,\n    defs: [],\n    fill: [],\n    animate: !0,\n    motionConfig: \"default\",\n    role: \"img\",\n    isFocusable: !1\n  }),\n  ie = z({}, ee, {\n    layers: [\"grid\", \"axes\", \"bars\", \"legends\", \"annotations\"],\n    pixelRatio: \"undefined\" != typeof window && null != (N = window.devicePixelRatio) ? N : 1\n  }),\n  te = function (e, a, i, t, n, r) {\n    return G(t, {\n      all: e.map(a),\n      min: 0,\n      max: 0\n    }, n, r).padding(i);\n  },\n  ne = function (e, a) {\n    return e.map(function (e) {\n      return z({}, a.reduce(function (e, a) {\n        return e[a] = null, e;\n      }, {}), e);\n    });\n  },\n  re = function (e) {\n    return Object.keys(e).reduce(function (a, i) {\n      return e[i] && (a[i] = e[i]), a;\n    }, {});\n  },\n  le = function (e) {\n    return [e, Number(e)];\n  },\n  oe = [\"layout\", \"minValue\", \"maxValue\", \"reverse\", \"width\", \"height\", \"padding\", \"innerPadding\", \"valueScale\", \"indexScale\", \"hiddenIds\"],\n  de = function (e, a) {\n    return e > a;\n  },\n  ue = function (e, a) {\n    return e < a;\n  },\n  ce = function (e, a) {\n    return Array.from(\" \".repeat(a - e), function (a, i) {\n      return e + i;\n    });\n  },\n  se = function (e) {\n    return de(e, 0) ? 0 : e;\n  },\n  he = function (e, a, i, t) {\n    var n = e.data,\n      r = e.formatValue,\n      l = e.getColor,\n      o = e.getIndex,\n      d = e.getTooltipLabel,\n      u = e.innerPadding,\n      c = void 0 === u ? 0 : u,\n      s = e.keys,\n      h = e.xScale,\n      b = e.yScale,\n      g = e.margin,\n      v = i ? ue : de,\n      f = n.map(re),\n      m = [];\n    return s.forEach(function (e, i) {\n      return ce(0, h.domain().length).forEach(function (u) {\n        var s,\n          p,\n          x,\n          y = le(n[u][e]),\n          S = y[0],\n          k = y[1],\n          L = o(n[u]),\n          w = (null != (s = h(L)) ? s : 0) + a * i + c * i,\n          C = v(p = k, 0) ? null != (x = b(p)) ? x : 0 : t,\n          V = function (e, a) {\n            var i;\n            return v(e, 0) ? t - a : (null != (i = b(e)) ? i : 0) - t;\n          }(k, C),\n          W = {\n            id: e,\n            value: null === S ? S : k,\n            formattedValue: r(k),\n            hidden: !1,\n            index: u,\n            indexValue: L,\n            data: f[u]\n          };\n        m.push({\n          key: e + \".\" + W.indexValue,\n          index: m.length,\n          data: W,\n          x: w,\n          y: C,\n          absX: g.left + w,\n          absY: g.top + C,\n          width: a,\n          height: V,\n          color: l(W),\n          label: d(W)\n        });\n      });\n    }), m;\n  },\n  be = function (e, a, i, t) {\n    var n = e.data,\n      r = e.formatValue,\n      l = e.getIndex,\n      o = e.getColor,\n      d = e.getTooltipLabel,\n      u = e.keys,\n      c = e.innerPadding,\n      s = void 0 === c ? 0 : c,\n      h = e.xScale,\n      b = e.yScale,\n      g = e.margin,\n      v = i ? ue : de,\n      f = n.map(re),\n      m = [];\n    return u.forEach(function (e, i) {\n      return ce(0, b.domain().length).forEach(function (u) {\n        var c,\n          p,\n          x,\n          y = le(n[u][e]),\n          S = y[0],\n          k = y[1],\n          L = l(n[u]),\n          w = v(p = k, 0) ? t : null != (x = h(p)) ? x : 0,\n          C = (null != (c = b(L)) ? c : 0) + a * i + s * i,\n          V = function (e, a) {\n            var i;\n            return v(e, 0) ? (null != (i = h(e)) ? i : 0) - t : t - a;\n          }(k, w),\n          W = {\n            id: e,\n            value: null === S ? S : k,\n            formattedValue: r(k),\n            hidden: !1,\n            index: u,\n            indexValue: L,\n            data: f[u]\n          };\n        m.push({\n          key: e + \".\" + W.indexValue,\n          index: m.length,\n          data: W,\n          x: w,\n          y: C,\n          absX: g.left + w,\n          absY: g.top + C,\n          width: V,\n          height: a,\n          color: o(W),\n          label: d(W)\n        });\n      });\n    }), m;\n  },\n  ge = function (e) {\n    var a,\n      i,\n      t = e.layout,\n      n = e.minValue,\n      r = e.maxValue,\n      l = e.reverse,\n      o = e.width,\n      d = e.height,\n      u = e.padding,\n      c = void 0 === u ? 0 : u,\n      s = e.innerPadding,\n      h = void 0 === s ? 0 : s,\n      b = e.valueScale,\n      g = e.indexScale,\n      v = e.hiddenIds,\n      f = void 0 === v ? [] : v,\n      m = K(e, oe),\n      p = m.keys.filter(function (e) {\n        return !f.includes(e);\n      }),\n      x = ne(m.data, p),\n      y = \"vertical\" === t ? [\"y\", \"x\", o] : [\"x\", \"y\", d],\n      S = y[0],\n      k = y[1],\n      L = y[2],\n      w = te(x, m.getIndex, c, g, L, k),\n      C = z({\n        max: r,\n        min: n,\n        reverse: l\n      }, b),\n      V = \"auto\" === C.min ? se : function (e) {\n        return e;\n      },\n      W = x.reduce(function (e, a) {\n        return [].concat(e, p.map(function (e) {\n          return a[e];\n        }));\n      }, []).filter(Boolean),\n      M = V(Math.min.apply(Math, W)),\n      B = (i = Math.max.apply(Math, W), isFinite(i) ? i : 0),\n      I = G(C, {\n        all: W,\n        min: M,\n        max: B\n      }, \"x\" === S ? o : d, S),\n      T = \"vertical\" === t ? [w, I] : [I, w],\n      R = T[0],\n      H = T[1],\n      P = (w.bandwidth() - h * (p.length - 1)) / p.length,\n      E = [z({}, m, {\n        data: x,\n        keys: p,\n        innerPadding: h,\n        xScale: R,\n        yScale: H\n      }), P, C.reverse, null != (a = I(0)) ? a : 0];\n    return {\n      xScale: R,\n      yScale: H,\n      bars: P > 0 ? \"vertical\" === t ? he.apply(void 0, E) : be.apply(void 0, E) : []\n    };\n  },\n  ve = [\"data\", \"layout\", \"minValue\", \"maxValue\", \"reverse\", \"width\", \"height\", \"padding\", \"valueScale\", \"indexScale\", \"hiddenIds\"],\n  fe = function e(a) {\n    var i;\n    return a.some(Array.isArray) ? e((i = []).concat.apply(i, a)) : a;\n  },\n  me = function (e, a, i) {\n    var t = e.formatValue,\n      n = e.getColor,\n      r = e.getIndex,\n      l = e.getTooltipLabel,\n      o = e.innerPadding,\n      d = e.stackedData,\n      u = e.xScale,\n      c = e.yScale,\n      s = e.margin,\n      h = [];\n    return d.forEach(function (e) {\n      return u.domain().forEach(function (d, b) {\n        var g,\n          v,\n          f = e[b],\n          m = null != (g = u(r(f.data))) ? g : 0,\n          p = (null != (v = function (e) {\n            return c(e[i ? 0 : 1]);\n          }(f)) ? v : 0) + .5 * o,\n          x = function (e, a) {\n            var t;\n            return (null != (t = c(e[i ? 1 : 0])) ? t : 0) - a;\n          }(f, p) - o,\n          y = le(f.data[e.key]),\n          S = y[0],\n          k = y[1],\n          L = {\n            id: e.key,\n            value: null === S ? S : k,\n            formattedValue: t(k),\n            hidden: !1,\n            index: b,\n            indexValue: d,\n            data: re(f.data)\n          };\n        h.push({\n          key: e.key + \".\" + d,\n          index: h.length,\n          data: L,\n          x: m,\n          y: p,\n          absX: s.left + m,\n          absY: s.top + p,\n          width: a,\n          height: x,\n          color: n(L),\n          label: l(L)\n        });\n      });\n    }), h;\n  },\n  pe = function (e, a, i) {\n    var t = e.formatValue,\n      n = e.getColor,\n      r = e.getIndex,\n      l = e.getTooltipLabel,\n      o = e.innerPadding,\n      d = e.stackedData,\n      u = e.xScale,\n      c = e.yScale,\n      s = e.margin,\n      h = [];\n    return d.forEach(function (e) {\n      return c.domain().forEach(function (d, b) {\n        var g,\n          v,\n          f = e[b],\n          m = null != (g = c(r(f.data))) ? g : 0,\n          p = (null != (v = function (e) {\n            return u(e[i ? 1 : 0]);\n          }(f)) ? v : 0) + .5 * o,\n          x = function (e, a) {\n            var t;\n            return (null != (t = u(e[i ? 0 : 1])) ? t : 0) - a;\n          }(f, p) - o,\n          y = le(f.data[e.key]),\n          S = y[0],\n          k = y[1],\n          L = {\n            id: e.key,\n            value: null === S ? S : k,\n            formattedValue: t(k),\n            hidden: !1,\n            index: b,\n            indexValue: d,\n            data: re(f.data)\n          };\n        h.push({\n          key: e.key + \".\" + d,\n          index: h.length,\n          data: L,\n          x: p,\n          y: m,\n          absX: s.left + p,\n          absY: s.top + m,\n          width: x,\n          height: a,\n          color: n(L),\n          label: l(L)\n        });\n      });\n    }), h;\n  },\n  xe = function (e) {\n    var a,\n      i = e.data,\n      t = e.layout,\n      n = e.minValue,\n      r = e.maxValue,\n      l = e.reverse,\n      o = e.width,\n      d = e.height,\n      u = e.padding,\n      c = void 0 === u ? 0 : u,\n      s = e.valueScale,\n      h = e.indexScale,\n      b = e.hiddenIds,\n      g = void 0 === b ? [] : b,\n      v = K(e, ve),\n      f = v.keys.filter(function (e) {\n        return !g.includes(e);\n      }),\n      m = A().keys(f).offset(j)(ne(i, f)),\n      p = \"vertical\" === t ? [\"y\", \"x\", o] : [\"x\", \"y\", d],\n      x = p[0],\n      y = p[1],\n      S = p[2],\n      k = te(i, v.getIndex, c, h, S, y),\n      L = z({\n        max: r,\n        min: n,\n        reverse: l\n      }, s),\n      w = (a = fe(m), \"log\" === s.type ? a.filter(function (e) {\n        return 0 !== e;\n      }) : a),\n      C = Math.min.apply(Math, w),\n      V = Math.max.apply(Math, w),\n      W = G(L, {\n        all: w,\n        min: C,\n        max: V\n      }, \"x\" === x ? o : d, x),\n      M = \"vertical\" === t ? [k, W] : [W, k],\n      B = M[0],\n      I = M[1],\n      T = v.innerPadding > 0 ? v.innerPadding : 0,\n      R = k.bandwidth(),\n      H = [z({}, v, {\n        innerPadding: T,\n        stackedData: m,\n        xScale: B,\n        yScale: I\n      }), R, L.reverse];\n    return {\n      xScale: B,\n      yScale: I,\n      bars: R > 0 ? \"vertical\" === t ? me.apply(void 0, H) : pe.apply(void 0, H) : []\n    };\n  },\n  ye = function (e) {\n    var a = e.bars,\n      i = e.direction,\n      t = e.from,\n      n = e.groupMode,\n      r = e.layout,\n      l = e.legendLabel,\n      o = e.reverse,\n      d = g(null != l ? l : \"indexes\" === t ? \"indexValue\" : \"id\");\n    return \"indexes\" === t ? function (e, a, i) {\n      var t = q(e.map(function (e) {\n        var a, t;\n        return {\n          id: null != (a = e.data.indexValue) ? a : \"\",\n          label: i(e.data),\n          hidden: e.data.hidden,\n          color: null != (t = e.color) ? t : \"#000\"\n        };\n      }), function (e) {\n        return e.id;\n      });\n      return \"horizontal\" === a && t.reverse(), t;\n    }(a, r, d) : function (e, a, i, t, n, r) {\n      var l = q(e.map(function (e) {\n        var a;\n        return {\n          id: e.data.id,\n          label: r(e.data),\n          hidden: e.data.hidden,\n          color: null != (a = e.color) ? a : \"#000\"\n        };\n      }), function (e) {\n        return e.id;\n      });\n      return (\"vertical\" === a && \"stacked\" === t && \"column\" === i && !0 !== n || \"horizontal\" === a && \"stacked\" === t && !0 === n) && l.reverse(), l;\n    }(a, r, i, n, o, d);\n  },\n  Se = function (e) {\n    var a = e.indexBy,\n      i = void 0 === a ? ee.indexBy : a,\n      t = e.keys,\n      n = void 0 === t ? ee.keys : t,\n      r = e.label,\n      l = void 0 === r ? ee.label : r,\n      o = e.tooltipLabel,\n      d = void 0 === o ? ee.tooltipLabel : o,\n      u = e.valueFormat,\n      c = e.colors,\n      s = void 0 === c ? ee.colors : c,\n      h = e.colorBy,\n      g = void 0 === h ? ee.colorBy : h,\n      m = e.borderColor,\n      p = void 0 === m ? ee.borderColor : m,\n      x = e.labelTextColor,\n      y = void 0 === x ? ee.labelTextColor : x,\n      S = e.groupMode,\n      k = void 0 === S ? ee.groupMode : S,\n      L = e.layout,\n      w = void 0 === L ? ee.layout : L,\n      C = e.reverse,\n      W = void 0 === C ? ee.reverse : C,\n      I = e.data,\n      T = e.minValue,\n      R = void 0 === T ? ee.minValue : T,\n      H = e.maxValue,\n      P = void 0 === H ? ee.maxValue : H,\n      E = e.margin,\n      F = e.width,\n      X = e.height,\n      Y = e.padding,\n      G = void 0 === Y ? ee.padding : Y,\n      A = e.innerPadding,\n      j = void 0 === A ? ee.innerPadding : A,\n      q = e.valueScale,\n      K = void 0 === q ? ee.valueScale : q,\n      N = e.indexScale,\n      J = void 0 === N ? ee.indexScale : N,\n      Q = e.initialHiddenIds,\n      U = void 0 === Q ? ee.initialHiddenIds : Q,\n      Z = e.enableLabel,\n      $ = void 0 === Z ? ee.enableLabel : Z,\n      _ = e.labelSkipWidth,\n      ae = void 0 === _ ? ee.labelSkipWidth : _,\n      ie = e.labelSkipHeight,\n      te = void 0 === ie ? ee.labelSkipHeight : ie,\n      ne = e.legends,\n      re = void 0 === ne ? ee.legends : ne,\n      le = e.legendLabel,\n      oe = B(null != U ? U : []),\n      de = oe[0],\n      ue = oe[1],\n      ce = M(function (e) {\n        ue(function (a) {\n          return a.indexOf(e) > -1 ? a.filter(function (a) {\n            return a !== e;\n          }) : [].concat(a, [e]);\n        });\n      }, []),\n      se = v(i),\n      he = v(l),\n      be = v(d),\n      ve = f(u),\n      fe = b(),\n      me = D(s, g),\n      pe = O(p, fe),\n      Se = O(y, fe),\n      ke = (\"grouped\" === k ? ge : xe)({\n        layout: w,\n        reverse: W,\n        data: I,\n        getIndex: se,\n        keys: n,\n        minValue: R,\n        maxValue: P,\n        width: F,\n        height: X,\n        getColor: me,\n        padding: G,\n        innerPadding: j,\n        valueScale: K,\n        indexScale: J,\n        hiddenIds: de,\n        formatValue: ve,\n        getTooltipLabel: be,\n        margin: E\n      }),\n      Le = ke.bars,\n      we = ke.xScale,\n      Ce = ke.yScale,\n      Ve = V(function () {\n        return Le.filter(function (e) {\n          return null !== e.data.value;\n        }).map(function (e, a) {\n          return z({}, e, {\n            index: a\n          });\n        });\n      }, [Le]),\n      We = M(function (e) {\n        var a = e.width,\n          i = e.height;\n        return !!$ && !(ae > 0 && a < ae) && !(te > 0 && i < te);\n      }, [$, ae, te]),\n      Me = V(function () {\n        return n.map(function (e) {\n          var a = Le.find(function (a) {\n            return a.data.id === e;\n          });\n          return z({}, a, {\n            data: z({\n              id: e\n            }, null == a ? void 0 : a.data, {\n              hidden: de.includes(e)\n            })\n          });\n        });\n      }, [de, n, Le]),\n      Be = V(function () {\n        return re.map(function (e) {\n          return [e, ye({\n            bars: \"keys\" === e.dataFrom ? Me : Le,\n            direction: e.direction,\n            from: e.dataFrom,\n            groupMode: k,\n            layout: w,\n            legendLabel: le,\n            reverse: W\n          })];\n        });\n      }, [re, Me, Le, k, w, le, W]);\n    return {\n      bars: Le,\n      barsWithValue: Ve,\n      xScale: we,\n      yScale: Ce,\n      getIndex: se,\n      getLabel: he,\n      getTooltipLabel: be,\n      formatValue: ve,\n      getColor: me,\n      getBorderColor: pe,\n      getLabelColor: Se,\n      shouldRenderBarLabel: We,\n      hiddenIds: de,\n      toggleSerie: ce,\n      legendsWithData: Be\n    };\n  },\n  ke = [\"isInteractive\", \"animate\", \"motionConfig\", \"theme\", \"renderWrapper\"],\n  Le = function (i) {\n    var t = i.data,\n      n = i.indexBy,\n      r = i.keys,\n      l = i.margin,\n      o = i.width,\n      u = i.height,\n      c = i.groupMode,\n      s = i.layout,\n      h = i.reverse,\n      b = i.minValue,\n      g = i.maxValue,\n      v = i.valueScale,\n      f = i.indexScale,\n      m = i.padding,\n      L = i.innerPadding,\n      w = i.axisTop,\n      C = i.axisRight,\n      M = i.axisBottom,\n      B = void 0 === M ? ae.axisBottom : M,\n      T = i.axisLeft,\n      R = void 0 === T ? ae.axisLeft : T,\n      H = i.enableGridX,\n      P = void 0 === H ? ae.enableGridX : H,\n      E = i.enableGridY,\n      X = void 0 === E ? ae.enableGridY : E,\n      Y = i.gridXValues,\n      D = i.gridYValues,\n      O = i.layers,\n      G = void 0 === O ? ae.layers : O,\n      A = i.barComponent,\n      j = void 0 === A ? ae.barComponent : A,\n      q = i.enableLabel,\n      K = void 0 === q ? ae.enableLabel : q,\n      N = i.label,\n      U = i.labelSkipWidth,\n      Z = void 0 === U ? ae.labelSkipWidth : U,\n      $ = i.labelSkipHeight,\n      _ = void 0 === $ ? ae.labelSkipHeight : $,\n      ee = i.labelTextColor,\n      ie = i.markers,\n      te = void 0 === ie ? ae.markers : ie,\n      ne = i.colorBy,\n      re = i.colors,\n      le = i.defs,\n      oe = void 0 === le ? ae.defs : le,\n      de = i.fill,\n      ue = void 0 === de ? ae.fill : de,\n      ce = i.borderRadius,\n      se = void 0 === ce ? ae.borderRadius : ce,\n      he = i.borderWidth,\n      be = void 0 === he ? ae.borderWidth : he,\n      ge = i.borderColor,\n      ve = i.annotations,\n      fe = void 0 === ve ? ae.annotations : ve,\n      me = i.legendLabel,\n      pe = i.tooltipLabel,\n      xe = i.valueFormat,\n      ye = i.isInteractive,\n      ke = void 0 === ye ? ae.isInteractive : ye,\n      Le = i.tooltip,\n      we = void 0 === Le ? ae.tooltip : Le,\n      Ce = i.onClick,\n      Ve = i.onMouseEnter,\n      We = i.onMouseLeave,\n      Me = i.legends,\n      Be = i.role,\n      Ie = void 0 === Be ? ae.role : Be,\n      Te = i.ariaLabel,\n      Re = i.ariaLabelledBy,\n      He = i.ariaDescribedBy,\n      Pe = i.isFocusable,\n      Ee = void 0 === Pe ? ae.isFocusable : Pe,\n      Fe = i.barAriaLabel,\n      Xe = i.barAriaLabelledBy,\n      Ye = i.barAriaDescribedBy,\n      De = i.initialHiddenIds,\n      Oe = p(),\n      Ge = Oe.animate,\n      Ae = Oe.config,\n      je = x(o, u, l),\n      qe = je.outerWidth,\n      ze = je.outerHeight,\n      Ke = je.margin,\n      Ne = je.innerWidth,\n      Je = je.innerHeight,\n      Qe = Se({\n        indexBy: n,\n        label: N,\n        tooltipLabel: pe,\n        valueFormat: xe,\n        colors: re,\n        colorBy: ne,\n        borderColor: ge,\n        labelTextColor: ee,\n        groupMode: c,\n        layout: s,\n        reverse: h,\n        data: t,\n        keys: r,\n        minValue: b,\n        maxValue: g,\n        margin: Ke,\n        width: Ne,\n        height: Je,\n        padding: m,\n        innerPadding: L,\n        valueScale: v,\n        indexScale: f,\n        enableLabel: K,\n        labelSkipWidth: Z,\n        labelSkipHeight: _,\n        legends: Me,\n        legendLabel: me,\n        initialHiddenIds: De\n      }),\n      Ue = Qe.bars,\n      Ze = Qe.barsWithValue,\n      $e = Qe.xScale,\n      _e = Qe.yScale,\n      ea = Qe.getLabel,\n      aa = Qe.getTooltipLabel,\n      ia = Qe.getBorderColor,\n      ta = Qe.getLabelColor,\n      na = Qe.shouldRenderBarLabel,\n      ra = Qe.toggleSerie,\n      la = Qe.legendsWithData,\n      oa = F(Ze, {\n        keys: function (e) {\n          return e.key;\n        },\n        from: function (e) {\n          return z({\n            borderColor: ia(e),\n            color: e.color,\n            height: 0,\n            labelColor: ta(e),\n            labelOpacity: 0,\n            labelX: e.width / 2,\n            labelY: e.height / 2,\n            transform: \"translate(\" + e.x + \", \" + (e.y + e.height) + \")\",\n            width: e.width\n          }, \"vertical\" === s ? {} : {\n            height: e.height,\n            transform: \"translate(\" + e.x + \", \" + e.y + \")\",\n            width: 0\n          });\n        },\n        enter: function (e) {\n          return {\n            borderColor: ia(e),\n            color: e.color,\n            height: e.height,\n            labelColor: ta(e),\n            labelOpacity: 1,\n            labelX: e.width / 2,\n            labelY: e.height / 2,\n            transform: \"translate(\" + e.x + \", \" + e.y + \")\",\n            width: e.width\n          };\n        },\n        update: function (e) {\n          return {\n            borderColor: ia(e),\n            color: e.color,\n            height: e.height,\n            labelColor: ta(e),\n            labelOpacity: 1,\n            labelX: e.width / 2,\n            labelY: e.height / 2,\n            transform: \"translate(\" + e.x + \", \" + e.y + \")\",\n            width: e.width\n          };\n        },\n        leave: function (e) {\n          return z({\n            borderColor: ia(e),\n            color: e.color,\n            height: 0,\n            labelColor: ta(e),\n            labelOpacity: 0,\n            labelX: e.width / 2,\n            labelY: 0,\n            transform: \"translate(\" + e.x + \", \" + (e.y + e.height) + \")\",\n            width: e.width\n          }, \"vertical\" === s ? {} : {\n            labelX: 0,\n            labelY: e.height / 2,\n            height: e.height,\n            transform: \"translate(\" + e.x + \", \" + e.y + \")\",\n            width: 0\n          });\n        },\n        config: Ae,\n        immediate: !Ge,\n        initial: Ge ? void 0 : null\n      }),\n      da = V(function () {\n        return {\n          borderRadius: se,\n          borderWidth: be,\n          enableLabel: K,\n          isInteractive: ke,\n          labelSkipWidth: Z,\n          labelSkipHeight: _,\n          onClick: Ce,\n          onMouseEnter: Ve,\n          onMouseLeave: We,\n          getTooltipLabel: aa,\n          tooltip: we,\n          isFocusable: Ee,\n          ariaLabel: Fe,\n          ariaLabelledBy: Xe,\n          ariaDescribedBy: Ye\n        };\n      }, [se, be, K, aa, ke, _, Z, Ce, Ve, We, we, Ee, Fe, Xe, Ye]),\n      ua = y(oe, Ue, ue, {\n        dataKey: \"data\",\n        targetKey: \"data.fill\"\n      }),\n      ca = {\n        annotations: null,\n        axes: null,\n        bars: null,\n        grid: null,\n        legends: null,\n        markers: null\n      };\n    G.includes(\"annotations\") && (ca.annotations = d(J, {\n      bars: Ue,\n      annotations: fe\n    }, \"annotations\")), G.includes(\"axes\") && (ca.axes = d(e, {\n      xScale: $e,\n      yScale: _e,\n      width: Ne,\n      height: Je,\n      top: w,\n      right: C,\n      bottom: B,\n      left: R\n    }, \"axes\")), G.includes(\"bars\") && (ca.bars = d(I, {\n      children: oa(function (e, a) {\n        return W(j, z({}, da, {\n          bar: a,\n          style: e,\n          shouldRenderLabel: na(a),\n          label: ea(a.data)\n        }));\n      })\n    }, \"bars\")), G.includes(\"grid\") && (ca.grid = d(a, {\n      width: Ne,\n      height: Je,\n      xScale: P ? $e : null,\n      yScale: X ? _e : null,\n      xValues: Y,\n      yValues: D\n    }, \"grid\")), G.includes(\"legends\") && (ca.legends = d(Q, {\n      width: Ne,\n      height: Je,\n      legends: la,\n      toggleSerie: ra\n    }, \"legends\")), G.includes(\"markers\") && (ca.markers = d(S, {\n      markers: te,\n      width: Ne,\n      height: Je,\n      xScale: $e,\n      yScale: _e\n    }, \"markers\"));\n    var sa = V(function () {\n      return z({}, da, {\n        margin: Ke,\n        width: o,\n        height: u,\n        innerWidth: Ne,\n        innerHeight: Je,\n        bars: Ue,\n        legendData: la,\n        enableLabel: K,\n        xScale: $e,\n        yScale: _e,\n        tooltip: we,\n        getTooltipLabel: aa,\n        onClick: Ce,\n        onMouseEnter: Ve,\n        onMouseLeave: We\n      });\n    }, [da, Ke, o, u, Ne, Je, Ue, la, K, $e, _e, we, aa, Ce, Ve, We]);\n    return d(k, {\n      width: qe,\n      height: ze,\n      margin: Ke,\n      defs: ua,\n      role: Ie,\n      ariaLabel: Te,\n      ariaLabelledBy: Re,\n      ariaDescribedBy: He,\n      isFocusable: Ee,\n      children: G.map(function (e, a) {\n        var i;\n        return \"function\" == typeof e ? d(I, {\n          children: W(e, sa)\n        }, a) : null != (i = null == ca ? void 0 : ca[e]) ? i : null;\n      })\n    });\n  },\n  we = function (e) {\n    var a = e.isInteractive,\n      i = void 0 === a ? ae.isInteractive : a,\n      t = e.animate,\n      n = void 0 === t ? ae.animate : t,\n      r = e.motionConfig,\n      l = void 0 === r ? ae.motionConfig : r,\n      o = e.theme,\n      u = e.renderWrapper,\n      c = K(e, ke);\n    return d(m, {\n      animate: n,\n      isInteractive: i,\n      motionConfig: l,\n      renderWrapper: u,\n      theme: o,\n      children: d(Le, z({\n        isInteractive: i\n      }, c))\n    });\n  },\n  Ce = [\"isInteractive\", \"renderWrapper\", \"theme\"],\n  Ve = function (e, a, i, t) {\n    return e.find(function (e) {\n      return w(e.x + a.left, e.y + a.top, e.width, e.height, i, t);\n    });\n  },\n  We = function (e) {\n    var a = e.data,\n      r = e.indexBy,\n      u = e.keys,\n      c = e.margin,\n      s = e.width,\n      g = e.height,\n      v = e.groupMode,\n      f = e.layout,\n      m = e.reverse,\n      p = e.minValue,\n      y = e.maxValue,\n      S = e.valueScale,\n      k = e.indexScale,\n      w = e.padding,\n      C = e.innerPadding,\n      B = e.axisTop,\n      I = e.axisRight,\n      T = e.axisBottom,\n      P = void 0 === T ? ie.axisBottom : T,\n      E = e.axisLeft,\n      F = void 0 === E ? ie.axisLeft : E,\n      Y = e.enableGridX,\n      D = void 0 === Y ? ie.enableGridX : Y,\n      O = e.enableGridY,\n      G = void 0 === O ? ie.enableGridY : O,\n      A = e.gridXValues,\n      j = e.gridYValues,\n      q = e.layers,\n      K = void 0 === q ? ie.layers : q,\n      N = e.renderBar,\n      J = void 0 === N ? function (e, a) {\n        var i = a.bar,\n          t = i.color,\n          n = i.height,\n          r = i.width,\n          l = i.x,\n          o = i.y,\n          d = a.borderColor,\n          u = a.borderRadius,\n          c = a.borderWidth,\n          s = a.label,\n          h = a.labelColor,\n          b = a.shouldRenderLabel;\n        if (e.fillStyle = t, c > 0 && (e.strokeStyle = d, e.lineWidth = c), e.beginPath(), u > 0) {\n          var g = Math.min(u, n);\n          e.moveTo(l + g, o), e.lineTo(l + r - g, o), e.quadraticCurveTo(l + r, o, l + r, o + g), e.lineTo(l + r, o + n - g), e.quadraticCurveTo(l + r, o + n, l + r - g, o + n), e.lineTo(l + g, o + n), e.quadraticCurveTo(l, o + n, l, o + n - g), e.lineTo(l, o + g), e.quadraticCurveTo(l, o, l + g, o), e.closePath();\n        } else e.rect(l, o, r, n);\n        e.fill(), c > 0 && e.stroke(), b && (e.textBaseline = \"middle\", e.textAlign = \"center\", e.fillStyle = h, e.fillText(s, l + r / 2, o + n / 2));\n      } : N,\n      Q = e.enableLabel,\n      U = void 0 === Q ? ie.enableLabel : Q,\n      Z = e.label,\n      $ = e.labelSkipWidth,\n      _ = void 0 === $ ? ie.labelSkipWidth : $,\n      ee = e.labelSkipHeight,\n      ae = void 0 === ee ? ie.labelSkipHeight : ee,\n      te = e.labelTextColor,\n      ne = e.colorBy,\n      re = e.colors,\n      le = e.borderRadius,\n      oe = void 0 === le ? ie.borderRadius : le,\n      de = e.borderWidth,\n      ue = void 0 === de ? ie.borderWidth : de,\n      ce = e.borderColor,\n      se = e.annotations,\n      he = void 0 === se ? ie.annotations : se,\n      be = e.legendLabel,\n      ge = e.tooltipLabel,\n      ve = e.valueFormat,\n      fe = e.isInteractive,\n      me = void 0 === fe ? ie.isInteractive : fe,\n      pe = e.tooltip,\n      xe = void 0 === pe ? ie.tooltip : pe,\n      ye = e.onClick,\n      ke = e.onMouseEnter,\n      Le = e.onMouseLeave,\n      we = e.legends,\n      Ce = e.pixelRatio,\n      We = void 0 === Ce ? ie.pixelRatio : Ce,\n      Me = e.canvasRef,\n      Be = R(null),\n      Ie = b(),\n      Te = x(s, g, c),\n      Re = Te.margin,\n      He = Te.innerWidth,\n      Pe = Te.innerHeight,\n      Ee = Te.outerWidth,\n      Fe = Te.outerHeight,\n      Xe = Se({\n        indexBy: r,\n        label: Z,\n        tooltipLabel: ge,\n        valueFormat: ve,\n        colors: re,\n        colorBy: ne,\n        borderColor: ce,\n        labelTextColor: te,\n        groupMode: v,\n        layout: f,\n        reverse: m,\n        data: a,\n        keys: u,\n        minValue: p,\n        maxValue: y,\n        margin: Re,\n        width: He,\n        height: Pe,\n        padding: w,\n        innerPadding: C,\n        valueScale: S,\n        indexScale: k,\n        enableLabel: U,\n        labelSkipWidth: _,\n        labelSkipHeight: ae,\n        legends: we,\n        legendLabel: be\n      }),\n      Ye = Xe.bars,\n      De = Xe.barsWithValue,\n      Oe = Xe.xScale,\n      Ge = Xe.yScale,\n      Ae = Xe.getLabel,\n      je = Xe.getTooltipLabel,\n      qe = Xe.getBorderColor,\n      ze = Xe.getLabelColor,\n      Ke = Xe.shouldRenderBarLabel,\n      Ne = Xe.legendsWithData,\n      Je = X(),\n      Qe = Je.showTooltipFromEvent,\n      Ue = Je.hideTooltip,\n      Ze = l({\n        annotations: n({\n          data: Ye,\n          annotations: he,\n          getPosition: function (e) {\n            return {\n              x: e.x,\n              y: e.y\n            };\n          },\n          getDimensions: function (e) {\n            var a = e.width,\n              i = e.height;\n            return {\n              width: a,\n              height: i,\n              size: Math.max(a, i)\n            };\n          }\n        })\n      }),\n      $e = V(function () {\n        return {\n          borderRadius: oe,\n          borderWidth: ue,\n          isInteractive: me,\n          isFocusable: !1,\n          labelSkipWidth: _,\n          labelSkipHeight: ae,\n          margin: Re,\n          width: s,\n          height: g,\n          innerWidth: He,\n          innerHeight: Pe,\n          bars: Ye,\n          legendData: Ne,\n          enableLabel: U,\n          xScale: Oe,\n          yScale: Ge,\n          tooltip: xe,\n          getTooltipLabel: je,\n          onClick: ye,\n          onMouseEnter: ke,\n          onMouseLeave: Le\n        };\n      }, [oe, ue, me, _, ae, Re, s, g, He, Pe, Ye, Ne, U, Oe, Ge, xe, je, ye, ke, Le]);\n    H(function () {\n      var e,\n        a = null == (e = Be.current) ? void 0 : e.getContext(\"2d\");\n      Be.current && a && (Be.current.width = Ee * We, Be.current.height = Fe * We, a.scale(We, We), a.fillStyle = Ie.background, a.fillRect(0, 0, Ee, Fe), a.translate(Re.left, Re.top), K.forEach(function (e) {\n        \"grid\" === e ? \"number\" == typeof Ie.grid.line.strokeWidth && Ie.grid.line.strokeWidth > 0 && (a.lineWidth = Ie.grid.line.strokeWidth, a.strokeStyle = Ie.grid.line.stroke, D && i(a, {\n          width: s,\n          height: g,\n          scale: Oe,\n          axis: \"x\",\n          values: A\n        }), G && i(a, {\n          width: s,\n          height: g,\n          scale: Ge,\n          axis: \"y\",\n          values: j\n        })) : \"axes\" === e ? t(a, {\n          xScale: Oe,\n          yScale: Ge,\n          width: He,\n          height: Pe,\n          top: B,\n          right: I,\n          bottom: P,\n          left: F,\n          theme: Ie\n        }) : \"bars\" === e ? De.forEach(function (e) {\n          J(a, {\n            bar: e,\n            borderColor: qe(e),\n            borderRadius: oe,\n            borderWidth: ue,\n            label: Ae(e.data),\n            labelColor: ze(e),\n            shouldRenderLabel: Ke(e)\n          });\n        }) : \"legends\" === e ? Ne.forEach(function (e) {\n          var i = e[0],\n            t = e[1];\n          h(a, z({}, i, {\n            data: t,\n            containerWidth: He,\n            containerHeight: Pe,\n            theme: Ie\n          }));\n        }) : \"annotations\" === e ? o(a, {\n          annotations: Ze,\n          theme: Ie\n        }) : \"function\" == typeof e && e(a, $e);\n      }), a.save());\n    }, [P, F, I, B, De, oe, ue, Ze, D, G, qe, Ae, ze, A, j, v, g, Pe, He, $e, K, f, Ne, Re.left, Re.top, Fe, Ee, We, J, Oe, Ge, m, Ke, Ie, s]);\n    var _e = M(function (e) {\n        if (Ye && Be.current) {\n          var a = L(Be.current, e),\n            i = a[0],\n            t = a[1],\n            n = Ve(Ye, Re, i, t);\n          void 0 !== n ? (Qe(W(xe, z({}, n.data, {\n            color: n.color,\n            label: n.label,\n            value: Number(n.data.value)\n          })), e), \"mouseenter\" === e.type && (null == ke || ke(n.data, e))) : Ue();\n        }\n      }, [Ue, Re, ke, Ye, Qe, xe]),\n      ea = M(function (e) {\n        if (Ye && Be.current) {\n          Ue();\n          var a = L(Be.current, e),\n            i = a[0],\n            t = a[1],\n            n = Ve(Ye, Re, i, t);\n          n && (null == Le || Le(n.data, e));\n        }\n      }, [Ue, Re, Le, Ye]),\n      aa = M(function (e) {\n        if (Ye && Be.current) {\n          var a = L(Be.current, e),\n            i = a[0],\n            t = a[1],\n            n = Ve(Ye, Re, i, t);\n          void 0 !== n && (null == ye || ye(z({}, n.data, {\n            color: n.color\n          }), e));\n        }\n      }, [Re, ye, Ye]);\n    return d(\"canvas\", {\n      ref: function (e) {\n        Be.current = e, Me && \"current\" in Me && (Me.current = e);\n      },\n      width: Ee * We,\n      height: Fe * We,\n      style: {\n        width: Ee,\n        height: Fe,\n        cursor: me ? \"auto\" : \"normal\"\n      },\n      onMouseEnter: me ? _e : void 0,\n      onMouseMove: me ? _e : void 0,\n      onMouseLeave: me ? ea : void 0,\n      onClick: me ? aa : void 0\n    });\n  },\n  Me = T(function (e, a) {\n    var i = e.isInteractive,\n      t = e.renderWrapper,\n      n = e.theme,\n      r = K(e, Ce);\n    return d(m, {\n      isInteractive: i,\n      renderWrapper: t,\n      theme: n,\n      animate: !1,\n      children: d(We, z({}, r, {\n        canvasRef: a\n      }))\n    });\n  }),\n  Be = function (e) {\n    return d(C, {\n      children: function (a) {\n        var i = a.width,\n          t = a.height;\n        return d(we, z({\n          width: i,\n          height: t\n        }, e));\n      }\n    });\n  },\n  Ie = T(function (e, a) {\n    return d(C, {\n      children: function (i) {\n        var t = i.width,\n          n = i.height;\n        return d(Me, z({\n          width: t,\n          height: n\n        }, e, {\n          ref: a\n        }));\n      }\n    });\n  });\nexport { we as Bar, Me as BarCanvas, Z as BarItem, _ as BarTooltip, Be as ResponsiveBar, Ie as ResponsiveBarCanvas, ie as canvasDefaultProps, ee as defaultProps, ae as svgDefaultProps };","map":{"version":3,"mappings":"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","names":["BarAnnotations","_ref","bars","annotations","boundAnnotations","useAnnotations","data","getPosition","x","bar","width","y","height","getDimensions","_ref2","size","Math","max","_jsx","children","map","annotation","i","Annotation","_extends","BarLegends","legends","toggleSerie","legend","BoxLegendSvg","containerWidth","containerHeight","_legend$data","dataFrom","undefined","U","BarItem","_ref$bar","_objectWithoutPropertiesLoose","_ref$style","style","borderColor","color","labelColor","labelOpacity","labelX","labelY","transform","borderRadius","borderWidth","label","shouldRenderLabel","isInteractive","onClick","onMouseEnter","onMouseLeave","tooltip","isFocusable","ariaLabel","ariaLabelledBy","ariaDescribedBy","theme","useTheme","_useTooltip","useTooltip","showTooltipFromEvent","showTooltipAt","hideTooltip","renderTooltip","useMemo","createElement","handleClick","useCallback","event","handleTooltip","handleMouseEnter","handleMouseLeave","handleFocus","absX","absY","handleBlur","_jsxs","animated","g","rect","to","value","rx","ry","fill","_data$fill","strokeWidth","stroke","focusable","tabIndex","onMouseMove","onFocus","onBlur","text","textAnchor","dominantBaseline","fillOpacity","labels","pointerEvents","$","BarTooltip","BasicTooltip","id","formattedValue","enableChip","defaultProps","indexBy","keys","groupMode","layout","reverse","minValue","maxValue","valueScale","type","indexScale","round","padding","innerPadding","axisBottom","axisLeft","enableGridX","enableGridY","enableLabel","labelSkipWidth","labelSkipHeight","labelTextColor","from","colorBy","colors","scheme","tooltipLabel","datum","indexValue","initialHiddenIds","markers","svgDefaultProps","layers","barComponent","defs","animate","motionConfig","role","canvasDefaultProps","pixelRatio","window","_window$devicePixelRa","devicePixelRatio","getIndexScale","getIndex","axis","computeScale","all","min","normalizeData","reduce","acc","key","item","filterNullValues","Object","coerceValue","Number","oe","gt","other","lt","range","start","end","Array","repeat","_","index","clampToZero","generateVerticalGroupedBars","barWidth","yRef","formatValue","getColor","getTooltipLabel","_ref$innerPadding","xScale","yScale","margin","compare","cleanedData","forEach","domain","length","d","_yScale","_coerceValue","rawValue","_xScale","barHeight","_yScale2","getHeight","barData","hidden","push","left","top","generateHorizontalGroupedBars","xRef","_ref2$innerPadding","_xScale2","_coerceValue2","_yScale3","_xScale3","getWidth","generateGroupedBars","_ref3","_ref3$padding","_ref3$innerPadding","indexScaleConfig","_ref3$hiddenIds","hiddenIds","props","filter","includes","_ref4","otherAxis","scaleSpec","clampMin","values","entry","k","Boolean","apply","isFinite","scale","_ref5","bandwidth","params","_scale","ve","flattenDeep","arr","some","isArray","concat","generateVerticalStackedBars","stackedData","_getY","stackedDataItem","getY","generateHorizontalStackedBars","_getX","getX","generateStackedBars","array","_ref4$padding","_ref4$hiddenIds","stack","offset","stackOffsetDiverging","num","_ref6","getLegendData","direction","legendLabel","getLegendLabel","getPropertyAccessor","uniqBy","_bar$data$indexValue","_bar$color2","getLegendDataForIndexes","_bar$color","getLegendDataForKeys","useBar","_ref$indexBy","_ref$keys","_ref$label","_ref$tooltipLabel","valueFormat","_ref$colors","_ref$colorBy","_ref$borderColor","_ref$labelTextColor","_ref$groupMode","_ref$layout","_ref$reverse","_ref$minValue","_ref$maxValue","_ref$padding","_ref$valueScale","_ref$indexScale","_ref$initialHiddenIds","_ref$enableLabel","_ref$labelSkipWidth","_ref$labelSkipHeight","_ref$legends","_useState","useState","setHiddenIds","state","indexOf","usePropertyAccessor","getLabel","useValueFormatter","useOrdinalColorScale","getBorderColor","useInheritedColor","getLabelColor","_generateBars","barsWithValue","shouldRenderBarLabel","legendData","find","legendsWithData","ke","InnerBar","partialMargin","axisTop","axisRight","_ref$axisBottom","_ref$axisLeft","_ref$enableGridX","_ref$enableGridY","gridXValues","gridYValues","_ref$layers","_ref$barComponent","_ref$markers","_ref$defs","_ref$fill","_ref$borderRadius","_ref$borderWidth","_ref$annotations","_ref$isInteractive","_ref$tooltip","_ref$role","_ref$isFocusable","barAriaLabel","barAriaLabelledBy","barAriaDescribedBy","_useMotionConfig","useMotionConfig","springConfig","config","_useDimensions","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","_useBar","transition","useTransition","enter","update","leave","immediate","initial","commonProps","boundDefs","bindDefs","dataKey","targetKey","layerById","axes","grid","Axes","right","bottom","Fragment","Grid","xValues","yValues","CartesianMarkers","layerContext","SvgWrapper","layer","_layerById$layer","Bar","_ref2$isInteractive","_ref2$animate","_ref2$motionConfig","renderWrapper","otherProps","Container","Ce","findBarUnderCursor","nodes","isCursorInRect","node","InnerBarCanvas","_ref$renderBar","renderBar","ctx","_ref2$bar","fillStyle","strokeStyle","lineWidth","beginPath","radius","moveTo","lineTo","quadraticCurveTo","closePath","textBaseline","textAlign","fillText","_ref$pixelRatio","canvasRef","canvasEl","useRef","useComputedAnnotations","useEffect","_canvasEl$current","current","getContext","background","fillRect","translate","line","renderGridLinesToCanvas","renderAxesToCanvas","renderLegendToCanvas","renderAnnotationsToCanvas","save","handleMouseHover","getRelativeCursor","_getRelativeCursor","_getRelativeCursor2","_getRelativeCursor3","ref","canvas","cursor","BarCanvas","forwardRef","ResponsiveBar","ResponsiveWrapper","ResponsiveBarCanvas"],"sources":["/Users/parijatchatterjee/Desktop/react-admin-dashboard/node_modules/@nivo/bar/src/BarAnnotations.tsx","/Users/parijatchatterjee/Desktop/react-admin-dashboard/node_modules/@nivo/bar/src/BarLegends.tsx","/Users/parijatchatterjee/Desktop/react-admin-dashboard/node_modules/@nivo/bar/src/BarItem.tsx","/Users/parijatchatterjee/Desktop/react-admin-dashboard/node_modules/@nivo/bar/src/BarTooltip.tsx","/Users/parijatchatterjee/Desktop/react-admin-dashboard/node_modules/@nivo/bar/src/props.ts","/Users/parijatchatterjee/Desktop/react-admin-dashboard/node_modules/@nivo/bar/src/compute/common.ts","/Users/parijatchatterjee/Desktop/react-admin-dashboard/node_modules/@nivo/bar/src/compute/grouped.ts","/Users/parijatchatterjee/Desktop/react-admin-dashboard/node_modules/@nivo/bar/src/compute/stacked.ts","/Users/parijatchatterjee/Desktop/react-admin-dashboard/node_modules/@nivo/bar/src/compute/legends.ts","/Users/parijatchatterjee/Desktop/react-admin-dashboard/node_modules/@nivo/bar/src/hooks.ts","/Users/parijatchatterjee/Desktop/react-admin-dashboard/node_modules/@nivo/bar/src/Bar.tsx","/Users/parijatchatterjee/Desktop/react-admin-dashboard/node_modules/@nivo/bar/src/BarCanvas.tsx","/Users/parijatchatterjee/Desktop/react-admin-dashboard/node_modules/@nivo/bar/src/ResponsiveBar.tsx","/Users/parijatchatterjee/Desktop/react-admin-dashboard/node_modules/@nivo/bar/src/ResponsiveBarCanvas.tsx"],"sourcesContent":["import { Annotation, useAnnotations } from '@nivo/annotations'\nimport { BarAnnotationsProps } from './types'\n\nexport const BarAnnotations = <RawDatum,>({ bars, annotations }: BarAnnotationsProps<RawDatum>) => {\n    const boundAnnotations = useAnnotations({\n        data: bars,\n        annotations,\n        getPosition: bar => ({\n            x: bar.x + bar.width / 2,\n            y: bar.y + bar.height / 2,\n        }),\n        getDimensions: ({ height, width }) => ({\n            width,\n            height,\n            size: Math.max(width, height),\n        }),\n    })\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { BoxLegendSvg } from '@nivo/legends'\nimport { BarLegendProps, LegendData } from './types'\n\ninterface BarLegendsProps {\n    width: number\n    height: number\n    legends: [BarLegendProps, LegendData[]][]\n    toggleSerie: (id: string | number) => void\n}\n\nexport const BarLegends = ({ width, height, legends, toggleSerie }: BarLegendsProps) => (\n    <>\n        {legends.map(([legend, data], i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={width}\n                containerHeight={height}\n                data={legend.data ?? data}\n                toggleSerie={\n                    legend.toggleSerie && legend.dataFrom === 'keys' ? toggleSerie : undefined\n                }\n            />\n        ))}\n    </>\n)\n","import { createElement, MouseEvent, useCallback, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { BarDatum, BarItemProps } from './types'\n\nexport const BarItem = <RawDatum extends BarDatum>({\n    bar: { data, ...bar },\n\n    style: {\n        borderColor,\n        color,\n        height,\n        labelColor,\n        labelOpacity,\n        labelX,\n        labelY,\n        transform,\n        width,\n    },\n\n    borderRadius,\n    borderWidth,\n\n    label,\n    shouldRenderLabel,\n\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    tooltip,\n\n    isFocusable,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: BarItemProps<RawDatum>) => {\n    const theme = useTheme()\n    const { showTooltipFromEvent, showTooltipAt, hideTooltip } = useTooltip()\n\n    const renderTooltip = useMemo(\n        () => () => createElement(tooltip, { ...bar, ...data }),\n        [tooltip, bar, data]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.({ color: bar.color, ...data }, event)\n        },\n        [bar, data, onClick]\n    )\n    const handleTooltip = useCallback(\n        (event: MouseEvent<SVGRectElement>) => showTooltipFromEvent(renderTooltip(), event),\n        [showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(data, event)\n            showTooltipFromEvent(renderTooltip(), event)\n        },\n        [data, onMouseEnter, showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(data, event)\n            hideTooltip()\n        },\n        [data, hideTooltip, onMouseLeave]\n    )\n\n    // extra handlers to allow keyboard navigation\n    const handleFocus = useCallback(() => {\n        showTooltipAt(renderTooltip(), [bar.absX + bar.width / 2, bar.absY])\n    }, [showTooltipAt, renderTooltip, bar])\n    const handleBlur = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    return (\n        <animated.g transform={transform}>\n            <animated.rect\n                width={to(width, value => Math.max(value, 0))}\n                height={to(height, value => Math.max(value, 0))}\n                rx={borderRadius}\n                ry={borderRadius}\n                fill={data.fill ?? color}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                focusable={isFocusable}\n                tabIndex={isFocusable ? 0 : undefined}\n                aria-label={ariaLabel ? ariaLabel(data) : undefined}\n                aria-labelledby={ariaLabelledBy ? ariaLabelledBy(data) : undefined}\n                aria-describedby={ariaDescribedBy ? ariaDescribedBy(data) : undefined}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleTooltip : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n                onFocus={isInteractive && isFocusable ? handleFocus : undefined}\n                onBlur={isInteractive && isFocusable ? handleBlur : undefined}\n            />\n            {shouldRenderLabel && (\n                <animated.text\n                    x={labelX}\n                    y={labelY}\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"central\"\n                    fillOpacity={labelOpacity}\n                    style={{\n                        ...theme.labels.text,\n                        pointerEvents: 'none',\n                        fill: labelColor,\n                    }}\n                >\n                    {label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n","import { BarTooltipProps } from './types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nexport const BarTooltip = <RawDatum,>({ color, label, ...data }: BarTooltipProps<RawDatum>) => {\n    return <BasicTooltip id={label} value={data.formattedValue} enableChip={true} color={color} />\n}\n","import { BarItem } from './BarItem'\nimport { BarTooltip } from './BarTooltip'\nimport { ComputedDatum } from './types'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { ScaleBandSpec, ScaleSpec } from '@nivo/scales'\n\nexport const defaultProps = {\n    indexBy: 'id',\n    keys: ['value'],\n\n    groupMode: 'stacked' as const,\n    layout: 'vertical' as const,\n    reverse: false,\n\n    minValue: 'auto' as const,\n    maxValue: 'auto' as const,\n\n    valueScale: { type: 'linear' } as ScaleSpec,\n    indexScale: { type: 'band', round: true } as ScaleBandSpec,\n\n    padding: 0.1,\n    innerPadding: 0,\n\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: false,\n    enableGridY: true,\n\n    enableLabel: true,\n    label: 'formattedValue',\n    labelSkipWidth: 0,\n    labelSkipHeight: 0,\n    labelTextColor: { from: 'theme', theme: 'labels.text.fill' },\n\n    colorBy: 'id' as const,\n    colors: { scheme: 'nivo' } as OrdinalColorScaleConfig,\n\n    borderRadius: 0,\n    borderWidth: 0,\n    borderColor: { from: 'color' } as InheritedColorConfig<any>,\n\n    isInteractive: true,\n    tooltip: BarTooltip,\n    tooltipLabel: <RawDatum>(datum: ComputedDatum<RawDatum>) => `${datum.id} - ${datum.indexValue}`,\n\n    legends: [],\n    initialHiddenIds: [],\n    annotations: [],\n    markers: [],\n}\n\nexport const svgDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'markers', 'legends', 'annotations'],\n    barComponent: BarItem,\n\n    defs: [],\n    fill: [],\n\n    animate: true,\n    motionConfig: 'default',\n\n    role: 'img',\n    isFocusable: false,\n}\n\nexport const canvasDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'legends', 'annotations'],\n\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n","import { ScaleBandSpec, ScaleBand, computeScale } from '@nivo/scales'\n\n/**\n * Generates indexed scale.\n */\nexport const getIndexScale = <RawDatum>(\n    data: readonly RawDatum[],\n    getIndex: (datum: RawDatum) => string,\n    padding: number,\n    indexScale: ScaleBandSpec,\n    size: number,\n    axis: 'x' | 'y'\n) => {\n    return (\n        computeScale(\n            indexScale,\n            { all: data.map(getIndex), min: 0, max: 0 },\n            size,\n            axis\n        ) as ScaleBand<string>\n    ).padding(padding)\n}\n\n/**\n * This method ensures all the provided keys exist in the entire series.\n */\nexport const normalizeData = <RawDatum>(data: readonly RawDatum[], keys: readonly string[]) =>\n    data.map(\n        item =>\n            ({\n                ...keys.reduce<Record<string, unknown>>((acc, key) => {\n                    acc[key] = null\n                    return acc\n                }, {}),\n                ...item,\n            } as RawDatum)\n    )\n\nexport const filterNullValues = <RawDatum extends Record<string, unknown>>(data: RawDatum) =>\n    Object.keys(data).reduce<Record<string, unknown>>((acc, key) => {\n        if (data[key]) {\n            acc[key] = data[key]\n        }\n        return acc\n    }, {}) as Exclude<RawDatum, null | undefined | false | '' | 0>\n\nexport const coerceValue = <T>(value: T) => [value, Number(value)] as const\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    data: readonly RawDatum[]\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    keys: string[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst gt = (value: number, other: number) => value > other\nconst lt = (value: number, other: number) => value < other\n\nconst range = (start: number, end: number) =>\n    Array.from(' '.repeat(end - start), (_, index) => start + index)\n\nconst clampToZero = (value: number) => (gt(value, 0) ? 0 : value)\nconst zeroIfNotFinite = (value: number) => (isFinite(value) ? value : 0)\n\n/**\n * Generates x/y scales & bars for vertical grouped bar chart.\n */\nconst generateVerticalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding = 0,\n        keys,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean,\n    yRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getY = (d: number) => (compare(d, 0) ? yScale(d) ?? 0 : yRef)\n    const getHeight = (d: number, y: number) => (compare(d, 0) ? yRef - y : (yScale(d) ?? 0) - yRef)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, xScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = (xScale(indexValue) ?? 0) + barWidth * i + innerPadding * i\n            const y = getY(value)\n            const barHeight = getHeight(value, y)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal grouped bar chart.\n */\nconst generateHorizontalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getIndex,\n        getColor,\n        getTooltipLabel,\n        keys,\n        innerPadding = 0,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean,\n    xRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getX = (d: number) => (compare(d, 0) ? xRef : xScale(d) ?? 0)\n    const getWidth = (d: number, x: number) => (compare(d, 0) ? (xScale(d) ?? 0) - xRef : xRef - x)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, yScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = getX(value)\n            const y = (yScale(indexValue) ?? 0) + barHeight * i + innerPadding * i\n            const barWidth = getWidth(value, x)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for grouped bar chart.\n */\nexport const generateGroupedBars = <RawDatum extends BarDatum>({\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    innerPadding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: readonly (string | number)[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const data = normalizeData(props.data, keys)\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const clampMin = scaleSpec.min === 'auto' ? clampToZero : (value: number) => value\n\n    const values = data\n        .reduce<number[]>((acc, entry) => [...acc, ...keys.map(k => entry[k] as number)], [])\n        .filter(Boolean)\n    const min = clampMin(Math.min(...values))\n    const max = zeroIfNotFinite(Math.max(...values))\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const bandwidth = (indexScale.bandwidth() - innerPadding * (keys.length - 1)) / keys.length\n    const params = [\n        { ...props, data, keys, innerPadding, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n        scale(0) ?? 0,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalGroupedBars(...params)\n                : generateHorizontalGroupedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { Series, SeriesPoint, stack, stackOffsetDiverging } from 'd3-shape'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype StackDatum<RawDatum> = SeriesPoint<RawDatum>\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    stackedData: Series<RawDatum, string>[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst flattenDeep = <T>(arr: T[]): T =>\n    arr.some(Array.isArray) ? flattenDeep(([] as T[]).concat(...arr)) : (arr as unknown as T)\n\nconst filterZerosIfLog = (array: number[], type: string) =>\n    type === 'log' ? array.filter(num => num !== 0) : array\n\n/**\n * Generates x/y scales & bars for vertical stacked bar chart.\n */\nconst generateVerticalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getY = (d: StackDatum<RawDatum>) => yScale(d[reverse ? 0 : 1])\n    const getHeight = (d: StackDatum<RawDatum>, y: number) => (yScale(d[reverse ? 1 : 0]) ?? 0) - y\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        xScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const x = xScale(getIndex(d.data)) ?? 0\n            const y = (getY(d) ?? 0) + innerPadding * 0.5\n            const barHeight = getHeight(d, y) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal stacked bar chart.\n */\nconst generateHorizontalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getX = (d: StackDatum<RawDatum>) => xScale(d[reverse ? 1 : 0])\n    const getWidth = (d: StackDatum<RawDatum>, x: number) => (xScale(d[reverse ? 0 : 1]) ?? 0) - x\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        yScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const y = yScale(getIndex(d.data)) ?? 0\n            const x = (getX(d) ?? 0) + innerPadding * 0.5\n            const barWidth = getWidth(d, x) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for stacked bar chart.\n */\nexport const generateStackedBars = <RawDatum extends BarDatum>({\n    data,\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: readonly (string | number)[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const stackedData = stack<RawDatum, string>().keys(keys).offset(stackOffsetDiverging)(\n        normalizeData(data, keys)\n    )\n\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const values = filterZerosIfLog(\n        flattenDeep(stackedData as unknown as number[][]),\n        valueScale.type\n    )\n    const min = Math.min(...values)\n    const max = Math.max(...values)\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const innerPadding = props.innerPadding > 0 ? props.innerPadding : 0\n    const bandwidth = indexScale.bandwidth()\n    const params = [\n        { ...props, innerPadding, stackedData, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalStackedBars(...params)\n                : generateHorizontalStackedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import {\n    BarDatum,\n    BarLegendProps,\n    BarSvgProps,\n    BarsWithHidden,\n    LegendData,\n    LegendLabelDatum,\n} from '../types'\nimport { getPropertyAccessor } from '@nivo/core'\nimport uniqBy from 'lodash/uniqBy'\n\nexport const getLegendDataForKeys = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    direction: BarLegendProps['direction'],\n    groupMode: NonNullable<BarSvgProps<RawDatum>['groupMode']>,\n    reverse: boolean,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.id,\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (\n        (layout === 'vertical' &&\n            groupMode === 'stacked' &&\n            direction === 'column' &&\n            reverse !== true) ||\n        (layout === 'horizontal' && groupMode === 'stacked' && reverse === true)\n    ) {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendDataForIndexes = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.indexValue ?? '',\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (layout === 'horizontal') {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendData = <RawDatum extends BarDatum>({\n    bars,\n    direction,\n    from,\n    groupMode,\n    layout,\n    legendLabel,\n    reverse,\n}: Pick<Required<BarSvgProps<RawDatum>>, 'layout' | 'groupMode' | 'reverse'> & {\n    bars: BarsWithHidden<RawDatum>\n    direction: BarLegendProps['direction']\n    from: BarLegendProps['dataFrom']\n    legendLabel: BarSvgProps<RawDatum>['legendLabel']\n}) => {\n    const getLegendLabel = getPropertyAccessor(\n        legendLabel ?? (from === 'indexes' ? 'indexValue' : 'id')\n    )\n\n    if (from === 'indexes') {\n        return getLegendDataForIndexes(bars, layout, getLegendLabel)\n    }\n\n    return getLegendDataForKeys(bars, layout, direction, groupMode, reverse, getLegendLabel)\n}\n","import { useCallback, useMemo, useState } from 'react'\nimport { useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport { usePropertyAccessor, useTheme, useValueFormatter, Margin } from '@nivo/core'\nimport {\n    DataProps,\n    BarCommonProps,\n    BarDatum,\n    ComputedBarDatumWithValue,\n    LegendData,\n    BarLegendProps,\n} from './types'\nimport { defaultProps } from './props'\nimport { generateGroupedBars, generateStackedBars, getLegendData } from './compute'\n\nexport const useBar = <RawDatum extends BarDatum>({\n    indexBy = defaultProps.indexBy,\n    keys = defaultProps.keys,\n    label = defaultProps.label,\n    tooltipLabel = defaultProps.tooltipLabel,\n    valueFormat,\n    colors = defaultProps.colors,\n    colorBy = defaultProps.colorBy,\n    borderColor = defaultProps.borderColor,\n    labelTextColor = defaultProps.labelTextColor,\n    groupMode = defaultProps.groupMode,\n    layout = defaultProps.layout,\n    reverse = defaultProps.reverse,\n    data,\n    minValue = defaultProps.minValue,\n    maxValue = defaultProps.maxValue,\n    margin,\n    width,\n    height,\n    padding = defaultProps.padding,\n    innerPadding = defaultProps.innerPadding,\n    valueScale = defaultProps.valueScale,\n    indexScale = defaultProps.indexScale,\n    initialHiddenIds = defaultProps.initialHiddenIds,\n    enableLabel = defaultProps.enableLabel,\n    labelSkipWidth = defaultProps.labelSkipWidth,\n    labelSkipHeight = defaultProps.labelSkipHeight,\n    legends = defaultProps.legends,\n    legendLabel,\n}: {\n    indexBy?: BarCommonProps<RawDatum>['indexBy']\n    label?: BarCommonProps<RawDatum>['label']\n    tooltipLabel?: BarCommonProps<RawDatum>['tooltipLabel']\n    valueFormat?: BarCommonProps<RawDatum>['valueFormat']\n    colors?: BarCommonProps<RawDatum>['colors']\n    colorBy?: BarCommonProps<RawDatum>['colorBy']\n    borderColor?: BarCommonProps<RawDatum>['borderColor']\n    labelTextColor?: BarCommonProps<RawDatum>['labelTextColor']\n    groupMode?: BarCommonProps<RawDatum>['groupMode']\n    layout?: BarCommonProps<RawDatum>['layout']\n    reverse?: BarCommonProps<RawDatum>['reverse']\n    data: DataProps<RawDatum>['data']\n    keys?: BarCommonProps<RawDatum>['keys']\n    minValue?: BarCommonProps<RawDatum>['minValue']\n    maxValue?: BarCommonProps<RawDatum>['maxValue']\n    margin: Margin\n    width: number\n    height: number\n    padding?: BarCommonProps<RawDatum>['padding']\n    innerPadding?: BarCommonProps<RawDatum>['innerPadding']\n    valueScale?: BarCommonProps<RawDatum>['valueScale']\n    indexScale?: BarCommonProps<RawDatum>['indexScale']\n    initialHiddenIds?: BarCommonProps<RawDatum>['initialHiddenIds']\n    enableLabel?: BarCommonProps<RawDatum>['enableLabel']\n    labelSkipWidth?: BarCommonProps<RawDatum>['labelSkipWidth']\n    labelSkipHeight?: BarCommonProps<RawDatum>['labelSkipHeight']\n    legends?: BarCommonProps<RawDatum>['legends']\n    legendLabel?: BarCommonProps<RawDatum>['legendLabel']\n}) => {\n    const [hiddenIds, setHiddenIds] = useState(initialHiddenIds ?? [])\n    const toggleSerie = useCallback((id: string | number) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const getIndex = usePropertyAccessor(indexBy)\n    const getLabel = usePropertyAccessor(label)\n    const getTooltipLabel = usePropertyAccessor(tooltipLabel)\n    const formatValue = useValueFormatter(valueFormat)\n\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale(colors, colorBy)\n    const getBorderColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        borderColor,\n        theme\n    )\n    const getLabelColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        labelTextColor,\n        theme\n    )\n\n    const generateBars = groupMode === 'grouped' ? generateGroupedBars : generateStackedBars\n    const { bars, xScale, yScale } = generateBars({\n        layout,\n        reverse,\n        data,\n        getIndex,\n        keys,\n        minValue,\n        maxValue,\n        width,\n        height,\n        getColor,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        hiddenIds,\n        formatValue,\n        getTooltipLabel,\n        margin,\n    })\n\n    const barsWithValue = useMemo(\n        () =>\n            bars\n                .filter(\n                    (bar): bar is ComputedBarDatumWithValue<RawDatum> => bar.data.value !== null\n                )\n                .map((bar, index) => ({\n                    ...bar,\n                    index,\n                })),\n        [bars]\n    )\n\n    const shouldRenderBarLabel = useCallback(\n        ({ width, height }: { height: number; width: number }) => {\n            if (!enableLabel) return false\n            if (labelSkipWidth > 0 && width < labelSkipWidth) return false\n            if (labelSkipHeight > 0 && height < labelSkipHeight) return false\n            return true\n        },\n        [enableLabel, labelSkipWidth, labelSkipHeight]\n    )\n\n    const legendData = useMemo(\n        () =>\n            keys.map(key => {\n                const bar = bars.find(bar => bar.data.id === key)\n\n                return { ...bar, data: { id: key, ...bar?.data, hidden: hiddenIds.includes(key) } }\n            }),\n        [hiddenIds, keys, bars]\n    )\n\n    const legendsWithData: [BarLegendProps, LegendData[]][] = useMemo(\n        () =>\n            legends.map(legend => {\n                const data = getLegendData({\n                    bars: legend.dataFrom === 'keys' ? legendData : bars,\n                    direction: legend.direction,\n                    from: legend.dataFrom,\n                    groupMode,\n                    layout,\n                    legendLabel,\n                    reverse,\n                })\n\n                return [legend, data]\n            }),\n        [legends, legendData, bars, groupMode, layout, legendLabel, reverse]\n    )\n\n    return {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getIndex,\n        getLabel,\n        getTooltipLabel,\n        formatValue,\n        getColor,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        hiddenIds,\n        toggleSerie,\n        legendsWithData,\n    }\n}\n","import { Axes, Grid } from '@nivo/axes'\nimport { BarAnnotations } from './BarAnnotations'\nimport {\n    BarCustomLayerProps,\n    BarDatum,\n    BarLayer,\n    BarLayerId,\n    BarSvgProps,\n    ComputedBarDatumWithValue,\n} from './types'\nimport { BarLegends } from './BarLegends'\nimport {\n    CartesianMarkers,\n    Container,\n    SvgWrapper,\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    useMotionConfig,\n} from '@nivo/core'\nimport { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport { svgDefaultProps } from './props'\nimport { useTransition } from '@react-spring/web'\nimport { useBar } from './hooks'\n\ntype InnerBarProps<RawDatum extends BarDatum> = Omit<\n    BarSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBar = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = svgDefaultProps.layers as readonly BarLayer<RawDatum>[],\n    barComponent = svgDefaultProps.barComponent,\n\n    enableLabel = svgDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = svgDefaultProps.labelSkipWidth,\n    labelSkipHeight = svgDefaultProps.labelSkipHeight,\n    labelTextColor,\n\n    markers = svgDefaultProps.markers,\n\n    colorBy,\n    colors,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    borderRadius = svgDefaultProps.borderRadius,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = svgDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    isFocusable = svgDefaultProps.isFocusable,\n    barAriaLabel,\n    barAriaLabelledBy,\n    barAriaDescribedBy,\n\n    initialHiddenIds,\n}: InnerBarProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        toggleSerie,\n        legendsWithData,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        initialHiddenIds,\n    })\n\n    const transition = useTransition<\n        ComputedBarDatumWithValue<RawDatum>,\n        {\n            borderColor: string\n            color: string\n            height: number\n            labelColor: string\n            labelOpacity: number\n            labelX: number\n            labelY: number\n            opacity: number\n            transform: string\n            width: number\n        }\n    >(barsWithValue, {\n        keys: bar => bar.key,\n        from: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        enter: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        update: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        leave: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            labelX: bar.width / 2,\n            labelY: 0,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      labelX: 0,\n                      labelY: bar.height / 2,\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        config: springConfig,\n        immediate: !animate,\n        initial: animate ? undefined : null,\n    })\n\n    const commonProps = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            isFocusable,\n            ariaLabel: barAriaLabel,\n            ariaLabelledBy: barAriaLabelledBy,\n            ariaDescribedBy: barAriaDescribedBy,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            getTooltipLabel,\n            isInteractive,\n            labelSkipHeight,\n            labelSkipWidth,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            tooltip,\n            isFocusable,\n            barAriaLabel,\n            barAriaLabelledBy,\n            barAriaDescribedBy,\n        ]\n    )\n\n    const boundDefs = bindDefs(defs, bars, fill, {\n        dataKey: 'data',\n        targetKey: 'data.fill',\n    })\n\n    const layerById: Record<BarLayerId, ReactNode> = {\n        annotations: null,\n        axes: null,\n        bars: null,\n        grid: null,\n        legends: null,\n        markers: null,\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <BarAnnotations key=\"annotations\" bars={bars} annotations={annotations} />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Fragment key=\"bars\">\n                {transition((style, bar) =>\n                    createElement(barComponent, {\n                        ...commonProps,\n                        bar,\n                        style,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                        label: getLabel(bar.data),\n                    })\n                )}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <BarLegends\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                legends={legendsWithData}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<number | string, number>\n                key=\"markers\"\n                markers={markers as any[]}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (v: number | string) => number}\n                yScale={yScale as (v: number) => number}\n            />\n        )\n    }\n\n    const layerContext: BarCustomLayerProps<RawDatum> = useMemo(\n        () => ({\n            ...commonProps,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendData: legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        }),\n        [\n            commonProps,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        ]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n            isFocusable={isFocusable}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Bar = <RawDatum extends BarDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: BarSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerBar<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import {\n    BarCanvasCustomLayerProps,\n    BarCanvasLayer,\n    BarCanvasProps,\n    BarDatum,\n    ComputedBarDatum,\n} from './types'\nimport {\n    Container,\n    Margin,\n    getRelativeCursor,\n    isCursorInRect,\n    useDimensions,\n    useTheme,\n} from '@nivo/core'\nimport {\n    ForwardedRef,\n    createElement,\n    forwardRef,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n} from 'react'\nimport { canvasDefaultProps } from './props'\nimport {\n    renderAnnotationsToCanvas,\n    useAnnotations,\n    useComputedAnnotations,\n} from '@nivo/annotations'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useBar } from './hooks'\n\ntype InnerBarCanvasProps<RawDatum extends BarDatum> = Omit<\n    BarCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n> & {\n    canvasRef: ForwardedRef<HTMLCanvasElement>\n}\n\nconst findBarUnderCursor = <RawDatum,>(\n    nodes: ComputedBarDatum<RawDatum>[],\n    margin: Margin,\n    x: number,\n    y: number\n) =>\n    nodes.find(node =>\n        isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y)\n    )\n\nconst isNumber = (value: unknown): value is number => typeof value === 'number'\n\nconst InnerBarCanvas = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    enableGridX = canvasDefaultProps.enableGridX,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = canvasDefaultProps.layers as BarCanvasLayer<RawDatum>[],\n    renderBar = (\n        ctx,\n        {\n            bar: { color, height, width, x, y },\n\n            borderColor,\n            borderRadius,\n            borderWidth,\n            label,\n            labelColor,\n            shouldRenderLabel,\n        }\n    ) => {\n        ctx.fillStyle = color\n\n        if (borderWidth > 0) {\n            ctx.strokeStyle = borderColor\n            ctx.lineWidth = borderWidth\n        }\n\n        ctx.beginPath()\n\n        if (borderRadius > 0) {\n            const radius = Math.min(borderRadius, height)\n\n            ctx.moveTo(x + radius, y)\n            ctx.lineTo(x + width - radius, y)\n            ctx.quadraticCurveTo(x + width, y, x + width, y + radius)\n            ctx.lineTo(x + width, y + height - radius)\n            ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height)\n            ctx.lineTo(x + radius, y + height)\n            ctx.quadraticCurveTo(x, y + height, x, y + height - radius)\n            ctx.lineTo(x, y + radius)\n            ctx.quadraticCurveTo(x, y, x + radius, y)\n            ctx.closePath()\n        } else {\n            ctx.rect(x, y, width, height)\n        }\n\n        ctx.fill()\n\n        if (borderWidth > 0) {\n            ctx.stroke()\n        }\n\n        if (shouldRenderLabel) {\n            ctx.textBaseline = 'middle'\n            ctx.textAlign = 'center'\n            ctx.fillStyle = labelColor\n            ctx.fillText(label, x + width / 2, y + height / 2)\n        }\n    },\n\n    enableLabel = canvasDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = canvasDefaultProps.labelSkipWidth,\n    labelSkipHeight = canvasDefaultProps.labelSkipHeight,\n    labelTextColor,\n\n    colorBy,\n    colors,\n    borderRadius = canvasDefaultProps.borderRadius,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = canvasDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = canvasDefaultProps.isInteractive,\n    tooltip = canvasDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    pixelRatio = canvasDefaultProps.pixelRatio,\n\n    canvasRef,\n}: InnerBarCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const theme = useTheme()\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        legendsWithData,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    // Using any because return type isn't correct\n    const boundAnnotations: any = useComputedAnnotations({\n        annotations: useAnnotations({\n            data: bars,\n            annotations,\n            getPosition: node => ({\n                x: node.x,\n                y: node.y,\n            }),\n            getDimensions: ({ width, height }) => ({\n                width,\n                height,\n                size: Math.max(width, height),\n            }),\n        }),\n    })\n\n    // We use `any` here until we can figure out the best way to type xScale/yScale\n    const layerContext: BarCanvasCustomLayerProps<RawDatum> = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            isFocusable: false,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendData: legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        ]\n    )\n\n    useEffect(() => {\n        const ctx = canvasEl.current?.getContext('2d')\n\n        if (!canvasEl.current) return\n        if (!ctx) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                if (isNumber(theme.grid.line.strokeWidth) && theme.grid.line.strokeWidth > 0) {\n                    ctx.lineWidth = theme.grid.line.strokeWidth\n                    ctx.strokeStyle = theme.grid.line.stroke as string\n\n                    if (enableGridX) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width,\n                            height,\n                            scale: xScale,\n                            axis: 'x',\n                            values: gridXValues,\n                        })\n                    }\n\n                    if (enableGridY) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width,\n                            height,\n                            scale: yScale,\n                            axis: 'y',\n                            values: gridYValues,\n                        })\n                    }\n                }\n            } else if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale: xScale,\n                    yScale: yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            } else if (layer === 'bars') {\n                barsWithValue.forEach(bar => {\n                    renderBar(ctx, {\n                        bar,\n                        borderColor: getBorderColor(bar) as string,\n                        borderRadius,\n                        borderWidth,\n                        label: getLabel(bar.data),\n                        labelColor: getLabelColor(bar) as string,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                    })\n                })\n            } else if (layer === 'legends') {\n                legendsWithData.forEach(([legend, data]) => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas(ctx, { annotations: boundAnnotations, theme })\n            } else if (typeof layer === 'function') {\n                layer(ctx, layerContext)\n            }\n        })\n\n        ctx.save()\n    }, [\n        axisBottom,\n        axisLeft,\n        axisRight,\n        axisTop,\n        barsWithValue,\n        borderRadius,\n        borderWidth,\n        boundAnnotations,\n        enableGridX,\n        enableGridY,\n        getBorderColor,\n        getLabel,\n        getLabelColor,\n        gridXValues,\n        gridYValues,\n        groupMode,\n        height,\n        innerHeight,\n        innerWidth,\n        layerContext,\n        layers,\n        layout,\n        legendsWithData,\n        margin.left,\n        margin.top,\n        outerHeight,\n        outerWidth,\n        pixelRatio,\n        renderBar,\n        xScale,\n        yScale,\n        reverse,\n        shouldRenderBarLabel,\n        theme,\n        width,\n    ])\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                showTooltipFromEvent(\n                    createElement(tooltip, {\n                        ...bar.data,\n                        color: bar.color,\n                        label: bar.label,\n                        value: Number(bar.data.value),\n                    }),\n                    event\n                )\n\n                if (event.type === 'mouseenter') {\n                    onMouseEnter?.(bar.data, event)\n                }\n            } else {\n                hideTooltip()\n            }\n        },\n        [hideTooltip, margin, onMouseEnter, bars, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            hideTooltip()\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar) {\n                onMouseLeave?.(bar.data, event)\n            }\n        },\n        [hideTooltip, margin, onMouseLeave, bars]\n    )\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                onClick?.({ ...bar.data, color: bar.color }, event)\n            }\n        },\n        [margin, onClick, bars]\n    )\n\n    return (\n        <canvas\n            ref={canvas => {\n                canvasEl.current = canvas\n                if (canvasRef && 'current' in canvasRef) canvasRef.current = canvas\n            }}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const BarCanvas = forwardRef(\n    <RawDatum extends BarDatum>(\n        { isInteractive, renderWrapper, theme, ...props }: BarCanvasProps<RawDatum>,\n        ref: ForwardedRef<HTMLCanvasElement>\n    ) => (\n        <Container {...{ isInteractive, renderWrapper, theme }} animate={false}>\n            <InnerBarCanvas<RawDatum> {...props} canvasRef={ref} />\n        </Container>\n    )\n)\n","import { Bar } from './Bar'\nimport { BarDatum, BarSvgProps } from './types'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport type ResponsiveBarSvgProps<RawDatum extends BarDatum> = Omit<\n    BarSvgProps<RawDatum>,\n    'height' | 'width'\n>\n\nexport const ResponsiveBar = <RawDatum extends BarDatum>(\n    props: ResponsiveBarSvgProps<RawDatum>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Bar<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { BarDatum, BarCanvasProps } from './types'\nimport { BarCanvas } from './BarCanvas'\nimport { ForwardedRef, forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport type ResponsiveBarCanvasProps<RawDatum extends BarDatum> = Omit<\n    BarCanvasProps<RawDatum>,\n    'height' | 'width'\n>\n\nexport const ResponsiveBarCanvas = forwardRef(function ResponsiveBarCanvas<\n    RawDatum extends BarDatum\n>(props: ResponsiveBarCanvasProps<RawDatum>, ref: ForwardedRef<HTMLCanvasElement>) {\n    return (\n        <ResponsiveWrapper>\n            {({ width, height }) => (\n                <BarCanvas\n                    width={width}\n                    height={height}\n                    {...(props as Omit<BarCanvasProps<BarDatum>, 'height' | 'width'>)}\n                    ref={ref}\n                />\n            )}\n        </ResponsiveWrapper>\n    )\n})\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}